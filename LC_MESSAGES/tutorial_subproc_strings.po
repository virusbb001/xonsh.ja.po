# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Anthony Scopatz
# This file is distributed under the same license as the xonsh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xonsh 0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-30 00:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorial_subproc_strings.rst:5
msgid "Tutorial: Subprocess Strings"
msgstr ""

#: ../../tutorial_subproc_strings.rst:6
msgid "Strings in xonsh follow two simple rules:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:8
msgid "Strings in xonsh are always parsed in the same way, and"
msgstr ""

#: ../../tutorial_subproc_strings.rst:9
msgid "Python always wins!"
msgstr ""

#: ../../tutorial_subproc_strings.rst:11
msgid ""
"Together these rules mean that **even strings in subprocess mode are "
"treated like Python strings!** This will (help) preserve your sanity."
msgstr ""

#: ../../tutorial_subproc_strings.rst:15
msgid "No Escape"
msgstr ""

#: ../../tutorial_subproc_strings.rst:16
msgid ""
"Xonsh strings are exactly like Python strings everywhere. Xonsh uses "
"exactly the same escape characters that Python does; no more and no less."
" This is different from other shells, which have a different set of "
"escape sequences than Python has.  Notably, many sh-langs allow you to "
"escape spaces with ``\"\\ \"`` (backslash-space)."
msgstr ""

#: ../../tutorial_subproc_strings.rst:22
msgid "**bash**"
msgstr ""

#: ../../tutorial_subproc_strings.rst:29
msgid ""
"In the above example, since the spaces are escaped, the ``echo`` command "
"only receves a single argument. Xonsh does not allow this. If you were to"
" try this in xonsh, you'd see:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:33 ../../tutorial_subproc_strings.rst:72
#: ../../tutorial_subproc_strings.rst:98 ../../tutorial_subproc_strings.rst:111
msgid "**xonsh**"
msgstr ""

#: ../../tutorial_subproc_strings.rst:40
msgid ""
"In this example, echo recives three arguments:: ``\"Actually\\\\\"``, "
"``\"Three\\\\\"``, and ``\"Arguments\"``. Instead, xonsh requires you to "
"use quotes in order to pass in a single argument:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:44
msgid "**xonsh** or **bash**"
msgstr ""

#: ../../tutorial_subproc_strings.rst:51
msgid ""
"Using quotes is arguably what should have been done in sh-lang in the "
"first place."
msgstr ""

#: ../../tutorial_subproc_strings.rst:56
msgid "When in doubt in subprocess mode, use quotes!"
msgstr ""

#: ../../tutorial_subproc_strings.rst:60
msgid "Justification"
msgstr ""

#: ../../tutorial_subproc_strings.rst:61
msgid ""
"The reasons for not having additional escape sequences, as in sh-langs, "
"are:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:63
msgid "Escape charaters can get overwhemlingly ugly, fast."
msgstr ""

#: ../../tutorial_subproc_strings.rst:64
msgid "We have escape characters, they are called quotes :)"
msgstr ""

#: ../../tutorial_subproc_strings.rst:65
msgid "We have literal input in subprocess mode via macros."
msgstr ""

#: ../../tutorial_subproc_strings.rst:67
msgid ""
"On this last point, if you don't already know about `Subprocess Macros "
"<tutorial_macros.html#subprocess-macros>`_, these allow all input "
"following an ``!`` to be treated as a single argument. For example,"
msgstr ""

#: ../../tutorial_subproc_strings.rst:79
msgid "Subprocess macros are the ultimate escape mechanism."
msgstr ""

#: ../../tutorial_subproc_strings.rst:82
msgid "The Quotes Stay"
msgstr ""

#: ../../tutorial_subproc_strings.rst:83
msgid "In sh-langs, internal quote characters are removed. For instance:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:93
msgid ""
"Xonsh considers this behavior insane. Instead, xonsh treats these "
"arguments as if they were surrounded in another, outer level of quotation"
" (``'foo\"bar\"baz'``). Xonsh will keep the quotation marks when leading "
"and trailing quotes are not matched."
msgstr ""

#: ../../tutorial_subproc_strings.rst:108
msgid "You can think of these being equivalent to,"
msgstr ""

#: ../../tutorial_subproc_strings.rst:121
msgid ""
"This is yet another major point of departure for xonsh from traditional "
"shells. However, the xonsh subprocess string handling is consistent and "
"predictable."
msgstr ""

#: ../../tutorial_subproc_strings.rst:126
msgid "Further Reading"
msgstr ""

#: ../../tutorial_subproc_strings.rst:127
msgid ""
"For deeper details on the great string debate, please feel free to read "
"and comment at:"
msgstr ""

#: ../../tutorial_subproc_strings.rst:130
msgid "`To Quote or Not Quote <https://github.com/xonsh/xonsh/issues/1432>`_"
msgstr ""

#: ../../tutorial_subproc_strings.rst:131
msgid ""
"`Quote removal in subprocess mode does not behave as expected "
"<https://github.com/xonsh/xonsh/issues/621>`_"
msgstr ""

