# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Anthony Scopatz
# This file is distributed under the same license as the xonsh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xonsh 0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-30 00:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/aliases.rst:5
msgid "Aliases (``xonsh.aliases``)"
msgstr ""

#: of xonsh.aliases:1
msgid "Aliases for the xonsh shell."
msgstr ""

#: of xonsh.aliases.Aliases:2
msgid "Represents a location to hold and look up aliases."
msgstr ""

#: of xonsh.aliases.Aliases.eval_alias:2
msgid ""
"\"Evaluates\" the alias ``value``, by recursively looking up the leftmost"
" token and \"expanding\" if it's also an alias."
msgstr ""

#: of xonsh.aliases.Aliases.eval_alias:5
msgid ""
"A value like ``[\"cmd\", \"arg\"]`` might transform like this: ``> "
"[\"cmd\", \"arg\"] -> [\"ls\", \"-al\", \"arg\"] -> callable()`` where "
"``cmd=ls -al`` and ``ls`` is an alias with its value being a callable.  "
"The resulting callable will be \"partially applied\" with ``[\"-al\", "
"\"arg\"]``."
msgstr ""

#: of xonsh.aliases.Aliases.expand_alias:2
msgid ""
"Expands any aliases present in line if alias does not point to a builtin "
"function and if alias is only a single command."
msgstr ""

#: of xonsh.aliases.Aliases.get:2
msgid ""
"Returns the (possibly modified) value. If the key is not present, then "
"`default` is returned. If the value is callable, it is returned without "
"modification. If it is an iterable of strings it will be evaluated "
"recursively to expand other aliases, resulting in a new list or a "
"\"partially applied\" callable."
msgstr ""

#: of xonsh.aliases.Aliases.pop:2 xonsh.environ.Env.pop:2
#: xonsh.environ.LsColors.pop:2
msgid "If key is not found, d is returned if given, otherwise KeyError is raised."
msgstr ""

#: of xonsh.aliases.Aliases.popitem:2 xonsh.environ.Env.popitem:2
#: xonsh.environ.LsColors.popitem:2
msgid "as a 2-tuple; but raise KeyError if D is empty."
msgstr ""

#: of xonsh.aliases.Aliases.update:2 xonsh.environ.Env.update:2
#: xonsh.environ.LsColors.update:2
msgid ""
"If E present and has a .keys() method, does:     for k in E: D[k] = E[k] "
"If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = "
"v In either case, this is followed by: for k, v in F.items(): D[k] = v"
msgstr ""

#: of xonsh.aliases.ExecAlias:2
msgid "Provides a callable alias for xonsh source code."
msgstr ""

#: ../../api/platform.rst ../../docstring of xonsh.aliases.ExecAlias
#: xonsh.aliases.PartialEvalAlias0 xonsh.aliases.PartialEvalAlias1
#: xonsh.aliases.PartialEvalAlias2 xonsh.aliases.PartialEvalAlias3
#: xonsh.aliases.PartialEvalAlias4 xonsh.aliases.PartialEvalAlias5
#: xonsh.aliases.PartialEvalAlias6 xonsh.aliases.PartialEvalAliasBase
#: xonsh.ast.CtxAwareTransformer xonsh.ast.CtxAwareTransformer.ctxvisit
#: xonsh.built_ins.DynamicAccessProxy xonsh.built_ins.SubprocSpec
#: xonsh.built_ins.XonshSession xonsh.built_ins.XonshSession.load
#: xonsh.built_ins.call_macro xonsh.built_ins.convert_macro_arg
#: xonsh.built_ins.enter_macro xonsh.built_ins.in_macro_call
#: xonsh.color_tools.rgb2short xonsh.color_tools.rgb_to_256
#: xonsh.commands_cache.CommandsCache.lazy_locate_binary
#: xonsh.commands_cache.CommandsCache.locate_binary
#: xonsh.completer.Completer.complete xonsh.contexts.Functor
#: xonsh.diff_history.HistoryDiffer xonsh.environ.VarDocs
#: xonsh.events.AbstractEvent.fire xonsh.events.Event.fire
#: xonsh.events.EventManager.doc xonsh.events.EventManager.transmogrify
#: xonsh.events.LoadEvent.fire xonsh.execer.Execer
#: xonsh.foreign_shells.ForeignShellBaseAlias
#: xonsh.foreign_shells.ForeignShellExecAlias
#: xonsh.foreign_shells.ForeignShellFunctionAlias
#: xonsh.foreign_shells.foreign_shell_data
#: xonsh.foreign_shells.load_foreign_aliases
#: xonsh.foreign_shells.load_foreign_envs xonsh.history.base.History
#: xonsh.history.base.History.append xonsh.history.base.History.run_gc
#: xonsh.history.json.JsonCommandField xonsh.history.json.JsonHistory
#: xonsh.history.json.JsonHistory.append xonsh.history.json.JsonHistory.flush
#: xonsh.history.json.JsonHistory.run_gc
#: xonsh.history.sqlite.SqliteHistory.append
#: xonsh.history.sqlite.SqliteHistory.run_gc xonsh.inspectors.Inspector.pinfo
#: xonsh.inspectors.call_tip xonsh.inspectors.find_file
#: xonsh.inspectors.find_source_lines xonsh.jupyter_kernel.XonshKernel
#: xonsh.jupyter_shell.StdJupyterRedirect xonsh.lazyasd.LazyBool
#: xonsh.lazyasd.LazyDict xonsh.lazyasd.LazyObject
#: xonsh.lazyasd.load_module_in_background xonsh.lazyjson.LJNode
#: xonsh.lazyjson.LazyJSON xonsh.lexer.handle_token xonsh.lib.os.rmtree
#: xonsh.main.setup xonsh.openpy.read_py_file xonsh.openpy.read_py_url
#: xonsh.proc.BufferedFDParallelReader xonsh.proc.CommandPipeline
#: xonsh.proc.ConsoleParallelReader xonsh.proc.FileThreadDispatcher
#: xonsh.proc.HiddenCommandPipeline xonsh.proc.NonBlockingFDReader
#: xonsh.proc.PrevProcCloser xonsh.proc.ProcProxyThread xonsh.proc.QueueReader
#: xonsh.proc.parse_proxy_return xonsh.proc.pause_call_resume
#: xonsh.pyghooks.XonshStyle xonsh.pyghooks.code_by_name
#: xonsh.pyghooks.color_by_name xonsh.replay.Replayer
#: xonsh.replay.Replayer.replay xonsh.shell.Shell xonsh.tools.EnvPath.add
#: xonsh.tools.check_for_partial_string xonsh.tools.deprecated
#: xonsh.tools.get_portions xonsh.tools.indent xonsh.wizard.FileInserter
#: xonsh.wizard.Input xonsh.wizard.LoadJSON xonsh.wizard.PromptVisitor
#: xonsh.wizard.Question xonsh.wizard.SaveJSON xonsh.wizard.StateFile
#: xonsh.wizard.While xonsh.wizard.YesNo xonsh.xonfig.make_xonfig_wizard
#: xontrib.mplhooks.display_figure_with_iterm2
#: xontrib.mplhooks.figure_to_rgb_array xontrib.mplhooks.figure_to_tight_array
#: xontrib.voxapi.Vox.activate xontrib.voxapi.Vox.create
#: xontrib.voxapi.Vox.upgrade
msgid "Parameters"
msgstr ""

#: of xonsh.aliases.ExecAlias:41 xonsh.foreign_shells.ForeignShellExecAlias:28
msgid "**src**"
msgstr ""

#: ../../docstring of xonsh.aliases.ExecAlias:40
#: xonsh.ast.CtxAwareTransformer.ctxvisit:10
#: xonsh.built_ins.DynamicAccessProxy:28 xonsh.built_ins.DynamicAccessProxy:45
#: xonsh.built_ins.convert_macro_arg:7 xonsh.built_ins.enter_macro:14
#: xonsh.commands_cache.CommandsCache.lazy_locate_binary:7
#: xonsh.commands_cache.CommandsCache.locate_binary:7
#: xonsh.completer.Completer.complete:7 xonsh.completer.Completer.complete:10
#: xonsh.environ.VarDocs:7 xonsh.events.EventManager.doc:7
#: xonsh.events.EventManager.doc:23 xonsh.events.EventManager.transmogrify:8
#: xonsh.foreign_shells.ForeignShellBaseAlias:28
#: xonsh.foreign_shells.ForeignShellBaseAlias:31
#: xonsh.foreign_shells.ForeignShellExecAlias:27
#: xonsh.foreign_shells.ForeignShellExecAlias:30
#: xonsh.foreign_shells.ForeignShellExecAlias:33
#: xonsh.foreign_shells.ForeignShellFunctionAlias:28
#: xonsh.foreign_shells.ForeignShellFunctionAlias:31
#: xonsh.foreign_shells.ForeignShellFunctionAlias:34
#: xonsh.foreign_shells.foreign_shell_data:8
#: xonsh.history.json.JsonCommandField:29 xonsh.inspectors.find_file:27
#: xonsh.jupyter_shell.StdJupyterRedirect:27 xonsh.lazyasd.LazyBool:35
#: xonsh.lazyasd.LazyDict:41 xonsh.lazyasd.LazyObject:35
#: xonsh.lazyasd.load_module_in_background:7 xonsh.lexer.Lexer:39
#: xonsh.lib.os.rmtree:9 xonsh.openpy.read_py_file:7 xonsh.openpy.read_py_url:7
#: xonsh.openpy.read_py_url:11 xonsh.proc.CommandPipeline:52
#: xonsh.proc.CommandPipeline:55 xonsh.proc.CommandPipeline:58
#: xonsh.proc.HiddenCommandPipeline:32 xonsh.proc.HiddenCommandPipeline:35
#: xonsh.proc.HiddenCommandPipeline:38 xonsh.pyghooks.code_by_name:7
#: xonsh.pyghooks.code_by_name:27 xonsh.pyghooks.color_by_name:9
#: xonsh.tools.check_for_partial_string:9 xonsh.tools.deprecated:17
#: xonsh.tools.deprecated:33 xonsh.wizard.FileInserter:29
#: xonsh.wizard.FileInserter:34 xonsh.wizard.Question:27 xonsh.wizard.YesNo:27
#: xontrib.voxapi.Vox.activate:20 xontrib.voxapi.Vox.create:7
#: xontrib.voxapi.Vox.upgrade:9
msgid "str"
msgstr ""

#: of xonsh.aliases.ExecAlias:28
msgid "Source code that will be"
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:8 xonsh.aliases.PartialEvalAlias1:8
#: xonsh.aliases.PartialEvalAlias2:8 xonsh.aliases.PartialEvalAlias3:8
#: xonsh.aliases.PartialEvalAlias4:8 xonsh.aliases.PartialEvalAlias5:8
#: xonsh.aliases.PartialEvalAlias6:8 xonsh.aliases.PartialEvalAliasBase:28
#: xonsh.built_ins.call_macro:8 xonsh.built_ins.in_macro_call:9
#: xonsh.lazyjson.LazyJSON:29 xonsh.proc.ProcProxyThread:28
#: xonsh.proc.pause_call_resume:12 xonsh.replay.Replayer:28
msgid "**f**"
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:7 xonsh.aliases.PartialEvalAlias1:7
#: xonsh.aliases.PartialEvalAlias2:7 xonsh.aliases.PartialEvalAlias3:7
#: xonsh.aliases.PartialEvalAlias4:7 xonsh.aliases.PartialEvalAlias5:7
#: xonsh.aliases.PartialEvalAlias6:7 xonsh.aliases.PartialEvalAliasBase:27
#: xonsh.proc.pause_call_resume:11 xonsh.wizard.While:31
msgid "callable"
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:8 xonsh.aliases.PartialEvalAlias1:8
#: xonsh.aliases.PartialEvalAlias2:8 xonsh.aliases.PartialEvalAlias3:8
#: xonsh.aliases.PartialEvalAlias4:8 xonsh.aliases.PartialEvalAlias5:8
#: xonsh.aliases.PartialEvalAlias6:8 xonsh.aliases.PartialEvalAliasBase:28
msgid "A function to dispatch to."
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:25 xonsh.aliases.PartialEvalAlias1:25
#: xonsh.aliases.PartialEvalAlias2:25 xonsh.aliases.PartialEvalAlias3:25
#: xonsh.aliases.PartialEvalAlias4:25 xonsh.aliases.PartialEvalAlias5:25
#: xonsh.aliases.PartialEvalAlias6:25 xonsh.aliases.PartialEvalAliasBase:45
msgid "**acc_args**"
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:24 xonsh.aliases.PartialEvalAlias1:24
#: xonsh.aliases.PartialEvalAlias2:24 xonsh.aliases.PartialEvalAlias3:24
#: xonsh.aliases.PartialEvalAlias4:24 xonsh.aliases.PartialEvalAlias5:24
#: xonsh.aliases.PartialEvalAlias6:24 xonsh.aliases.PartialEvalAliasBase:44
msgid "sequence of strings, optional"
msgstr ""

#: of xonsh.aliases.PartialEvalAlias0:11 xonsh.aliases.PartialEvalAlias1:11
#: xonsh.aliases.PartialEvalAlias2:11 xonsh.aliases.PartialEvalAlias3:11
#: xonsh.aliases.PartialEvalAlias4:11 xonsh.aliases.PartialEvalAlias5:11
#: xonsh.aliases.PartialEvalAlias6:11 xonsh.aliases.PartialEvalAliasBase:31
msgid ""
"Additional arguments to prepent to the argument list passed in when the "
"alias is called."
msgstr ""

#: of xonsh.aliases.PartialEvalAliasBase:2
msgid "Partially evaluated alias."
msgstr ""

#: of xonsh.aliases.detect_xpip_alias:2
msgid "Determines the correct invocation to get xonsh's pip"
msgstr ""

#: of xonsh.aliases.make_default_aliases:2
msgid "Creates a new default aliases dictionary."
msgstr ""

#: of xonsh.aliases.partial_eval_alias:2
msgid ""
"Dispatches the appropriate eval alias based on the number of args to the "
"original callable alias and how many arguments to apply."
msgstr ""

#: of xonsh.aliases.showcmd:2
msgid "usage: showcmd [-h|--help|cmd args]"
msgstr ""

#: of xonsh.aliases.showcmd:4
msgid ""
"Displays the command and arguments as a list of strings that xonsh would "
"run in subprocess mode. This is useful for determining how xonsh "
"evaluates your commands and arguments prior to running these commands."
msgstr ""

#: of xonsh.aliases.showcmd:9
msgid "optional arguments:"
msgstr ""

#: of xonsh.aliases.showcmd:9
msgid "show this help message and exit"
msgstr ""

#: of xonsh.aliases.showcmd:27
msgid "example:"
msgstr ""

#: of xonsh.aliases.source_alias:2
msgid ""
"Executes the contents of the provided files in the current context. If "
"sourced file isn't found in cwd, search for file along $PATH to source "
"instead."
msgstr ""

#: of xonsh.aliases.source_cmd:2
msgid "Simple cmd.exe-specific wrapper around source-foreign."
msgstr ""

#: of xonsh.aliases.source_foreign:2
msgid "Sources a file written in a foreign shell language."
msgstr ""

#: of xonsh.aliases.trace:2
msgid "Runs the xonsh tracer utility."
msgstr ""

#: of xonsh.aliases.xexec:2
msgid "exec [-h|--help] command [args...]"
msgstr ""

#: of xonsh.aliases.xexec:4
msgid ""
"exec (also aliased as xexec) uses the os.execvpe() function to replace "
"the xonsh process with the specified program. This provides the "
"functionality of the bash 'exec' builtin::"
msgstr ""

#: of xonsh.aliases.xexec:11
msgid "The '-h' and '--help' options print this message and exit."
msgstr ""

#: of xonsh.aliases.xexec:23
msgid "Notes"
msgstr ""

#: of xonsh.aliases.xexec:24
msgid ""
"This command **is not** the same as the Python builtin function exec(). "
"That function is for running Python code. This command, which shares the "
"same name as the sh-lang statement, is for launching a command directly "
"in the same process. In the event of a name conflict, please use the "
"xexec command directly or dive into subprocess mode explicitly with "
"![exec command]. For more details, please see "
"http://xon.sh/faq.html#exec."
msgstr ""

#: of xonsh.aliases.xonfig:2
msgid "Runs the xonsh configuration utility."
msgstr ""

#: of xonsh.aliases.xonsh_exit:2
msgid "Sends signal to exit shell."
msgstr ""

#: of xonsh.aliases.xonsh_reset:2
msgid "Clears __xonsh__.ctx"
msgstr ""

#: ../../api/ast.rst:5
msgid "Abstract Syntax Tree (``xonsh.ast``)"
msgstr ""

#: of xonsh.ast:1
msgid "The xonsh abstract syntax tree node."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer:2
msgid ""
"Transforms a xonsh AST based to use subprocess calls when the first name "
"in an expression statement is not known in the context. This assumes that"
" the expression statement is instead parseable as a subprocess."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer:44
msgid "**parser**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer:43
msgid "xonsh.Parser"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer:31
msgid "A parse instance to try to parse subprocess statements with."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxadd:2
msgid "Adds a value the most recent context."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxremove:2
msgid "Removes a value the most recent context."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxupdate:2
msgid "Updated the most recent context."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:2
msgid "Transforms the node in a context-dependent way."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:8
#: xonsh.ast.CtxAwareTransformer.ctxvisit:37
msgid "**node**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:7
#: xonsh.ast.CtxAwareTransformer.ctxvisit:36
msgid "ast.AST"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:8
msgid "A syntax tree to transform."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:11 xonsh.proc.CommandPipeline:53
#: xonsh.proc.HiddenCommandPipeline:33
msgid "**input**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:11
msgid "The input code in string format."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:14 xonsh.built_ins.XonshSession:44
#: xonsh.built_ins.XonshSession.load:24 xonsh.completer.Completer.complete:20
#: xonsh.lazyasd.LazyBool:19 xonsh.lazyasd.LazyDict:25
#: xonsh.lazyasd.LazyObject:19 xonsh.main.setup:12 xonsh.shell.Shell:36
msgid "**ctx**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:13
#: xonsh.foreign_shells.foreign_shell_data:84
#: xonsh.foreign_shells.foreign_shell_data:100
#: xonsh.foreign_shells.load_foreign_aliases:25
#: xonsh.foreign_shells.load_foreign_envs:25
#: xonsh.history.json.JsonHistory.append:10 xonsh.inspectors.call_tip:7
#: xonsh.proc.FileThreadDispatcher:47
msgid "dict"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:14
msgid "The root context to use."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:17 xonsh.execer.Execer:28
#: xonsh.foreign_shells.ForeignShellBaseAlias:32
#: xonsh.foreign_shells.ForeignShellExecAlias:34
#: xonsh.foreign_shells.ForeignShellFunctionAlias:35
#: xonsh.history.json.JsonHistory:31 xonsh.openpy.read_py_file:8
msgid "**filename**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:16
#: xonsh.built_ins.convert_macro_arg:19 xonsh.built_ins.convert_macro_arg:22
#: xonsh.contexts.Functor:45 xonsh.environ.VarDocs:15 xonsh.execer.Execer:27
#: xonsh.foreign_shells.foreign_shell_data:33
#: xonsh.foreign_shells.foreign_shell_data:37 xonsh.history.json.JsonHistory:30
#: xonsh.inspectors.Inspector.pinfo:10
#: xonsh.lazyasd.load_module_in_background:13 xonsh.main.setup:15
#: xonsh.pyghooks.XonshStyle:42 xonsh.pyghooks.color_by_name:12
#: xonsh.pyghooks.color_by_name:15 xonsh.replay.Replayer.replay:28
#: xonsh.shell.Shell:52 xonsh.wizard.FileInserter:54 xonsh.wizard.Input:27
#: xonsh.wizard.LoadJSON:28 xonsh.wizard.SaveJSON:28 xonsh.wizard.StateFile:28
#: xonsh.wizard.While:39 xonsh.xonfig.make_xonfig_wizard:7
#: xonsh.xonfig.make_xonfig_wizard:27
msgid "str, optional"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:17
msgid "File we are to transform."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:20 xonsh.execer.Execer:31
#: xonsh.jupyter_kernel.XonshKernel:28
msgid "**debug_level**"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:19 xonsh.execer.Execer:30
#: xonsh.history.json.JsonHistory:37 xonsh.inspectors.Inspector.pinfo:30
#: xonsh.jupyter_kernel.XonshKernel:27 xonsh.proc.BufferedFDParallelReader:47
#: xonsh.proc.ConsoleParallelReader:35 xonsh.wizard.While:42
msgid "int, optional"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:20 xonsh.execer.Execer:31
msgid "Debugging level to use in lexing and parsing."
msgstr ""

#: ../../api/platform.rst of xonsh.ast.CtxAwareTransformer.ctxvisit
#: xonsh.built_ins.convert_macro_arg xonsh.built_ins.enter_macro
#: xonsh.color_tools.rgb2short xonsh.color_tools.rgb_to_256
#: xonsh.completer.Completer.complete xonsh.events.Event.fire
#: xonsh.foreign_shells.foreign_shell_data
#: xonsh.foreign_shells.load_foreign_aliases
#: xonsh.foreign_shells.load_foreign_envs xonsh.history.base.History.info
#: xonsh.history.json.JsonHistory.append xonsh.history.json.JsonHistory.flush
#: xonsh.history.json.JsonHistory.info xonsh.history.sqlite.SqliteHistory.info
#: xonsh.inspectors.call_tip xonsh.inspectors.find_file
#: xonsh.inspectors.find_source_lines xonsh.lazyasd.load_module_in_background
#: xonsh.openpy.read_py_file xonsh.openpy.read_py_url
#: xonsh.proc.ProcProxyThread.poll xonsh.proc.parse_proxy_return
#: xonsh.pyghooks.code_by_name xonsh.pyghooks.color_by_name
#: xonsh.tools.EnvPath.add xonsh.tools.check_for_partial_string
#: xonsh.tools.indent xontrib.mplhooks.figure_to_rgb_array
#: xontrib.mplhooks.figure_to_tight_array
msgid "Returns"
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.ctxvisit:25
msgid "The transformed node."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.generic_visit:2
msgid "Called if no explicit visitor function exists for a node."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.is_in_scope:2
msgid "Determines whether or not the current node is in scope."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.try_subproc_toks:2
msgid "Tries to parse the line of the node as a subprocess."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit:2
msgid "Visit a node."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_AnnAssign:2
#: xonsh.ast.CtxAwareTransformer.visit_Assign:2
msgid "Handle visiting an assignment statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_BoolOp:2
msgid "Handle visiting an boolean operands, like and/or."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_ClassDef:2
msgid "Handle visiting a class definition."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Delete:2
msgid "Handle visiting a del statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Expr:2
msgid "Handle visiting an expression."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Expression:2
msgid "Handle visiting an expression body."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_For:2
msgid "Handle visiting a for statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_FunctionDef:2
msgid "Handle visiting a function definition."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Global:2
msgid "Handle visiting a global statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Import:2
msgid "Handle visiting a import statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_ImportFrom:2
msgid "Handle visiting a \"from ... import ...\" statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_Try:2
msgid "Handle visiting a try statement."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_UnaryOp:2
msgid "Handle visiting an unary operands, like not."
msgstr ""

#: of xonsh.ast.CtxAwareTransformer.visit_With:2
msgid "Handle visiting a with statement."
msgstr ""

#: of xonsh.ast.gather_load_store_names:2
msgid ""
"Returns the names present in the node's tree in a set of load nodes and a"
" set of store nodes."
msgstr ""

#: of xonsh.ast.gather_names:2
msgid "Returns the set of all names present in the node's tree."
msgstr ""

#: of xonsh.ast.get_col:2
msgid "Gets the col_offset of a node, or returns the default"
msgstr ""

#: of xonsh.ast.get_id:2
msgid "Gets the id attribute of a node, or returns a default."
msgstr ""

#: of xonsh.ast.get_id_ctx:2
msgid "Gets the id and attribute of a node, or returns a default."
msgstr ""

#: of xonsh.ast.get_lineno:2
msgid "Gets the lineno of a node or returns the default."
msgstr ""

#: of xonsh.ast.has_elts:2
msgid "Tests if x is an AST node with elements."
msgstr ""

#: of xonsh.ast.isdescendable:2
msgid ""
"Determines whether or not a node is worth visiting. Currently only "
"UnaryOp and BoolOp nodes are visited."
msgstr ""

#: of xonsh.ast.isexpression:2
msgid ""
"Determines whether a node (or code string) is an expression, and does not"
" contain any statements. The execution context (ctx) and other args and "
"kwargs are passed down to the parser, as needed."
msgstr ""

#: of xonsh.ast.leftmostname:2
msgid "Attempts to find the first name in the tree."
msgstr ""

#: of xonsh.ast.load_attribute_chain:2
msgid ""
"Creates an AST that loads variable name that may (or may not) have "
"attribute chains. For example, \"a.b.c\""
msgstr ""

#: of xonsh.ast.max_col:2
msgid "Returns the maximum col_offset of the node and all sub-nodes."
msgstr ""

#: of xonsh.ast.max_line:2
msgid "Computes the maximum lineno."
msgstr ""

#: of xonsh.ast.min_col:2
msgid "Computes the minimum col_offset."
msgstr ""

#: of xonsh.ast.min_line:2
msgid "Computes the minimum lineno."
msgstr ""

#: of xonsh.ast.node_len:2
msgid "The length of a node as a string"
msgstr ""

#: of xonsh.ast.pdump:2
msgid "performs a pretty dump of an AST node."
msgstr ""

#: of xonsh.ast.pprint_ast:2
msgid "Performs a pretty print of the AST nodes."
msgstr ""

#: of xonsh.ast.xonsh_call:2
msgid ""
"Creates the AST node for calling a function of a given name. Functions "
"names may contain attribute access, e.g. __xonsh__.env."
msgstr ""

#: ../../api/base_shell.rst:5
msgid "Base Shell Class (``xonsh.base_shell``)"
msgstr ""

#: of xonsh.base_shell:1
msgid "The base class for xonsh shell"
msgstr ""

#: of xonsh.base_shell.BaseShell:2
msgid "The xonsh shell."
msgstr ""

#: of xonsh.base_shell.BaseShell.color_style:2
#: xonsh.dumb_shell.DumbShell.color_style:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.color_style:2
#: xonsh.readline_shell.ReadlineShell.color_style:2 xonsh.tools.color_style:2
msgid "Returns the current color map."
msgstr ""

#: of xonsh.base_shell.BaseShell.color_style_names:2
#: xonsh.dumb_shell.DumbShell.color_style_names:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.color_style_names:2
#: xonsh.readline_shell.ReadlineShell.color_style_names:2
#: xonsh.tools.color_style_names:2
msgid "Returns an iterable of all available style names."
msgstr ""

#: of xonsh.base_shell.BaseShell.compile:2 xonsh.dumb_shell.DumbShell.compile:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.compile:2
#: xonsh.readline_shell.ReadlineShell.compile:2
msgid ""
"Compiles source code and returns the (possibly modified) source and a "
"valid code object."
msgstr ""

#: of xonsh.base_shell.BaseShell.default:2 xonsh.dumb_shell.DumbShell.default:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.default:2
#: xonsh.readline_shell.ReadlineShell.default:2
msgid "Implements code execution."
msgstr ""

#: of xonsh.base_shell.BaseShell.emptyline:2
#: xonsh.dumb_shell.DumbShell.emptyline:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.emptyline:2
#: xonsh.readline_shell.ReadlineShell.emptyline:2
msgid "Called when an empty line has been entered."
msgstr ""

#: of xonsh.base_shell.BaseShell.format_color:2
msgid ""
"Formats the colors in a string. ``BaseShell``'s default implementation of"
" this method uses colors based on ANSI color codes."
msgstr ""

#: of xonsh.base_shell.BaseShell.precmd:2 xonsh.dumb_shell.DumbShell.precmd:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.precmd:2
#: xonsh.readline_shell.ReadlineShell.precmd:2
msgid "Called just before execution of line."
msgstr ""

#: of xonsh.base_shell.BaseShell.print_color:2
#: xonsh.dumb_shell.DumbShell.print_color:2
#: xonsh.readline_shell.ReadlineShell.print_color:2
msgid ""
"Prints a string in color. This base implementation's colors are based on "
"ANSI color codes if a string was given as input. If a list of token pairs"
" is given, it will color based on pygments, if available. If pygments is "
"not available, it will print a colorless string."
msgstr ""

#: of xonsh.base_shell.BaseShell.push:2 xonsh.dumb_shell.DumbShell.push:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.push:2
#: xonsh.readline_shell.ReadlineShell.push:2
msgid ""
"Pushes a line onto the buffer and compiles the code in a way that enables"
" multiline input."
msgstr ""

#: of xonsh.base_shell.BaseShell.reset_buffer:2
#: xonsh.dumb_shell.DumbShell.reset_buffer:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.reset_buffer:2
#: xonsh.readline_shell.ReadlineShell.reset_buffer:2
msgid "Resets the line buffer."
msgstr ""

#: of xonsh.base_shell.BaseShell.restore_tty_sanity:2
#: xonsh.dumb_shell.DumbShell.restore_tty_sanity:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.restore_tty_sanity:2
#: xonsh.readline_shell.ReadlineShell.restore_tty_sanity:2
msgid ""
"An interface for resetting the TTY stdin mode. This is highly dependent "
"on the shell backend. Also it is mostly optional since it only affects ^Z"
" backgrounding behaviour."
msgstr ""

#: of xonsh.base_shell.BaseShell.settitle:2
#: xonsh.dumb_shell.DumbShell.settitle:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.settitle:2
#: xonsh.readline_shell.ReadlineShell.settitle:2
msgid "Sets terminal title."
msgstr ""

#: of xonsh.base_shell.BaseShell.singleline:2
msgid "Reads a single line of input from the shell."
msgstr ""

#: of xonsh.base_shell.BaseShell.prompt:2 xonsh.dumb_shell.DumbShell.prompt:2
#: xonsh.ptk2.shell.PromptToolkit2Shell.prompt:2
#: xonsh.readline_shell.ReadlineShell.prompt:2
msgid "Obtains the current prompt string."
msgstr ""

#: of xonsh.base_shell.Tee:2
msgid "Class that merges tee'd stdout and stderr into a single stream."
msgstr ""

#: of xonsh.base_shell.Tee:4
msgid ""
"This represents what a user would actually see on the command line. This "
"class has the same interface as io.TextIOWrapper, except that the buffer "
"is optional."
msgstr ""

#: of xonsh.base_shell.Tee.close:2
msgid "Closes the buffer as well as the stdout and stderr tees."
msgstr ""

#: of xonsh.base_shell.Tee.getvalue:2
msgid "Gets the current contents of the in-memory buffer."
msgstr ""

#: ../../api/built_ins.rst:5
msgid "Built-Ins (``xonsh.built_ins``)"
msgstr ""

#: of xonsh.built_ins:1
msgid "The xonsh built-ins."
msgstr ""

#: of xonsh.built_ins:3
msgid ""
"Note that this module is named 'built_ins' so as not to be confused with "
"the special Python builtins module."
msgstr ""

#: of xonsh.built_ins.DeprecationWarningProxy:2
msgid "Proxies access, but warns in the process."
msgstr ""

#: of xonsh.built_ins.DeprecationWarningProxy.warn:2
msgid "Issues deprecation warning."
msgstr ""

#: of xonsh.built_ins.DeprecationWarningProxy.obj:2
#: xonsh.built_ins.DynamicAccessProxy.obj:2
msgid "Dynamically grabs object"
msgstr ""

#: of xonsh.built_ins.DynamicAccessProxy:2
msgid "Proxies access dynamically."
msgstr ""

#: of xonsh.built_ins.DynamicAccessProxy:29
msgid "**refname**"
msgstr ""

#: of xonsh.built_ins.DynamicAccessProxy:28
msgid ""
"'.'-separated string that represents the new, reference name that the "
"user will access."
msgstr ""

#: of xonsh.built_ins.DynamicAccessProxy:46
msgid "**objname**"
msgstr ""

#: of xonsh.built_ins.DynamicAccessProxy:32
msgid ""
"'.'-separated string that represents the name where the target object "
"actually lives that refname points to."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:2
msgid "A container for specifying how a subprocess command should be executed."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:29 xonsh.history.json.JsonHistory.append:11
msgid "**cmd**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:28 xonsh.built_ins.SubprocSpec:68
#: xonsh.completer.Completer.complete:24 xonsh.proc.CommandPipeline:61
#: xonsh.proc.HiddenCommandPipeline:41
msgid "list of str"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:29
msgid "Command to be run."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:32
msgid "**cls**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:31 xonsh.proc.CommandPipeline:46
#: xonsh.proc.HiddenCommandPipeline:26
msgid "Popen-like"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:32
msgid "Class to run the subprocess with."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:35 xonsh.proc.ProcProxyThread:38
msgid "**stdin**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:34 xonsh.built_ins.SubprocSpec:37
#: xonsh.built_ins.SubprocSpec:40 xonsh.built_ins.SubprocSpec:93
#: xonsh.built_ins.SubprocSpec:96 xonsh.proc.parse_proxy_return:10
#: xonsh.proc.parse_proxy_return:13
msgid "file-like"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:35
msgid "Popen file descriptor or flag for stdin."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:38 xonsh.proc.ProcProxyThread:43
#: xonsh.proc.parse_proxy_return:11 xonsh.proc.parse_proxy_return:14
msgid "**stdout**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:38
msgid "Popen file descriptor or flag for stdout."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:41 xonsh.proc.ProcProxyThread:48
msgid "**stderr**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:41
msgid "Popen file descriptor or flag for stderr."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:44 xonsh.proc.ProcProxyThread:51
msgid "**universal_newlines**"
msgstr ""

#: ../../docstring of xonsh.built_ins.SubprocSpec:43
#: xonsh.built_ins.SubprocSpec:47 xonsh.built_ins.SubprocSpec:77
#: xonsh.built_ins.SubprocSpec:80 xonsh.built_ins.SubprocSpec:84
#: xonsh.built_ins.SubprocSpec:90 xonsh.lib.os.rmtree:25
#: xonsh.openpy.read_py_file:12 xonsh.openpy.read_py_url:16
#: xonsh.proc.CommandPipeline:49 xonsh.proc.HiddenCommandPipeline:29
#: xonsh.tools.EnvPath.add:14 xonsh.tools.EnvPath.add:19
#: xontrib.mplhooks.figure_to_tight_array:17 xontrib.voxapi.Vox.create:14
#: xontrib.voxapi.Vox.create:18 xontrib.voxapi.Vox.create:34
#: xontrib.voxapi.Vox.upgrade:16 xontrib.voxapi.Vox.upgrade:32
msgid "bool"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:44 xonsh.proc.ProcProxyThread:51
msgid "Whether or not to use universal newlines."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:48 xonsh.proc.ProcProxyThread:55
msgid "**close_fds**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:47
msgid "Whether or not to close the file descriptiors when the process exits."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:64
msgid "**captured**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:63
msgid "bool or str, optional"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:51
msgid ""
"The flag for if the subprocess is captured, may be one of: False for $[],"
" 'stdout' for $(), 'hiddenobject' for ![], or 'object' for !()."
msgstr ""

#: of xonsh.built_ins.SubprocSpec xonsh.contexts.Block xonsh.contexts.Functor
#: xonsh.history.base.History xonsh.history.base.HistoryEntry xonsh.lexer.Lexer
#: xonsh.proc.CommandPipeline xonsh.proc.FileThreadDispatcher
#: xonsh.proc.HiddenCommandPipeline
msgid "Attributes"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:69 xonsh.contexts.Functor:29
#: xonsh.proc.ProcProxyThread:32 xonsh.proc.pause_call_resume:15
msgid "**args**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:69
msgid "Arguments as originally supplied."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:72
msgid "**alias**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:71
msgid "list of str, callable, or None"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:72
msgid "The alias that was resolved for this command, if any."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:75
msgid "**binary_loc**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:74 xonsh.inspectors.call_tip:36
#: xonsh.pyghooks.color_by_name:23 xonsh.pyghooks.color_by_name:38
msgid "str or None"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:75
msgid "Path to binary to execute."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:78
msgid "**is_proxy**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:78
msgid "Whether or not the subprocess is or should be run as a proxy."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:81
msgid "**background**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:81
msgid "Whether or not the subprocess should be started in the background."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:85
msgid "**threadable**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:84
msgid ""
"Whether or not the subprocess is able to be run in a background thread, "
"rather than the main thread."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:88
msgid "**pipeline_index**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:87
msgid "int or None"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:88
msgid "The index number of this sepc into the pipeline that is being setup."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:91
msgid "**last_in_pipeline**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:91
msgid "Whether the subprocess is the last in the execution pipeline."
msgstr ""

#: of xonsh.built_ins.SubprocSpec:94
msgid "**captured_stdout**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:94
msgid "Handle to captured stdin"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:97
msgid "**captured_stderr**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:97
msgid "Handle to captured stderr"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:102
msgid "**stack**"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:101
msgid "list of FrameInfo namedtuples or None"
msgstr ""

#: of xonsh.built_ins.SubprocSpec:100
msgid ""
"The stack of the call-site of alias, if the alias requires it. None "
"otherwise."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.build:2
msgid ""
"Creates an instance of the subprocess command, with any modifications and"
" adjustments based on the actual cmd that was received."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.prep_env:2
msgid "Prepares the environment to use in the subprocess."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.prep_preexec_fn:2
msgid "Prepares the 'preexec_fn' keyword argument"
msgstr ""

#: of xonsh.built_ins.SubprocSpec.redirect_leading:2
msgid "Manage leading redirects such as with '< input.txt COMMAND'."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.redirect_trailing:2
msgid "Manages trailing redirects."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_alias:2
msgid "Sets alias in command, if applicable."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_alias_cls:2
msgid "Determine which proxy class to run an alias with."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_auto_cd:2
msgid "Implements AUTO_CD functionality."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_binary_loc:2
msgid "Sets the binary location"
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_executable_commands:2
msgid "Resolve command executables, if applicable."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.resolve_stack:2
msgid "Computes the stack for a callable alias's call-site, if needed."
msgstr ""

#: of xonsh.built_ins.SubprocSpec.run:2
msgid "Launches the subprocess and returns the object."
msgstr ""

#: of xonsh.built_ins.XonshSession:2
msgid "All components defining a xonsh session."
msgstr ""

#: of xonsh.built_ins.XonshSession:28 xonsh.built_ins.XonshSession.load:8
#: xonsh.shell.Shell:30
msgid "**execer**"
msgstr ""

#: of xonsh.built_ins.XonshSession:27 xonsh.built_ins.XonshSession.load:7
msgid "Execer, optional"
msgstr ""

#: of xonsh.built_ins.XonshSession:28 xonsh.built_ins.XonshSession.load:8
msgid "Xonsh execution object, may be None to start"
msgstr ""

#: of xonsh.built_ins.XonshSession:43 xonsh.built_ins.XonshSession.load:23
#: xonsh.proc.ProcProxyThread:70 xonsh.shell.Shell:35
msgid "Mapping, optional"
msgstr ""

#: of xonsh.built_ins.XonshSession:31 xonsh.built_ins.XonshSession.load:11
msgid "Context to start xonsh session with."
msgstr ""

#: of xonsh.built_ins.XonshSession.load:2
msgid "Loads the session with default values."
msgstr ""

#: of xonsh.built_ins.call_macro:2
msgid "Calls a function as a macro, returning its result."
msgstr ""

#: of xonsh.built_ins.call_macro:7 xonsh.built_ins.in_macro_call:8
msgid "callable object"
msgstr ""

#: of xonsh.built_ins.call_macro:8 xonsh.built_ins.in_macro_call:9
msgid "The function that is called as ``f(*args)``."
msgstr ""

#: of xonsh.built_ins.call_macro:13
msgid "**raw_args**"
msgstr ""

#: of xonsh.built_ins.call_macro:12
msgid "tuple of str"
msgstr ""

#: of xonsh.built_ins.call_macro:11
msgid ""
"The str representation of arguments of that were passed into the macro. "
"These strings will be parsed, compiled, evaled, or left as a string "
"depending on the annotations of f."
msgstr ""

#: of xonsh.built_ins.call_macro:16 xonsh.built_ins.convert_macro_arg:14
#: xonsh.built_ins.enter_macro:18 xonsh.built_ins.in_macro_call:12
#: xonsh.contexts.Block:45
msgid "**glbs**"
msgstr ""

#: of xonsh.built_ins.call_macro:15 xonsh.built_ins.convert_macro_arg:13
#: xonsh.built_ins.enter_macro:17 xonsh.built_ins.in_macro_call:11
#: xonsh.lazyasd.LazyBool:18 xonsh.lazyasd.LazyDict:24
#: xonsh.lazyasd.LazyObject:18 xonsh.pyghooks.code_by_name:10
msgid "Mapping"
msgstr ""

#: of xonsh.built_ins.call_macro:16 xonsh.built_ins.convert_macro_arg:14
#: xonsh.built_ins.in_macro_call:12
msgid "The globals from the call site."
msgstr ""

#: of xonsh.built_ins.call_macro:32 xonsh.built_ins.convert_macro_arg:17
#: xonsh.built_ins.enter_macro:21 xonsh.built_ins.in_macro_call:28
#: xonsh.contexts.Block:49
msgid "**locs**"
msgstr ""

#: of xonsh.built_ins.call_macro:31 xonsh.built_ins.convert_macro_arg:16
#: xonsh.built_ins.enter_macro:20 xonsh.built_ins.in_macro_call:27
#: xonsh.contexts.Block:44 xonsh.contexts.Block:48
msgid "Mapping or None"
msgstr ""

#: of xonsh.built_ins.call_macro:19 xonsh.built_ins.convert_macro_arg:17
#: xonsh.built_ins.in_macro_call:15
msgid "The locals from the call site."
msgstr ""

#: of xonsh.built_ins.cmds_to_specs:2
msgid ""
"Converts a list of cmds to a list of SubprocSpec objects that are ready "
"to be executed."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:2
msgid "Converts a string macro argument based on the requested kind."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:8
msgid "**raw_arg**"
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:8
msgid "The str representation of the macro argument."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:11
msgid "**kind**"
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:10 xonsh.inspectors.Inspector.pinfo:7
msgid "object"
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:11
msgid "A flag or type representing how to convert the argument."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:20
#: xonsh.commands_cache.CommandsCache.lazy_locate_binary:8
#: xonsh.commands_cache.CommandsCache.locate_binary:8
#: xonsh.events.EventManager.doc:8 xonsh.events.EventManager.transmogrify:9
#: xonsh.jupyter_shell.StdJupyterRedirect:28 xonsh.lazyasd.LazyBool:36
#: xonsh.lazyasd.LazyDict:42 xonsh.lazyasd.LazyObject:36
#: xonsh.lazyasd.load_module_in_background:8 xonsh.pyghooks.code_by_name:8
#: xonsh.pyghooks.color_by_name:10 xontrib.voxapi.Vox.activate:21
#: xontrib.voxapi.Vox.create:8 xontrib.voxapi.Vox.upgrade:10
msgid "**name**"
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:20
msgid "The macro argument name."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:23
msgid "**macroname**"
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:23
msgid "The name of the macro itself."
msgstr ""

#: of xonsh.built_ins.convert_macro_arg:40
msgid "The converted argument."
msgstr ""

#: of xonsh.built_ins.default_signal_pauser:2
msgid "Pauses a signal, as needed."
msgstr ""

#: of xonsh.built_ins.ensure_list_of_strs:2
msgid "Ensures that x is a list of strings."
msgstr ""

#: of xonsh.built_ins.enter_macro:2
msgid ""
"Prepares to enter a context manager macro by attaching the contents of "
"the macro block, globals, and locals to the object. These modifications "
"are made in-place and the original object is returned."
msgstr ""

#: of xonsh.built_ins.enter_macro:10 xonsh.built_ins.enter_macro:38
#: xonsh.inspectors.Inspector.pinfo:8 xonsh.inspectors.find_file:11
#: xonsh.inspectors.find_source_lines:11
msgid "**obj**"
msgstr ""

#: of xonsh.built_ins.enter_macro:9 xonsh.built_ins.enter_macro:37
msgid "context manager"
msgstr ""

#: of xonsh.built_ins.enter_macro:10
msgid "The object that is about to be entered via a with-statement."
msgstr ""

#: of xonsh.built_ins.enter_macro:15
msgid "**raw_block**"
msgstr ""

#: of xonsh.built_ins.enter_macro:13
msgid ""
"The str of the block that is the context body. This string will be "
"parsed, compiled, evaled, or left as a string depending on the return "
"annotation of obj.__enter__."
msgstr ""

#: of xonsh.built_ins.enter_macro:18
msgid "The globals from the context site."
msgstr ""

#: of xonsh.built_ins.enter_macro:21
msgid "The locals from the context site."
msgstr ""

#: of xonsh.built_ins.enter_macro:26
msgid "The same context manager but with the new macro information applied."
msgstr ""

#: of xonsh.built_ins.get_script_subproc_command:2
msgid ""
"Given the name of a script outside the path, returns a list representing "
"an appropriate subprocess command to execute the script.  Raises "
"PermissionError if the script is not executable."
msgstr ""

#: of xonsh.built_ins.helper:2 xonsh.built_ins.superhelper:2
msgid "Prints help about, and then returns that variable."
msgstr ""

#: of xonsh.built_ins.in_macro_call:2
msgid ""
"Attaches macro globals and locals temporarily to function as a context "
"manager."
msgstr ""

#: of xonsh.built_ins.list_of_list_of_strs_outer_product:2
msgid "Takes an outer product of a list of strings"
msgstr ""

#: of xonsh.built_ins.list_of_strs_or_callables:2
msgid "Ensures that x is a list of strings or functions"
msgstr ""

#: of xonsh.built_ins.load_builtins:2
msgid ""
"Loads the xonsh builtins into the Python builtins. Sets the "
"BUILTINS_LOADED variable to True."
msgstr ""

#: of xonsh.built_ins.load_proxies:2
msgid ""
"Loads builtin dynamic access proxies. Also puts temporary shims in place "
"for `__xonsh_*__` builtins."
msgstr ""

#: of xonsh.built_ins.no_pg_xonsh_preexec_fn:2
msgid ""
"Default subprocess preexec function for when there is no existing "
"pipeline group."
msgstr ""

#: of xonsh.built_ins.pathsearch:2
msgid ""
"Takes a string and returns a list of file paths that match (regex, glob, "
"or arbitrary search function). If pathobj=True, the return is a list of "
"pathlib.Path objects instead of strings."
msgstr ""

#: of xonsh.built_ins.reglob:2
msgid "Regular expression-based globbing."
msgstr ""

#: of xonsh.built_ins.resetting_signal_handle:2
msgid ""
"Sets a new signal handle that will automatically restore the old value "
"once the new handle is finished."
msgstr ""

#: of xonsh.built_ins.run_subproc:2
msgid ""
"Runs a subprocess, in its many forms. This takes a list of 'commands,' "
"which may be a list of command line arguments or a string, representing a"
" special connecting character.  For example::"
msgstr ""

#: of xonsh.built_ins.run_subproc:8
msgid "is represented by the following cmds::"
msgstr ""

#: of xonsh.built_ins.run_subproc:12
msgid "Lastly, the captured argument affects only the last real command."
msgstr ""

#: of xonsh.built_ins.safe_close:2
msgid "Safely attempts to close an object."
msgstr ""

#: of xonsh.built_ins.safe_open:2
msgid "Safely attempts to open a file in for xonsh subprocs."
msgstr ""

#: of xonsh.built_ins.subproc_captured_hiddenobject:2
msgid ""
"Runs a subprocess, capturing the output. Returns an instance of "
"HiddenCommandPipeline representing the completed command."
msgstr ""

#: of xonsh.built_ins.subproc_captured_inject:2
msgid ""
"Runs a subprocess, capturing the output. Returns a list of whitespace-"
"separated strings of the stdout that was produced. The string is split "
"using xonsh's lexer, rather than Python's str.split() or shlex.split()."
msgstr ""

#: of xonsh.built_ins.subproc_captured_object:2
msgid ""
"Runs a subprocess, capturing the output. Returns an instance of "
"CommandPipeline representing the completed command."
msgstr ""

#: of xonsh.built_ins.subproc_captured_stdout:2
msgid ""
"Runs a subprocess, capturing the output. Returns the stdout that was "
"produced as a str."
msgstr ""

#: of xonsh.built_ins.subproc_uncaptured:2
msgid ""
"Runs a subprocess, without capturing the output. Returns the stdout that "
"was produced as a str."
msgstr ""

#: of xonsh.built_ins.unload_builtins:2
msgid ""
"Removes the xonsh builtins from the Python builtins, if the "
"BUILTINS_LOADED is True, sets BUILTINS_LOADED to False, and returns."
msgstr ""

#: of xonsh.built_ins.unload_proxies:2
msgid "Removes the xonsh builtins (proxies) from the Python builtins."
msgstr ""

#: of xonsh.built_ins.xonsh_builtins:2
msgid ""
"A context manager for using the xonsh builtins only in a limited scope. "
"Likely useful in testing."
msgstr ""

#: ../../api/codecache.rst:5
msgid "Compiling and Caching of Xonsh Code (``xonsh.codecache``)"
msgstr ""

#: of xonsh.codecache:1
msgid "Tools for caching xonsh code."
msgstr ""

#: of xonsh.codecache.code_cache_check:2
msgid "Check whether the code cache for a particular piece of code is valid."
msgstr ""

#: of xonsh.codecache.code_cache_check:4 xonsh.codecache.script_cache_check:4
msgid ""
"Returns a tuple containing: a boolean representing whether the cached "
"code should be used, and the cached code (or ``None`` if the cache should"
" not be used)."
msgstr ""

#: of xonsh.codecache.code_cache_name:2
msgid "Return an appropriate spoofed filename for the given code."
msgstr ""

#: of xonsh.codecache.compile_code:2
msgid "Wrapper for ``execer.compile`` to compile the given code"
msgstr ""

#: of xonsh.codecache.get_cache_filename:2
msgid "Return the filename of the cache for the given filename."
msgstr ""

#: of xonsh.codecache.get_cache_filename:4
msgid ""
"Cache filenames are similar to those used by the Mercurial DVCS for its "
"internal store."
msgstr ""

#: of xonsh.codecache.get_cache_filename:7
msgid ""
"The ``code`` switch should be true if we should use the code store rather"
" than the script store."
msgstr ""

#: of xonsh.codecache.run_code_with_cache:2
msgid ""
"Run a piece of code, using a cached version if it exists, and updating "
"the cache as necessary."
msgstr ""

#: of xonsh.codecache.run_compiled_code:2
msgid "Helper to run code in a given mode and context"
msgstr ""

#: of xonsh.codecache.run_script_with_cache:2
msgid ""
"Run a script, using a cached version if it exists (and the source has not"
" changed), and updating the cache as necessary."
msgstr ""

#: of xonsh.codecache.script_cache_check:2
msgid "Check whether the script cache for a particular file is valid."
msgstr ""

#: of xonsh.codecache.should_use_cache:2
msgid ""
"Return ``True`` if caching has been enabled for this mode (through "
"command line flags or environment variables)"
msgstr ""

#: of xonsh.codecache.update_cache:2
msgid ""
"Update the cache at ``cache_file_name`` to contain the compiled code "
"represented by ``ccode``."
msgstr ""

#: ../../api/color_tools.rst:5
msgid "Color Tools (``xonsh.color_tools``)"
msgstr ""

#: of xonsh.color_tools:1
msgid "Tools for color handling in xonsh."
msgstr ""

#: of xonsh.color_tools:3
msgid ""
"This includes Convert values between RGB hex codes and xterm-256 color "
"codes. Parts of this file were originally forked from Micah Elliott "
"http://MicahElliott.com Copyright (C) 2011 Micah Elliott. All rights "
"reserved. WTFPL http://sam.zoy.org/wtfpl/"
msgstr ""

#: of xonsh.color_tools.iscolor:2
msgid "Tests if a string is a valid color"
msgstr ""

#: of xonsh.color_tools.make_palette:2
msgid "Makes a color palette from a collection of strings."
msgstr ""

#: of xonsh.color_tools.rgb2short:2 xonsh.color_tools.rgb_to_256:2
msgid "Find the closest ANSI 256 approximation to the given RGB value."
msgstr ""

#: of xonsh.color_tools.rgb2short:14 xonsh.color_tools.rgb_to_256:14
msgid "**rgb**"
msgstr ""

#: of xonsh.color_tools.rgb2short:13 xonsh.color_tools.rgb_to_256:13
msgid "Hex code representing an RGB value, eg, 'abcdef'"
msgstr ""

#: of xonsh.color_tools.rgb2short:19 xonsh.color_tools.rgb_to_256:19
msgid "Tuple of String between 0 and 255 (compatible with xterm) and"
msgstr ""

#: of xonsh.color_tools.rgb2short:34 xonsh.color_tools.rgb_to_256:34
msgid "hex code (length-6)."
msgstr ""

#: of xonsh.color_tools.short_to_ints:2
msgid "Coverts a short (256) color to a 3-tuple of ints."
msgstr ""

#: ../../api/commands_cache.rst:5
msgid "Commands Cache (``xonsh.commands_cache``)"
msgstr ""

#: of xonsh.commands_cache:1
msgid ""
"Module for caching command & alias names as well as for predicting "
"whether a command will be able to be run in the background."
msgstr ""

#: of xonsh.commands_cache:4
msgid ""
"A background predictor is a function that accepts a single argument list "
"and returns whether or not the process can be run in the background "
"(returns True) or must be run the foreground (returns False)."
msgstr ""

#: of xonsh.commands_cache.CommandsCache:2
msgid ""
"A lazy cache representing the commands available on the file system. The "
"keys are the command names and the values a tuple of (loc, has_alias) "
"where loc is either a str pointing to the executable on the file system "
"or None (if no executable exists) and has_alias is a boolean flag for "
"whether the command has an alias."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.cached_name:2
msgid "Returns the name that would appear in the cache, if it exists."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.default_predictor_readbin:2
msgid ""
"Make a default predictor by analyzing the content of the binary. Should "
"only works on POSIX. Return failure if the analysis fails."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.get_possible_names:2
msgid ""
"Generates the possible `PATHEXT` extension variants of a given executable"
" name on Windows as a list, conserving the ordering in `PATHEXT`. Returns"
" a list as `name` being the only item in it on other platforms."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.is_empty:2
msgid "Returns whether the cache is populated or not."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.is_only_functional_alias:2
msgid ""
"Returns whether or not a command is only a functional alias, and has no "
"underlying executable. For example, the \"cd\" command is only available "
"as a functional alias."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_is_only_functional_alias:2
msgid ""
"Returns whether or not a command is only a functional alias, and has no "
"underlying executable. For example, the \"cd\" command is only available "
"as a functional alias. This search is performed lazily."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_locate_binary:2
msgid "Locates an executable in the cache, without checking its validity."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_locate_binary:8
#: xonsh.commands_cache.CommandsCache.locate_binary:8
msgid "name of binary to search for"
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_locate_binary:25
#: xonsh.commands_cache.CommandsCache.locate_binary:25
msgid "**ignore_alias**"
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_locate_binary:24
#: xonsh.commands_cache.CommandsCache.locate_binary:24
#: xonsh.diff_history.HistoryDiffer:35 xonsh.diff_history.HistoryDiffer:51
#: xonsh.environ.VarDocs:10 xonsh.environ.VarDocs:34 xonsh.execer.Execer:36
#: xonsh.execer.Execer:43 xonsh.execer.Execer:60
#: xonsh.foreign_shells.foreign_shell_data:11
#: xonsh.foreign_shells.foreign_shell_data:14
#: xonsh.foreign_shells.foreign_shell_data:29
#: xonsh.foreign_shells.foreign_shell_data:55
#: xonsh.foreign_shells.foreign_shell_data:76
#: xonsh.foreign_shells.foreign_shell_data:79 xonsh.history.json.JsonHistory:57
#: xonsh.history.json.JsonHistory.flush:8 xonsh.inspectors.call_tip:11
#: xonsh.lazyjson.LazyJSON:44 xonsh.proc.ProcProxyThread:50
#: xonsh.proc.ProcProxyThread:54 xonsh.replay.Replayer:44
#: xonsh.wizard.FileInserter:58 xonsh.wizard.FileInserter:75
#: xonsh.wizard.Input:36 xonsh.wizard.Input:40 xonsh.wizard.Input:44
#: xonsh.wizard.LoadJSON:33 xonsh.wizard.LoadJSON:50 xonsh.wizard.SaveJSON:33
#: xonsh.wizard.SaveJSON:50 xonsh.wizard.StateFile:33 xonsh.wizard.StateFile:50
#: xonsh.xonfig.make_xonfig_wizard:10
msgid "bool, optional"
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazy_locate_binary:11
#: xonsh.commands_cache.CommandsCache.locate_binary:11
msgid ""
"Force return of binary path even if alias of ``name`` exists (default "
"``False``)"
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazyget:2
msgid "A lazy value getter."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazyin:2
msgid ""
"Checks if the value is in the current cache without the potential to "
"update the cache. It just says whether the value is known *now*. This may"
" not reflect precisely what is on the $PATH."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazyiter:2
msgid ""
"Returns an iterator over the current cache contents without the potential"
" to update the cache. This may not reflect what is on the $PATH."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.lazylen:2
msgid ""
"Returns the length of the current cache contents without the potential to"
" update the cache. This may not reflect precisely what is on the $PATH."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.locate_binary:2
msgid "Locates an executable on the file system using the cache."
msgstr ""

#: of xonsh.commands_cache.CommandsCache.predict_threadable:2
msgid ""
"Predicts whether a command list is able to be run on a background thread,"
" rather than the main thread."
msgstr ""

#: of xonsh.commands_cache.default_threadable_predictors:2
msgid ""
"Generates a new defaultdict for known threadable predictors. The default "
"is to predict true."
msgstr ""

#: of xonsh.commands_cache.predict_false:2
msgid "Never say the process is threadable."
msgstr ""

#: of xonsh.commands_cache.predict_help_ver:2
msgid ""
"Predict the backgroundability of commands that have help & version "
"switches: -h, --help, -v, -V, --version. If either of these options is "
"present, the command is assumed to print to stdout normally and is "
"therefore threadable. Otherwise, the command is assumed to not be "
"threadable. This is useful for commands, like top, that normally enter "
"alternate mode but may not in certain circumstances."
msgstr ""

#: of xonsh.commands_cache.predict_hg:2
msgid ""
"Predict if mercurial is about to be run in interactive mode. If it is "
"interactive, predict False. If it isn't, predict True. Also predict False"
" for certain commands, such as split."
msgstr ""

#: of xonsh.commands_cache.predict_shell:2
msgid ""
"Predict the backgroundability of the normal shell interface, which comes "
"down to whether it is being run in subproc mode."
msgstr ""

#: of xonsh.commands_cache.predict_true:2
msgid "Always say the process is threadable."
msgstr ""

#: ../../api/completer.rst:5
msgid "Tab Completer (``xonsh.completer``)"
msgstr ""

#: of xonsh.completer:1
msgid "A (tab-)completer for xonsh."
msgstr ""

#: of xonsh.completer.Completer:2
msgid "This provides a list of optional completions for the xonsh shell."
msgstr ""

#: of xonsh.completer.Completer.complete:2
msgid "Complete the string, given a possible execution context."
msgstr ""

#: of xonsh.completer.Completer.complete:8 xonsh.wizard.FileInserter:30
msgid "**prefix**"
msgstr ""

#: of xonsh.completer.Completer.complete:8
msgid "The string to match"
msgstr ""

#: of xonsh.completer.Completer.complete:11
msgid "**line**"
msgstr ""

#: of xonsh.completer.Completer.complete:11
msgid "The line that prefix appears on."
msgstr ""

#: of xonsh.completer.Completer.complete:14
msgid "**begidx**"
msgstr ""

#: of xonsh.completer.Completer.complete:13
#: xonsh.completer.Completer.complete:16 xonsh.completer.Completer.complete:39
#: xonsh.inspectors.find_source_lines:27 xonsh.lexer.Lexer:46
#: xonsh.proc.BufferedFDParallelReader:27 xonsh.proc.ConsoleParallelReader:29
#: xonsh.proc.NonBlockingFDReader:29 xonsh.proc.QueueReader:27
#: xonsh.proc.parse_proxy_return:30 xontrib.mplhooks.figure_to_tight_array:10
#: xontrib.mplhooks.figure_to_tight_array:13
msgid "int"
msgstr ""

#: of xonsh.completer.Completer.complete:14
msgid "The index in line that prefix starts on."
msgstr ""

#: of xonsh.completer.Completer.complete:17
msgid "**endidx**"
msgstr ""

#: of xonsh.completer.Completer.complete:17
msgid "The index in line that prefix ends on."
msgstr ""

#: of xonsh.completer.Completer.complete:19
msgid "Iterable of str (ie dict, set, etc), optional"
msgstr ""

#: of xonsh.completer.Completer.complete:20
msgid "Names in the current execution context."
msgstr ""

#: of xonsh.completer.Completer.complete:25 xonsh.contexts.Functor:46
msgid "**rtn**"
msgstr ""

#: of xonsh.completer.Completer.complete:25
msgid "Possible completions of prefix, sorted alphabetically."
msgstr ""

#: of xonsh.completer.Completer.complete:40
msgid "**lprefix**"
msgstr ""

#: of xonsh.completer.Completer.complete:28
msgid "Length of the prefix to be replaced in the completion."
msgstr ""

#: ../../api/completers/base.rst:5
msgid "Base Completer (``xonsh.completers.base``)"
msgstr ""

#: of xonsh.completers.base:1
msgid "Base completer for xonsh."
msgstr ""

#: of xonsh.completers.base.complete_base:2
msgid ""
"If the line is empty, complete based on valid commands, python names, and"
" paths.  If we are completing the first argument, complete based on valid"
" commands and python names."
msgstr ""

#: ../../api/completers/bash.rst:5
msgid "Bash Completers (``xonsh.completers.bash``)"
msgstr ""

#: of xonsh.completers.bash:1
msgid "Xonsh hooks into bash completions."
msgstr ""

#: of xonsh.completers.bash.complete_from_bash:2
msgid "Completes based on results from BASH completion."
msgstr ""

#: ../../api/completers/commands.rst:5
msgid "First Command Completer (``xonsh.completers.commands``)"
msgstr ""

#: of xonsh.completers.commands.complete_command:2
msgid "Returns a list of valid commands starting with the first argument"
msgstr ""

#: of xonsh.completers.commands.complete_skipper:2
msgid ""
"Skip over several tokens (e.g., sudo) and complete based on the rest of "
"the line."
msgstr ""

#: ../../api/completers/dirs.rst:5
msgid "Directory Completers (``xonsh.completers.dirs``)"
msgstr ""

#: of xonsh.completers.dirs.complete_cd:2
msgid "Completion for \"cd\", includes only valid directory names."
msgstr ""

#: of xonsh.completers.dirs.complete_rmdir:2
msgid "Completion for \"rmdir\", includes only valid directory names."
msgstr ""

#: ../../api/completers/index.rst:5
msgid "Completers API"
msgstr ""

#: ../../api/completers/index.rst:6
msgid "All of the ways that xonsh completes you."
msgstr ""

#: ../../api/completers/index.rst:8
msgid "**Stock Xonsh Completers:**"
msgstr ""

#: ../../api/completers/man.rst:5
msgid "Manual Page Based Completers (``xonsh.completers.man``)"
msgstr ""

#: of xonsh.completers.man.complete_from_man:2
msgid ""
"Completes an option name, based on the contents of the associated man "
"page."
msgstr ""

#: ../../api/completers/path.rst:5
msgid "File System Path Completer (``xonsh.completers.path``)"
msgstr ""

#: of xonsh.completers.path.cd_in_command:2
msgid "Returns True if \"cd\" is a token in the line, False otherwise."
msgstr ""

#: of xonsh.completers.path.complete_path:2
msgid "Completes based on a path name."
msgstr ""

#: of xonsh.completers.path.subsequence_match:2
msgid "Detects whether typed is a subsequence of ref."
msgstr ""

#: of xonsh.completers.path.subsequence_match:4
msgid ""
"Returns ``True`` if the characters in ``typed`` appear (in order) in "
"``ref``, regardless of exactly where in ``ref`` they occur.  If ``csc`` "
"is ``False``, ignore the case of ``ref`` and ``typed``."
msgstr ""

#: of xonsh.completers.path.subsequence_match:8
msgid ""
"Used in \"subsequence\" path completion (e.g., ``~/u/ro`` expands to "
"``~/lou/carcohl``)"
msgstr ""

#: ../../api/completers/python.rst:5
msgid "Python Completer (``xonsh.completers.python``)"
msgstr ""

#: of xonsh.completers.python:1
msgid "Completers for Python code"
msgstr ""

#: of xonsh.completers.python.attr_complete:2
msgid "Complete attributes of an object."
msgstr ""

#: of xonsh.completers.python.complete_import:2
msgid ""
"Completes module names and contents for \"import ...\" and \"from ... "
"import ...\""
msgstr ""

#: of xonsh.completers.python.complete_python:2
msgid ""
"Completes based on the contents of the current Python environment, the "
"Python built-ins, and xonsh operators. If there are no matches, split on "
"common delimiters and try again."
msgstr ""

#: of xonsh.completers.python.complete_python_mode:2
msgid "Python-mode completions for @( and ${"
msgstr ""

#: of xonsh.completers.python.python_signature_complete:2
msgid ""
"Completes a python function (or other callable) call by completing "
"argument and keyword argument names."
msgstr ""

#: ../../api/completers/tools.rst:5
msgid "Completion Tools (``xonsh.completers.tools``)"
msgstr ""

#: of xonsh.completers.tools:1
msgid "Xonsh completer tools."
msgstr ""

#: of xonsh.completers.tools.get_filter_function:2
msgid ""
"Return an appropriate filtering function for completions, given the valid"
" of $CASE_SENSITIVE_COMPLETIONS"
msgstr ""

#: of xonsh.completers.tools.justify:2
msgid ""
"Re-wrap the string s so that each line is no more than max_length "
"characters long, padding all lines but the first on the left with the "
"string left_pad."
msgstr ""

#: ../../api/completers/xompletions.rst:5
msgid "Completion Xompletions (``xonsh.completers.xompletions``)"
msgstr ""

#: of xonsh.completers.xompletions:1
msgid "Provides completions for xonsh internal utilities"
msgstr ""

#: of xonsh.completers.xompletions.complete_xonfig:2
msgid "Completion for ``xonfig``"
msgstr ""

#: of xonsh.completers.xompletions.complete_xontrib:2
msgid "Completion for ``xontrib``"
msgstr ""

#: ../../api/contexts.rst:5
msgid "Context Managers for Xonsh (``xonsh.contexts``)"
msgstr ""

#: of xonsh.contexts:1
msgid "Context management tools for xonsh."
msgstr ""

#: of xonsh.contexts.Block:2
msgid ""
"This is a context manager for obtaining a block of lines without actually"
" executing the block. The lines are accessible as the 'lines' attribute. "
"This must be used as a macro."
msgstr ""

#: of xonsh.contexts.Block:42 xonsh.proc.CommandPipeline:62
#: xonsh.proc.HiddenCommandPipeline:42
msgid "**lines**"
msgstr ""

#: of xonsh.contexts.Block:41
msgid "list of str or None"
msgstr ""

#: of xonsh.contexts.Block:42
msgid "Block lines as if split by str.splitlines(), if available."
msgstr ""

#: of xonsh.contexts.Block:45
msgid "Global execution context, ie globals()."
msgstr ""

#: of xonsh.contexts.Block:48
msgid "Local execution context, ie locals()."
msgstr ""

#: of xonsh.contexts.Functor:2
msgid ""
"This is a context manager that turns the block into a callable object, "
"bound to the execution context it was created in."
msgstr ""

#: of xonsh.contexts.Functor:28
msgid "Sequence of str, optional"
msgstr ""

#: of xonsh.contexts.Functor:29
msgid "A tuple of argument names for the functor."
msgstr ""

#: of xonsh.contexts.Functor:32 xonsh.proc.pause_call_resume:31
#: xonsh.wizard.PromptVisitor:48
msgid "**kwargs**"
msgstr ""

#: of xonsh.contexts.Functor:31
msgid "Mapping of str to values or list of item tuples, optional"
msgstr ""

#: of xonsh.contexts.Functor:32
msgid "Keyword argument names and values, if available."
msgstr ""

#: of xonsh.contexts.Functor:35
msgid "Name of object to return, if available."
msgstr ""

#: of xonsh.contexts.Functor:53
msgid "**func**"
msgstr ""

#: of xonsh.contexts.Functor:52 xonsh.proc.ProcProxyThread:27
msgid "function"
msgstr ""

#: of xonsh.contexts.Functor:51
msgid ""
"The underlying function object. This defaults to none and is set after "
"the the block is exited."
msgstr ""

#: ../../api/diff_history.rst:5
msgid "History Diff'er (``xonsh.diff_history``)"
msgstr ""

#: of xonsh.diff_history:1
msgid "Tools for diff'ing two xonsh history files in a meaningful fashion."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:2
msgid "This class helps diff two xonsh history files."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:28
msgid "**afile**"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:27 xonsh.diff_history.HistoryDiffer:30
#: xonsh.lazyjson.LazyJSON:28 xonsh.replay.Replayer:27
msgid "file handle or str"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:28
msgid "The first file to diff"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:31
msgid "**bfile**"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:31
msgid "The second file to diff"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:36 xonsh.lazyjson.LazyJSON:45
#: xonsh.replay.Replayer:45
msgid "**reopen**"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:34
msgid ""
"Whether or not to reopen the file handles each time. The default here is "
"opposite from the LazyJSON default because we know that we will be doing "
"a lot of reading so it is best to keep the handles open."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:52
msgid "**verbose**"
msgstr ""

#: of xonsh.diff_history.HistoryDiffer:39
msgid "Whether to print a verbose amount of information."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer.cmdsdiff:2
msgid "Computes the difference of the commands themselves."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer.envdiff:2
msgid "Computes the difference between the environments."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer.format:2
msgid "Formats the difference between the two history files."
msgstr ""

#: of xonsh.diff_history.HistoryDiffer.header:2
msgid "Computes a header string difference."
msgstr ""

#: of xonsh.diff_history.highlighted_ndiff:2
msgid "Returns a highlighted string, with bold characters where different."
msgstr ""

#: ../../api/dirstack.rst:5
msgid "Directory Stack (``xonsh.dirstack``)"
msgstr ""

#: of xonsh.dirstack:1
msgid "Directory stack and associated utilities for the xonsh shell."
msgstr ""

#: of xonsh.dirstack.cd:2
msgid "Changes the directory."
msgstr ""

#: of xonsh.dirstack.cd:4
msgid ""
"If no directory is specified (i.e. if `args` is None) then this changes "
"to the current user's home directory."
msgstr ""

#: of xonsh.dirstack.dirs:2
msgid "xonsh command: dirs"
msgstr ""

#: of xonsh.dirstack.dirs:4
msgid ""
"Displays the list of currently remembered directories.  Can also be used "
"to clear the directory stack."
msgstr ""

#: of xonsh.dirstack.popd:2
msgid "xonsh command: popd"
msgstr ""

#: of xonsh.dirstack.popd:4
msgid "Removes entries from the directory stack."
msgstr ""

#: of xonsh.dirstack.pushd:2
msgid "xonsh command: pushd"
msgstr ""

#: of xonsh.dirstack.pushd:4
msgid ""
"Adds a directory to the top of the directory stack, or rotates the stack,"
" making the new top of the stack the current working directory."
msgstr ""

#: of xonsh.dirstack.pushd:7
msgid ""
"On Windows, if the path is a UNC path (begins with "
"`\\\\<server>\\<share>`) and if the `DisableUNCCheck` registry value is "
"not enabled, creates a temporary mapped drive letter and sets the working"
" directory there, emulating behavior of `PUSHD` in `CMD.EXE`"
msgstr ""

#: of xonsh.dirstack.DIRSTACK:2
msgid "A list containing the currently remembered directories."
msgstr ""

#: ../../api/dumb_shell.rst:5
msgid "Dumb Shell (``xonsh.dumb_shell``)"
msgstr ""

#: of xonsh.dumb_shell:1 xonsh.dumb_shell.DumbShell:2
msgid "A dumb shell for when $TERM == 'dumb', which usually happens in emacs."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.cmdloop:2
#: xonsh.readline_shell.ReadlineShell.cmdloop:2
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the "
"remainder of the line as argument."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.columnize:2
#: xonsh.readline_shell.ReadlineShell.columnize:2
msgid "Display a list of strings as a compact set of columns."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.columnize:4
#: xonsh.readline_shell.ReadlineShell.columnize:4
msgid ""
"Each column is only as wide as necessary. Columns are separated by two "
"spaces (one was not legible enough)."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.complete:2
#: xonsh.readline_shell.ReadlineShell.complete:2
msgid "Return the next possible completion for 'text'."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.complete:4
#: xonsh.readline_shell.ReadlineShell.complete:4
msgid ""
"If a command has not been entered, then complete against command list. "
"Otherwise try to call complete_<command> to get list of completions."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.completedefault:2
#: xonsh.dumb_shell.DumbShell.completenames:2
#: xonsh.readline_shell.ReadlineShell.completedefault:2
#: xonsh.readline_shell.ReadlineShell.completenames:2
msgid "Implements tab-completion for text."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.do_help:2
#: xonsh.readline_shell.ReadlineShell.do_help:2
msgid "List available commands with \"help\" or detailed help with \"help cmd\"."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.format_color:2
#: xonsh.readline_shell.ReadlineShell.format_color:2
msgid "Readline implementation of color formatting. This uses ANSI color codes."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.onecmd:2
#: xonsh.readline_shell.ReadlineShell.onecmd:2
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.onecmd:5
#: xonsh.readline_shell.ReadlineShell.onecmd:5
msgid ""
"This may be overridden, but should not normally need to be; see the "
"precmd() and postcmd() methods for useful execution hooks. The return "
"value is a flag indicating whether interpretation of commands by the "
"interpreter should stop."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.parseline:2
#: xonsh.readline_shell.ReadlineShell.parseline:2
msgid "Overridden to no-op."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.postcmd:2
#: xonsh.readline_shell.ReadlineShell.postcmd:2
msgid ""
"Called just before execution of line. For readline, this handles the "
"automatic indentation of code blocks."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.postloop:2
#: xonsh.readline_shell.ReadlineShell.postloop:2
msgid "Hook method executed once when the cmdloop() method is about to return."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.preloop:2
#: xonsh.readline_shell.ReadlineShell.preloop:2
msgid "Hook method executed once when the cmdloop() method is called."
msgstr ""

#: of xonsh.dumb_shell.DumbShell.singleline:2
#: xonsh.readline_shell.ReadlineShell.singleline:2
msgid ""
"Reads a single line of input. The store_in_history kwarg flags whether "
"the input should be stored in readline's in-memory history."
msgstr ""

#: ../../api/environ.rst:5
msgid "Environment (``xonsh.environ``)"
msgstr ""

#: of xonsh.environ:1
msgid "Environment for the xonsh shell."
msgstr ""

#: of xonsh.environ.Ensurer:2
msgid ""
"Named tuples whose elements are functions that represent environment "
"variable validation, conversion, detyping."
msgstr ""

#: of xonsh.environ.Ensurer:23
msgid "Create new instance of Ensurer(validate, convert, detype)"
msgstr ""

#: of xonsh.environ.Ensurer.count:2 xonsh.environ.VarDocs.count:2
#: xonsh.prompt.gitstatus.GitStatus.count:2
#: xontrib.voxapi.VirtualEnvironment.count:2
msgid "Return number of occurrences of value."
msgstr ""

#: of xonsh.environ.Ensurer.index:2 xonsh.environ.VarDocs.index:2
#: xonsh.prompt.gitstatus.GitStatus.index:2
#: xontrib.voxapi.VirtualEnvironment.index:2
msgid "Return first index of value."
msgstr ""

#: of xonsh.environ.Ensurer.index:4 xonsh.environ.VarDocs.index:4
#: xonsh.prompt.gitstatus.GitStatus.index:4 xonsh.tools.EnvPath.index:2
#: xontrib.voxapi.VirtualEnvironment.index:4
msgid "Raises ValueError if the value is not present."
msgstr ""

#: of xonsh.environ.Ensurer.convert:2 xonsh.environ.VarDocs.configurable:2
#: xonsh.prompt.gitstatus.GitStatus.num_ahead:2
#: xontrib.voxapi.VirtualEnvironment.bin:2
msgid "Alias for field number 1"
msgstr ""

#: of xonsh.environ.Ensurer.detype:2 xonsh.environ.VarDocs.default:2
#: xonsh.prompt.gitstatus.GitStatus.num_behind:2
#: xontrib.voxapi.VirtualEnvironment.lib:2
msgid "Alias for field number 2"
msgstr ""

#: of xonsh.environ.Ensurer.validate:2 xonsh.environ.VarDocs.docstr:2
#: xonsh.prompt.gitstatus.GitStatus.branch:2
#: xontrib.voxapi.VirtualEnvironment.env:2
msgid "Alias for field number 0"
msgstr ""

#: of xonsh.environ.Env:2
msgid ""
"A xonsh environment, whose variables have limited typing (unlike BASH). "
"Most variables are, by default, strings (like BASH). However, the "
"following rules also apply based on variable-name:"
msgstr ""

#: of xonsh.environ.Env:6
msgid "PATH: any variable whose name ends in PATH is a list of strings."
msgstr ""

#: of xonsh.environ.Env:7
msgid "XONSH_HISTORY_SIZE: this variable is an (int | float, str) tuple."
msgstr ""

#: of xonsh.environ.Env:8
msgid ""
"LC_* (locale categories): locale category names get/set the Python locale"
" via locale.getlocale() and locale.setlocale() functions."
msgstr ""

#: of xonsh.environ.Env:11
msgid ""
"An Env instance may be converted to an untyped version suitable for use "
"in a subprocess."
msgstr ""

#: of xonsh.environ.Env:31
msgid "If no initial environment is given, os_environ is used."
msgstr ""

#: of xonsh.environ.Env.get:2
msgid ""
"The environment will look up default values from its own defaults if a "
"default is not given here."
msgstr ""

#: of xonsh.environ.Env.get_docs:2
msgid "Gets the documentation for the environment variable."
msgstr ""

#: of xonsh.environ.Env.get_ensurer:2
msgid "Gets an ensurer for the given key."
msgstr ""

#: of xonsh.environ.Env.help:2
msgid "Get information about a specific environment variable."
msgstr ""

#: of xonsh.environ.Env.is_manually_set:2
msgid "Checks if an environment variable has been manually set."
msgstr ""

#: of xonsh.environ.Env.replace_env:2 xonsh.environ.Env.undo_replace_env:2
msgid ""
"Replaces the contents of os_environ with a detyped version of the xonsh "
"environment."
msgstr ""

#: of xonsh.environ.Env.set_ensurer:2
msgid "Sets an ensurer."
msgstr ""

#: of xonsh.environ.Env.swap:2
msgid ""
"Provides a context manager for temporarily swapping out certain "
"environment variables with other values. On exit from the context "
"manager, the original values are restored."
msgstr ""

#: of xonsh.environ.LsColors:2
msgid ""
"Helps convert to/from $LS_COLORS format, respecting the xonsh color "
"style. This accepts the same inputs as dict()."
msgstr ""

#: of xonsh.environ.LsColors.convert:2
msgid "Converts an object to LsColors, if needed."
msgstr ""

#: of xonsh.environ.LsColors.detype:2
msgid "De-types the instance, allowing it to be exported to the environment."
msgstr ""

#: of xonsh.environ.LsColors.fromdircolors:2
msgid ""
"Constructs an LsColors instance by running dircolors. If a filename is "
"provided, it is passed down to the dircolors command."
msgstr ""

#: of xonsh.environ.LsColors.fromstring:2
msgid ""
"Creates a new instance of the LsColors class from a colon-separated "
"string of dircolor-valid keys to ANSI color escape sequences."
msgstr ""

#: of xonsh.environ.LsColors.style:2
msgid "The ANSI color style for the current XONSH_COLOR_STYLE"
msgstr ""

#: of xonsh.environ.LsColors.style_name:2
msgid "Current XONSH_COLOR_STYLE value"
msgstr ""

#: of xonsh.environ.VarDocs:2
msgid "Named tuple for environment variable documentation"
msgstr ""

#: of xonsh.environ.VarDocs:8
msgid "**docstr**"
msgstr ""

#: of xonsh.environ.VarDocs:8
msgid "The environment variable docstring."
msgstr ""

#: of xonsh.environ.VarDocs:11
msgid "**configurable**"
msgstr ""

#: of xonsh.environ.VarDocs:11
msgid "Flag for whether the environment variable is configurable or not."
msgstr ""

#: of xonsh.environ.VarDocs:16 xonsh.history.json.JsonCommandField:49
#: xonsh.proc.FileThreadDispatcher:42
msgid "**default**"
msgstr ""

#: of xonsh.environ.VarDocs:14
msgid ""
"Custom docstring for the default value for complex defaults. Is this is "
"DefaultNotGiven, then the default will be looked up from DEFAULT_VALUES "
"and converted to a str."
msgstr ""

#: of xonsh.environ.VarDocs:35
msgid "**store_as_str**"
msgstr ""

#: of xonsh.environ.VarDocs:19
msgid ""
"Flag for whether the environment variable should be stored as a string. "
"This is used when persisting a variable that is not JSON serializable to "
"the config file. For example, sets, frozensets, and potentially other "
"non-trivial data types. default, False."
msgstr ""

#: of xonsh.environ.VarDocs:40
msgid ""
"Create new instance of VarDocs(docstr, configurable, default, "
"store_as_str)"
msgstr ""

#: of xonsh.environ.VarDocs.store_as_str:2
#: xonsh.prompt.gitstatus.GitStatus.untracked:2
#: xontrib.voxapi.VirtualEnvironment.inc:2
msgid "Alias for field number 3"
msgstr ""

#: of xonsh.environ.default_env:2
msgid "Constructs a default xonsh environment."
msgstr ""

#: of xonsh.environ.default_lscolors:2
msgid "Gets a default instanse of LsColors"
msgstr ""

#: of xonsh.environ.default_value:2
msgid "Decorator for making callable default values."
msgstr ""

#: of xonsh.environ.default_xonshrc:2
msgid "Creates a new instance of the default xonshrc tuple."
msgstr ""

#: of xonsh.environ.ensure_ls_colors_in_env:2
msgid ""
"This ensures that the $LS_COLORS environment variable is in the "
"environment. This fires exactly once upon the first time the ls command "
"is called."
msgstr ""

#: of xonsh.environ.foreign_env_fixes:2
msgid "Environment fixes for all operating systems"
msgstr ""

#: of xonsh.environ.is_callable_default:2
msgid "Checks if a value is a callable default."
msgstr ""

#: of xonsh.environ.is_lscolors:2
msgid "Checks if an object is an instance of LsColors"
msgstr ""

#: of xonsh.environ.locale_convert:2
msgid "Creates a converter for a locale key."
msgstr ""

#: of xonsh.environ.locate_binary:2
msgid "Locates an executable on the file system."
msgstr ""

#: of xonsh.environ.make_args_env:2
msgid ""
"Makes a dictionary containing the $ARGS and $ARG<N> environment "
"variables. If the supplied ARGS is None, then sys.argv is used."
msgstr ""

#: of xonsh.environ.to_debug:2
msgid ""
"Converts value using to_bool_or_int() and sets this value on as the "
"execer's debug level."
msgstr ""

#: of xonsh.environ.windows_foreign_env_fixes:2
msgid "Environment fixes for Windows. Operates in-place."
msgstr ""

#: of xonsh.environ.xonsh_append_newline:2
msgid "Appends a newline if we are in interactive mode"
msgstr ""

#: of xonsh.environ.xonsh_config_dir:2
msgid "Ensures and returns the $XONSH_CONFIG_DIR"
msgstr ""

#: of xonsh.environ.xonsh_data_dir:2
msgid "Ensures and returns the $XONSH_DATA_DIR"
msgstr ""

#: of xonsh.environ.xonsh_script_run_control:2
msgid "Loads a xonsh file and applies it as a run control."
msgstr ""

#: of xonsh.environ.xonshconfig:2
msgid "Ensures and returns the $XONSHCONFIG"
msgstr ""

#: of xonsh.environ.xonshrc_context:2
msgid "Attempts to read in all xonshrc files and return the context."
msgstr ""

#: ../../api/events.rst:5
msgid "Events (``xonsh.events``)"
msgstr ""

#: of xonsh.events:1
msgid "Events for xonsh."
msgstr ""

#: of xonsh.events:3
msgid "In all likelihood, you want builtins.events"
msgstr ""

#: of xonsh.events:5
msgid "The best way to \"declare\" an event is something like::"
msgstr ""

#: of xonsh.events.AbstractEvent:2
msgid "A given event that handlers can register against."
msgstr ""

#: of xonsh.events.AbstractEvent:4
msgid "Acts as a ``MutableSet`` for registered handlers."
msgstr ""

#: of xonsh.events.AbstractEvent:6
msgid "Note that ordering is never guaranteed."
msgstr ""

#: of xonsh.events.AbstractEvent.add:2
msgid "Add an element."
msgstr ""

#: of xonsh.events.AbstractEvent.clear:2 xonsh.events.Event.clear:2
#: xonsh.events.LoadEvent.clear:2
msgid "This is slow (creates N new iterators!) but effective."
msgstr ""

#: of xonsh.events.AbstractEvent.discard:2
msgid "Remove an element.  Do not raise an exception if absent."
msgstr ""

#: of xonsh.events.AbstractEvent.fire:2 xonsh.events.LoadEvent.fire:2
msgid "Fires an event, calling registered handlers with the given arguments."
msgstr ""

#: of xonsh.events.AbstractEvent.fire:21 xonsh.events.Event.fire:10
#: xonsh.events.LoadEvent.fire:21
msgid "**\\*\\*kwargs :**"
msgstr ""

#: of xonsh.events.AbstractEvent.fire:8 xonsh.events.Event.fire:10
#: xonsh.events.LoadEvent.fire:8
msgid "Keyword arguments to pass to each handler"
msgstr ""

#: of xonsh.events.AbstractEvent.isdisjoint:2 xonsh.events.Event.isdisjoint:2
#: xonsh.events.LoadEvent.isdisjoint:2
msgid "Return True if two sets have a null intersection."
msgstr ""

#: of xonsh.events.AbstractEvent.pop:2 xonsh.events.Event.pop:2
#: xonsh.events.LoadEvent.pop:2
msgid "Return the popped value.  Raise KeyError if empty."
msgstr ""

#: of xonsh.events.AbstractEvent.remove:2 xonsh.events.Event.remove:2
#: xonsh.events.LoadEvent.remove:2
msgid "Remove an element. If not a member, raise a KeyError."
msgstr ""

#: of xonsh.events.AbstractEvent.species:2 xonsh.events.Event.species:2
#: xonsh.events.LoadEvent.species:2
msgid "The species (basically, class) of the event"
msgstr ""

#: of xonsh.events.Event:2
msgid "An event species for notify and scatter-gather events."
msgstr ""

#: of xonsh.events.Event.add:2 xonsh.events.LoadEvent.add:2
msgid "Add an element to a set."
msgstr ""

#: of xonsh.events.Event.add:4 xonsh.events.LoadEvent.add:4
msgid "This has no effect if the element is already present."
msgstr ""

#: of xonsh.events.Event.discard:2 xonsh.events.LoadEvent.discard:2
msgid "Remove an element from a set if it is a member."
msgstr ""

#: of xonsh.events.Event.discard:4 xonsh.events.LoadEvent.discard:4
msgid "If the element is not a member, do nothing."
msgstr ""

#: of xonsh.events.Event.fire:2
msgid ""
"Fires an event, calling registered handlers with the given arguments. A "
"non-unique iterable of the results is returned."
msgstr ""

#: of xonsh.events.Event.fire:5
msgid "Each handler is called immediately. Exceptions are turned in to warnings."
msgstr ""

#: of xonsh.events.Event.fire:28
msgid "**vals**"
msgstr ""

#: of xonsh.events.Event.fire:27 xontrib.mplhooks.figure_to_rgb_array:11
msgid "iterable"
msgstr ""

#: of xonsh.events.Event.fire:15
msgid ""
"Return values of each handler. If multiple handlers return the same "
"value, it will appear multiple times."
msgstr ""

#: of xonsh.events.EventManager:2
msgid "Container for all events in a system."
msgstr ""

#: of xonsh.events.EventManager:4
msgid "Meant to be a singleton, but doesn't enforce that itself."
msgstr ""

#: of xonsh.events.EventManager:6
msgid "Each event is just an attribute. They're created dynamically on first use."
msgstr ""

#: of xonsh.events.EventManager.doc:2
msgid "Applies a docstring to an event."
msgstr ""

#: of xonsh.events.EventManager.doc:8 xonsh.events.EventManager.transmogrify:9
msgid "The name of the event, eg \"on_precommand\""
msgstr ""

#: of xonsh.events.EventManager.doc:24 xonsh.inspectors.call_tip:37
msgid "**docstring**"
msgstr ""

#: of xonsh.events.EventManager.doc:11
msgid "The docstring to apply to the event"
msgstr ""

#: of xonsh.events.EventManager.exists:2
msgid ""
"Checks if an event with a given name exist. If it does not exist, it will"
" not be created. That is what makes this different than ``hasattr(events,"
" name)``, which will create the event."
msgstr ""

#: of xonsh.events.EventManager.transmogrify:2
msgid ""
"Converts an event from one species to another, preserving handlers and "
"docstring."
msgstr ""

#: of xonsh.events.EventManager.transmogrify:4
msgid ""
"Please note: Some species maintain specialized state. This is lost on "
"transmogrification."
msgstr ""

#: of xonsh.events.EventManager.transmogrify:25
msgid "**species**"
msgstr ""

#: of xonsh.events.EventManager.transmogrify:24
msgid "subclass of AbstractEvent"
msgstr ""

#: of xonsh.events.EventManager.transmogrify:12
msgid "The type to turn the event in to."
msgstr ""

#: of xonsh.events.LoadEvent:2
msgid ""
"An event species where each handler is called exactly once, shortly after"
" either the event is fired or the handler is registered (whichever is "
"later). Additional firings are ignored."
msgstr ""

#: of xonsh.events.LoadEvent:5
msgid ""
"Note: Does not support scatter/gather, due to never knowing when we have "
"all the handlers."
msgstr ""

#: of xonsh.events.LoadEvent:7
msgid ""
"Note: Maintains a strong reference to pargs/kwargs in case of the "
"addition of future handlers."
msgstr ""

#: of xonsh.events.LoadEvent:9
msgid "Note: This is currently NOT thread safe."
msgstr ""

#: ../../api/execer.rst:5
msgid "Compilation, Evaluation, & Execution  (``xonsh.execer``)"
msgstr ""

#: of xonsh.execer:1
msgid "Implements the xonsh executer."
msgstr ""

#: of xonsh.execer.Execer:2
msgid "Executes xonsh code in a context."
msgstr ""

#: of xonsh.execer.Execer:28
msgid "File we are to execute."
msgstr ""

#: of xonsh.execer.Execer:34
msgid "**parser_args**"
msgstr ""

#: of xonsh.execer.Execer:33 xonsh.inspectors.Inspector.pinfo:14
#: xonsh.wizard.PromptVisitor:30
msgid "dict, optional"
msgstr ""

#: of xonsh.execer.Execer:34
msgid "Arguments to pass down to the parser."
msgstr ""

#: of xonsh.execer.Execer:37
msgid "**unload**"
msgstr ""

#: of xonsh.execer.Execer:37
msgid "Whether or not to unload xonsh builtins upon deletion."
msgstr ""

#: of xonsh.execer.Execer:40
msgid "**xonsh_ctx**"
msgstr ""

#: of xonsh.execer.Execer:39 xonsh.jupyter_kernel.XonshKernel:49
#: xonsh.jupyter_shell.StdJupyterRedirect:46
msgid "dict or None, optional"
msgstr ""

#: of xonsh.execer.Execer:40
msgid "Xonsh xontext to load as builtins.__xonsh__.ctx"
msgstr ""

#: of xonsh.execer.Execer:44
msgid "**scriptcache**"
msgstr ""

#: of xonsh.execer.Execer:43
msgid ""
"Whether or not to use a precompiled bytecode cache when execing code, "
"default: True."
msgstr ""

#: of xonsh.execer.Execer:61
msgid "**cacheall**"
msgstr ""

#: of xonsh.execer.Execer:47
msgid ""
"Whether or not to cache all xonsh code, and not just files. If this is "
"set to true, it will cache command line input too, default: False."
msgstr ""

#: of xonsh.execer.Execer.compile:2
msgid ""
"Compiles xonsh code into a Python code object, which may then be execed "
"or evaled."
msgstr ""

#: of xonsh.execer.Execer.eval:2
msgid "Evaluates (and returns) xonsh code."
msgstr ""

#: of xonsh.execer.Execer.exec:2
msgid "Execute xonsh code."
msgstr ""

#: of xonsh.execer.Execer.parse:2
msgid ""
"Parses xonsh code in a context-aware fashion. For context-free parsing, "
"please use the Parser class directly or pass in transform=False."
msgstr ""

#: ../../api/foreign_shells.rst:5
msgid "Foreign Shell Tools (``xonsh.foreign_shells``)"
msgstr ""

#: of xonsh.foreign_shells:1
msgid "Tools to help interface with foreign shells, such as Bash."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:2
#: xonsh.foreign_shells.ForeignShellFunctionAlias:2
msgid ""
"This class is responsible for calling foreign shell functions as if they "
"were aliases. This does not currently support taking stdin."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:29
#: xonsh.foreign_shells.ForeignShellExecAlias:31
#: xonsh.foreign_shells.ForeignShellFunctionAlias:32
#: xonsh.foreign_shells.foreign_shell_data:9
msgid "**shell**"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:29
#: xonsh.foreign_shells.ForeignShellExecAlias:31
#: xonsh.foreign_shells.ForeignShellFunctionAlias:32
msgid "Name or path to shell"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:32
#: xonsh.foreign_shells.ForeignShellExecAlias:34
#: xonsh.foreign_shells.ForeignShellFunctionAlias:35
msgid "Where the function is defined, path to source."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:35
#: xonsh.foreign_shells.ForeignShellExecAlias:37
#: xonsh.foreign_shells.ForeignShellFunctionAlias:38
#: xonsh.foreign_shells.foreign_shell_data:52
msgid "**sourcer**"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:34
#: xonsh.foreign_shells.ForeignShellExecAlias:36
#: xonsh.foreign_shells.ForeignShellFunctionAlias:37
#: xonsh.foreign_shells.foreign_shell_data:17
#: xonsh.foreign_shells.foreign_shell_data:20
#: xonsh.foreign_shells.foreign_shell_data:46
#: xonsh.foreign_shells.foreign_shell_data:51
#: xonsh.foreign_shells.foreign_shell_data:58
#: xonsh.foreign_shells.foreign_shell_data:62
#: xonsh.foreign_shells.foreign_shell_data:67
#: xonsh.foreign_shells.foreign_shell_data:73
#: xonsh.jupyter_kernel.XonshKernel:31
#: xonsh.lazyasd.load_module_in_background:10
msgid "str or None, optional"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:35
#: xonsh.foreign_shells.ForeignShellExecAlias:37
#: xonsh.foreign_shells.ForeignShellFunctionAlias:38
msgid "Command to source foreign files with."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:51
#: xonsh.foreign_shells.ForeignShellExecAlias:53
#: xonsh.foreign_shells.ForeignShellFunctionAlias:54
#: xonsh.foreign_shells.foreign_shell_data:24
msgid "**extra_args**"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:50
#: xonsh.foreign_shells.ForeignShellExecAlias:52
#: xonsh.foreign_shells.ForeignShellFunctionAlias:53
#: xonsh.foreign_shells.foreign_shell_data:23
msgid "tuple of str, optional"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellBaseAlias:38
#: xonsh.foreign_shells.ForeignShellExecAlias:40
#: xonsh.foreign_shells.ForeignShellFunctionAlias:41
#: xonsh.foreign_shells.foreign_shell_data:24
msgid "Additional command line options to pass into the shell."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellExecAlias:2
msgid "Provides a callable alias for source code in a foreign shell."
msgstr ""

#: of xonsh.foreign_shells.ForeignShellExecAlias:28
msgid "Source code in the shell language"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellFunctionAlias:29
msgid "**funcname**"
msgstr ""

#: of xonsh.foreign_shells.ForeignShellFunctionAlias:29
msgid "function name"
msgstr ""

#: of xonsh.foreign_shells.ensure_shell:2
msgid "Ensures that a mapping follows the shell specification."
msgstr ""

#: of xonsh.foreign_shells.load_foreign_aliases:2
msgid "Loads aliases from foreign shells."
msgstr ""

#: of xonsh.foreign_shells.load_foreign_aliases:9
#: xonsh.foreign_shells.load_foreign_envs:9
msgid "**shells**"
msgstr ""

#: of xonsh.foreign_shells.load_foreign_aliases:8
#: xonsh.foreign_shells.load_foreign_envs:8
msgid "sequence of dicts"
msgstr ""

#: of xonsh.foreign_shells.load_foreign_aliases:8
#: xonsh.foreign_shells.load_foreign_envs:8
msgid ""
"An iterable of dicts that can be passed into foreign_shell_data() as "
"keyword arguments."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:101
#: xonsh.foreign_shells.load_foreign_aliases:26 xonsh.main.setup:23
msgid "**aliases**"
msgstr ""

#: of xonsh.foreign_shells.load_foreign_aliases:14
msgid "A dictionary of the merged aliases."
msgstr ""

#: of xonsh.foreign_shells.load_foreign_envs:2
msgid "Loads environments from foreign shells."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:85
#: xonsh.foreign_shells.load_foreign_envs:26
#: xonsh.lazyasd.load_module_in_background:18 xonsh.main.setup:20
#: xonsh.proc.ProcProxyThread:71
msgid "**env**"
msgstr ""

#: of xonsh.foreign_shells.load_foreign_envs:14
msgid "A dictionary of the merged environments."
msgstr ""

#: of xonsh.foreign_shells.parse_aliases:2
msgid "Parses the aliases portion of string into a dict."
msgstr ""

#: of xonsh.foreign_shells.parse_env:2
msgid "Parses the environment portion of string into a dict."
msgstr ""

#: of xonsh.foreign_shells.parse_funcs:2
msgid ""
"Parses the funcs portion of a string into a dict of callable foreign "
"function wrappers."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:2
msgid ""
"Extracts data from a foreign (non-xonsh) shells. Currently this gets the "
"environment, aliases, and functions but may be extended in the future."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:9
msgid "The name of the shell, such as 'bash' or '/bin/sh'."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:12
msgid "**interactive**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:12
msgid "Whether the shell should be run in interactive mode."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:15
msgid "**login**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:15
msgid "Whether the shell should be a login shell."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:18
msgid "**envcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:18
msgid "The command to generate environment output with."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:21
msgid "**aliascmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:21
msgid "The command to generate alias output with."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:27
msgid "**currenv**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:26
msgid "tuple of items or None, optional"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:27
msgid "Manual override for the current environment."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:30
msgid "**safe**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:30
msgid "Flag for whether or not to safely handle exceptions and other errors."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:34
msgid "**prevcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:33
msgid ""
"A command to run in the shell before anything else, useful for sourcing "
"and other commands that may require environment recovery."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:38
msgid "**postcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:37
msgid ""
"A command to run after everything else, useful for cleaning up any damage"
" that the prevcmd may have caused."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:47
msgid "**funcscmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:41
msgid ""
"This is a command or script that can be used to determine the names and "
"locations of any functions that are native to the foreign shell. This "
"command should print *only* a JSON object that maps function names to the"
" filenames where the functions are defined. If this is None, then a "
"default script will attempted to be looked up based on the shell name. "
"Callable wrappers for these functions will be returned in the aliases "
"dictionary."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:50
msgid ""
"How to source a foreign shell file for purposes of calling functions in "
"that shell. If this is None, a default value will attempt to be looked up"
" based on the shell name."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:56
msgid "**use_tmpfile**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:55
msgid ""
"This specifies if the commands are written to a tmp file or just parsed "
"directly to the shell"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:59
msgid "**tmpfile_ext**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:59
msgid "If tmpfile is True this sets specifies the extension used."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:63
msgid "**runcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:62
msgid ""
"Command line switches to use when running the script, such as -c for Bash"
" and /C for cmd.exe."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:68
msgid "**seterrprevcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:66
msgid ""
"Command that enables exit-on-error for the shell that is run at the start"
" of the script. For example, this is \"set -e\" in Bash. To disable exit-"
"on-error behavior, simply pass in an empty string."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:74
msgid "**seterrpostcmd**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:71
msgid ""
"Command that enables exit-on-error for the shell that is run at the end "
"of the script. For example, this is \"if errorlevel 1 exit 1\" in "
"cmd.exe. To disable exit-on-error behavior, simply pass in an empty "
"string."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:77
msgid "**show**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:77
msgid "Whether or not to display the script that will be run."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:80
msgid "**dryrun**"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:80
msgid "Whether or not to actually run and process the command."
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:85
msgid "Dictionary of shell's environment. (None if the subproc command fails)"
msgstr ""

#: of xonsh.foreign_shells.foreign_shell_data:88
msgid ""
"Dictionary of shell's aliases, this includes foreign function "
"wrappers.(None if the subproc command fails)"
msgstr ""

#: ../../api/history/base.rst:5
msgid "History Base Class -- :mod:`xonsh.history.base`"
msgstr ""

#: of xonsh.history.base:1
msgid "Base class of Xonsh History backends."
msgstr ""

#: of xonsh.history.base.History:2
msgid "Xonsh history backend base class."
msgstr ""

#: of xonsh.history.base.History:4
msgid "History objects should be created via a subclass of History."
msgstr ""

#: of xonsh.history.base.History:21
msgid "**rtns**"
msgstr ""

#: of xonsh.history.base.History:20
msgid "sequence of ints"
msgstr ""

#: of xonsh.history.base.History:21 xonsh.history.base.HistoryEntry:26
msgid "The return of the command (ie, 0 on success)"
msgstr ""

#: of xonsh.history.base.History:24
msgid "**inps**"
msgstr ""

#: of xonsh.history.base.History:23 xonsh.history.base.History:30
msgid "sequence of strings"
msgstr ""

#: of xonsh.history.base.History:24 xonsh.history.base.HistoryEntry:20
msgid "The command as typed by the user, including newlines"
msgstr ""

#: of xonsh.history.base.History:28
msgid "**tss**"
msgstr ""

#: of xonsh.history.base.History:27
msgid "sequence of two-tuples of floats"
msgstr ""

#: of xonsh.history.base.History:27
msgid ""
"The timestamps of when the command started and finished, including "
"fractions"
msgstr ""

#: of xonsh.history.base.History:31
msgid "**outs**"
msgstr ""

#: of xonsh.history.base.History:31 xonsh.history.base.HistoryEntry:23
msgid "The output of the command, if xonsh is configured to save it"
msgstr ""

#: of xonsh.history.base.History:34 xonsh.history.json.JsonHistory:58
msgid "**gc**"
msgstr ""

#: of xonsh.history.base.History:33
msgid "A garbage collector or None"
msgstr ""

#: of xonsh.history.base.History:34
msgid "The garbage collector"
msgstr ""

#: of xonsh.history.base.History:37
msgid ""
"**In all of these sequences, index 0 is the oldest and -1 (the last "
"item)**"
msgstr ""

#: of xonsh.history.base.History:41
msgid "**is the newest.**"
msgstr ""

#: of xonsh.history.base.History:46
msgid "Represents a xonsh session's history."
msgstr ""

#: of xonsh.history.base.History:66 xonsh.history.json.JsonHistory:35
msgid "**sessionid**"
msgstr ""

#: of xonsh.history.base.History:65 xonsh.history.json.JsonHistory:34
msgid "int, uuid, str, optional"
msgstr ""

#: of xonsh.history.base.History:52 xonsh.history.json.JsonHistory:34
msgid "Current session identifier, will generate a new sessionid if not set."
msgstr ""

#: of xonsh.history.base.History.all_items:2
msgid "Get all history items."
msgstr ""

#: of xonsh.history.base.History.append:2
#: xonsh.history.sqlite.SqliteHistory.append:2
msgid "Append a command item into history."
msgstr ""

#: of xonsh.history.base.History.append:24
#: xonsh.history.sqlite.SqliteHistory.append:24
msgid "**cmd: dict**"
msgstr ""

#: of xonsh.history.base.History.append:8
#: xonsh.history.json.JsonHistory.append:8
#: xonsh.history.sqlite.SqliteHistory.append:8
msgid ""
"This dict contains information about the command that is to be added to "
"the history list. It should contain the keys ``inp``, ``rtn`` and ``ts``."
" These key names mirror the same names defined as instance variables in "
"the ``HistoryEntry`` class."
msgstr ""

#: of xonsh.history.base.History.flush:2
msgid "Flush the history items to disk from a buffer."
msgstr ""

#: of xonsh.history.base.History.info:2 xonsh.history.json.JsonHistory.info:2
#: xonsh.history.sqlite.SqliteHistory.info:2
msgid "A collection of information about the shell history."
msgstr ""

#: of xonsh.history.base.History.info:21 xonsh.history.json.JsonHistory.info:21
#: xonsh.history.sqlite.SqliteHistory.info:21
msgid "dict or collections.OrderedDict"
msgstr ""

#: of xonsh.history.base.History.info:9 xonsh.history.json.JsonHistory.info:9
#: xonsh.history.sqlite.SqliteHistory.info:9
msgid "Contains history information as str key pairs."
msgstr ""

#: of xonsh.history.base.History.items:2
msgid "Get history items of current session."
msgstr ""

#: of xonsh.history.base.History.run_gc:2
#: xonsh.history.json.JsonHistory.run_gc:2
#: xonsh.history.sqlite.SqliteHistory.run_gc:2
msgid "Run the garbage collector."
msgstr ""

#: of xonsh.history.base.History.run_gc:8
#: xonsh.history.json.JsonHistory.run_gc:8
#: xonsh.history.sqlite.SqliteHistory.run_gc:8
msgid "**size: None or tuple of a int and a string**"
msgstr ""

#: of xonsh.history.base.History.run_gc:8
#: xonsh.history.json.JsonHistory.run_gc:8
#: xonsh.history.sqlite.SqliteHistory.run_gc:8
msgid "Determines the size and units of what would be allowed to remain."
msgstr ""

#: of xonsh.history.base.History.run_gc:24
#: xonsh.history.json.JsonHistory.run_gc:24
#: xonsh.history.sqlite.SqliteHistory.run_gc:24
msgid "**blocking: bool**"
msgstr ""

#: of xonsh.history.base.History.run_gc:11
#: xonsh.history.json.JsonHistory.run_gc:11
#: xonsh.history.sqlite.SqliteHistory.run_gc:11
msgid "If set blocking, then wait until gc action finished."
msgstr ""

#: of xonsh.history.base.HistoryEntry:2
msgid "Represent a command in history."
msgstr ""

#: of xonsh.history.base.HistoryEntry:20
msgid "**cmd: str**"
msgstr ""

#: of xonsh.history.base.HistoryEntry:23
msgid "**out: str**"
msgstr ""

#: of xonsh.history.base.HistoryEntry:26
msgid "**rtn: int**"
msgstr ""

#: of xonsh.history.base.HistoryEntry:31
msgid "**ts: two-tuple of floats**"
msgstr ""

#: of xonsh.history.base.HistoryEntry:29
msgid ""
"The timestamps of when the command started and finished, including "
"fractions."
msgstr ""

#: ../../api/history/index.rst:5
msgid "Xonsh History API"
msgstr ""

#: ../../api/history/index.rst:6
msgid "**History Modules:**"
msgstr ""

#: ../../api/history/json.rst:5
msgid "History Backend JSON -- :mod:`xonsh.history.json`"
msgstr ""

#: of xonsh.history.json:1
msgid "Implements JSON version of xonsh history backend."
msgstr ""

#: of xonsh.history.json.JsonCommandField:2
msgid "A field in the 'cmds' portion of history."
msgstr ""

#: of xonsh.history.json.JsonCommandField:22
msgid "Represents a field in the 'cmds' portion of history."
msgstr ""

#: of xonsh.history.json.JsonCommandField:24
msgid ""
"Will query the buffer for the relevant data, if possible. Otherwise it "
"will lazily acquire data from the file."
msgstr ""

#: of xonsh.history.json.JsonCommandField:30
msgid "**field**"
msgstr ""

#: of xonsh.history.json.JsonCommandField:30
msgid "The name of the field to query."
msgstr ""

#: of xonsh.history.json.JsonCommandField:33
msgid "**hist**"
msgstr ""

#: of xonsh.history.json.JsonCommandField:32
msgid "History object"
msgstr ""

#: of xonsh.history.json.JsonCommandField:33
msgid "The history object to query."
msgstr ""

#: of xonsh.history.json.JsonCommandField:48 xonsh.history.json.JsonHistory:41
#: xonsh.wizard.PromptVisitor:47
msgid "optional"
msgstr ""

#: of xonsh.history.json.JsonCommandField:36
msgid "The default value to return if key is not present."
msgstr ""

#: of xonsh.history.json.JsonCommandField.i_am_at_the_front:2
msgid "Tests if the command field is at the front of the queue."
msgstr ""

#: of xonsh.history.json.JsonHistory:2
msgid "Xonsh history backend implemented with JSON files."
msgstr ""

#: of xonsh.history.json.JsonHistory:4
msgid "JsonHistory implements two extra actions: ``diff``, and ``replay``."
msgstr ""

#: of xonsh.history.json.JsonHistory:23
msgid ""
"Represents a xonsh session's history as an in-memory buffer that is "
"periodically flushed to disk."
msgstr ""

#: of xonsh.history.json.JsonHistory:30
msgid ""
"Location of history file, defaults to "
"``$XONSH_DATA_DIR/xonsh-{sessionid}.json``."
msgstr ""

#: of xonsh.history.json.JsonHistory:38
msgid "**buffersize**"
msgstr ""

#: of xonsh.history.json.JsonHistory:38
msgid "Maximum buffersize in memory."
msgstr ""

#: of xonsh.history.json.JsonHistory:42
msgid "**meta**"
msgstr ""

#: of xonsh.history.json.JsonHistory:41
msgid ""
"Top-level metadata to store along with the history. The kwargs 'cmds' and"
" 'sessionid' are not allowed and will be overwritten."
msgstr ""

#: of xonsh.history.json.JsonHistory:45
msgid "Run garbage collector flag."
msgstr ""

#: of xonsh.history.json.JsonHistory.all_items:2
msgid "Returns all history as found in XONSH_DATA_DIR."
msgstr ""

#: of xonsh.history.json.JsonHistory.all_items:4
msgid "yield format: {'inp': cmd, 'rtn': 0, ...}"
msgstr ""

#: of xonsh.history.json.JsonHistory.append:2
msgid "Appends command to history. Will periodically flush the history to file."
msgstr ""

#: of xonsh.history.json.JsonHistory.append:28
#: xonsh.history.json.JsonHistory.flush:26
msgid "**hf**"
msgstr ""

#: of xonsh.history.json.JsonHistory.append:27
#: xonsh.history.json.JsonHistory.flush:25
msgid "JsonHistoryFlusher or None"
msgstr ""

#: of xonsh.history.json.JsonHistory.append:16
#: xonsh.history.json.JsonHistory.flush:14
msgid "The thread that was spawned to flush history"
msgstr ""

#: of xonsh.history.json.JsonHistory.flush:2
msgid "Flushes the current command buffer to disk."
msgstr ""

#: of xonsh.history.json.JsonHistory.flush:9
msgid "**at_exit**"
msgstr ""

#: of xonsh.history.json.JsonHistory.flush:8
msgid ""
"Whether the JsonHistoryFlusher should act as a thread in the background, "
"or execute immediately and block."
msgstr ""

#: of xonsh.history.json.JsonHistory.items:2
#: xonsh.history.sqlite.SqliteHistory.items:2
msgid "Display history items of current session."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher:2
msgid "Flush shell history to disk periodically."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher:22
msgid "Thread for flushing history."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher.dump:2
msgid "Write the cached history to external storage."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher.i_am_at_the_front:2
msgid "Tests if the flusher is at the front of the queue."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher.run:2
#: xonsh.history.json.JsonHistoryGC.run:2
#: xonsh.history.sqlite.SqliteHistoryGC.run:2
#: xonsh.lazyasd.BackgroundModuleLoader.run:2
#: xonsh.readline_shell.ReadlineHistoryAdder.run:2
msgid "Method representing the thread's activity."
msgstr ""

#: of xonsh.history.json.JsonHistoryFlusher.run:4
#: xonsh.history.json.JsonHistoryGC.run:4
#: xonsh.history.sqlite.SqliteHistoryGC.run:4
#: xonsh.lazyasd.BackgroundModuleLoader.run:4
#: xonsh.readline_shell.ReadlineHistoryAdder.run:4
msgid ""
"You may override this method in a subclass. The standard run() method "
"invokes the callable object passed to the object's constructor as the "
"target argument, if any, with sequential and keyword arguments taken from"
" the args and kwargs arguments, respectively."
msgstr ""

#: of xonsh.history.json.JsonHistoryGC:2 xonsh.history.sqlite.SqliteHistoryGC:2
msgid "Shell history garbage collection."
msgstr ""

#: of xonsh.history.json.JsonHistoryGC:22
#: xonsh.history.sqlite.SqliteHistoryGC:22
msgid "Thread responsible for garbage collecting old history."
msgstr ""

#: of xonsh.history.json.JsonHistoryGC:24
#: xonsh.history.sqlite.SqliteHistoryGC:24
msgid "May wait for shell (and for xonshrc to have been loaded) to start work."
msgstr ""

#: of xonsh.history.json.JsonHistoryGC.files:2
msgid ""
"Find and return the history files. Optionally locked files may be "
"excluded."
msgstr ""

#: of xonsh.history.json.JsonHistoryGC.files:5
msgid ""
"This is sorted by the last closed time. Returns a list of (timestamp, "
"number of cmds, file name) tuples."
msgstr ""

#: ../../api/history/main.rst:5
msgid "History Main Entry Points -- :mod:`xonsh.history.main`"
msgstr ""

#: of xonsh.history.main:1
msgid "Main entry points of the xonsh history."
msgstr ""

#: of xonsh.history.main.construct_history:2
msgid "Construct the history backend object."
msgstr ""

#: of xonsh.history.main.history_main:2
msgid "This is the history command entry point."
msgstr ""

#: ../../api/history/sqlite.rst:5
msgid "History Backend Sqlite -- :mod:`xonsh.history.sqlite`"
msgstr ""

#: of xonsh.history.sqlite:1
msgid "Implements the xonsh history backend via sqlite3."
msgstr ""

#: of xonsh.history.sqlite.SqliteHistory:2
msgid "Xonsh history backend implemented with sqlite3."
msgstr ""

#: of xonsh.history.sqlite.SqliteHistory.all_items:2
msgid "Display all history items."
msgstr ""

#: ../../api/imphooks.rst:5
msgid "Import Hooks (``xonsh.imphooks``)"
msgstr ""

#: of xonsh.imphooks:1
msgid "Import hooks for importing xonsh source files."
msgstr ""

#: of xonsh.imphooks:3
msgid "This module registers the hooks it defines when it is imported."
msgstr ""

#: of xonsh.imphooks.XonshImportEventHook:2
msgid "Implements the import hook for firing xonsh events on import."
msgstr ""

#: of xonsh.imphooks.XonshImportEventHook.append_stack:2
msgid ""
"A context manager for appending and then removing a name from the "
"fullname stack."
msgstr ""

#: of xonsh.imphooks.XonshImportEventHook.find_spec:2
#: xonsh.imphooks.XonshImportHook.find_spec:2
msgid "Finds the spec for a xonsh module if it exists."
msgstr ""

#: of xonsh.imphooks.XonshImportEventLoader:2
msgid ""
"A class that dispatches loader calls to another loader and fires relevant"
" xonsh events."
msgstr ""

#: of xonsh.imphooks.XonshImportEventLoader.create_module:2
msgid "Creates and returns the module object."
msgstr ""

#: of xonsh.imphooks.XonshImportEventLoader.exec_module:2
msgid "Executes the module in its own namespace."
msgstr ""

#: of xonsh.imphooks.XonshImportEventLoader.load_module:2
msgid "Legacy module loading, provided for backwards compatibility."
msgstr ""

#: of xonsh.imphooks.XonshImportEventLoader.module_repr:2
msgid "Legacy module repr, provided for backwards compatibility."
msgstr ""

#: of xonsh.imphooks.XonshImportHook:2
msgid "Implements the import hook for xonsh source files."
msgstr ""

#: of xonsh.imphooks.XonshImportHook.create_module:2
msgid "Create a xonsh module with the appropriate attributes."
msgstr ""

#: of xonsh.imphooks.XonshImportHook.get_code:2
msgid "Gets the code object for a xonsh file."
msgstr ""

#: of xonsh.imphooks.XonshImportHook.get_data:2
msgid "Gets the bytes for a path."
msgstr ""

#: of xonsh.imphooks.XonshImportHook.get_filename:2
msgid "Returns the filename for a module's fullname."
msgstr ""

#: of xonsh.imphooks.find_source_encoding:2
msgid ""
"Finds the source encoding given bytes representing a file. If no encoding"
" is found, UTF-8 will be returned as per the docs "
"https://docs.python.org/3/howto/unicode.html#unicode-literals-in-python-"
"source-code"
msgstr ""

#: of xonsh.imphooks.install_hook:2 xonsh.imphooks.install_import_hooks:2
msgid ""
"Install Xonsh import hooks in ``sys.meta_path`` in order for ``.xsh`` "
"files to be importable and import events to be fired."
msgstr ""

#: of xonsh.imphooks.install_hook:5 xonsh.imphooks.install_import_hooks:5
msgid ""
"Can safely be called many times, will be no-op if xonsh import hooks are "
"already present."
msgstr ""

#: ../../api/index.rst:5
msgid "Xonsh API"
msgstr ""

#: ../../api/index.rst:6
msgid "For those of you who want the gritty details."
msgstr ""

#: ../../api/index.rst:8
msgid "**Xonsh Standard Library:**"
msgstr ""

#: ../../api/index.rst:16
msgid "**Language:**"
msgstr ""

#: ../../api/index.rst:28
msgid "**Command Prompt:**"
msgstr ""

#: ../../api/index.rst:57
msgid "**Helpers:**"
msgstr ""

#: ../../api/index.rst:84
msgid "**Xontribs:**"
msgstr ""

#: ../../api/index.rst:92
msgid "**Pending Deprecation:**"
msgstr ""

#: ../../api/inspectors.rst:5
msgid "Object Inspectors (``xonsh.inspectors``)"
msgstr ""

#: of xonsh.inspectors:1
msgid "Tools for inspecting Python objects."
msgstr ""

#: of xonsh.inspectors:3 xonsh.openpy:7
msgid "This file was forked from the IPython project:"
msgstr ""

#: of xonsh.inspectors:5 xonsh.openpy:9 xonsh.readline_shell:6 xonsh.tools:5
msgid "Copyright (c) 2008-2014, IPython Development Team"
msgstr ""

#: of xonsh.inspectors:6 xonsh.openpy:10 xonsh.tools:6
msgid "Copyright (C) 2001-2007 Fernando Perez <fperez@colorado.edu>"
msgstr ""

#: of xonsh.inspectors:7 xonsh.openpy:11 xonsh.readline_shell:8 xonsh.tools:7
msgid "Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>"
msgstr ""

#: of xonsh.inspectors:8 xonsh.openpy:12 xonsh.readline_shell:9 xonsh.tools:8
msgid "Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>"
msgstr ""

#: of xonsh.inspectors.Inspector:2
msgid "Inspects objects."
msgstr ""

#: of xonsh.inspectors.Inspector.info:2
msgid "Compute a dict with detailed information about an object."
msgstr ""

#: of xonsh.inspectors.Inspector.info:4
msgid "Optional arguments:"
msgstr ""

#: of xonsh.inspectors.Inspector.info:6
msgid "oname: name of the variable pointing to the object."
msgstr ""

#: of xonsh.inspectors.Inspector.info:8
msgid ""
"info: a structure with some information fields which may have been "
"precomputed already."
msgstr ""

#: of xonsh.inspectors.Inspector.info:11
msgid "detail_level: if set to 1, more information is given."
msgstr ""

#: of xonsh.inspectors.Inspector.noinfo:2
msgid "Generic message when no information is found."
msgstr ""

#: of xonsh.inspectors.Inspector.pdef:2
msgid "Print the call signature for any callable object."
msgstr ""

#: of xonsh.inspectors.Inspector.pdef:4
msgid "If the object is a class, print the constructor information."
msgstr ""

#: of xonsh.inspectors.Inspector.pdoc:2
msgid "Print the docstring for any object."
msgstr ""

#: of xonsh.inspectors.Inspector.pdoc:4
msgid "Optional"
msgstr ""

#: of xonsh.inspectors.Inspector.pdoc:6
msgid ""
"-formatter: a function to run the docstring through for specially "
"formatted docstrings."
msgstr ""

#: of xonsh.inspectors.Inspector.pfile:2
msgid "Show the whole file where an object was defined."
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:2
msgid "Show detailed information about an object."
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:11
msgid "**oname**"
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:11
msgid "name of the variable pointing to the object."
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:15
msgid "**info**"
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:14
msgid ""
"a structure with some information fields which may have been precomputed "
"already."
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:31
msgid "**detail_level**"
msgstr ""

#: of xonsh.inspectors.Inspector.pinfo:18
msgid "if set to 1, more information is given."
msgstr ""

#: of xonsh.inspectors.Inspector.psource:2
msgid "Print the source code for an object."
msgstr ""

#: of xonsh.inspectors.call_tip:2
msgid "Extract call tip data from an oinfo dict."
msgstr ""

#: of xonsh.inspectors.call_tip:8
msgid "**oinfo**"
msgstr ""

#: of xonsh.inspectors.call_tip:12
msgid "**format_call**"
msgstr ""

#: of xonsh.inspectors.call_tip:11
msgid ""
"If True, the call line is formatted and returned as a string.  If not, a "
"tuple of (name, argspec) is returned."
msgstr ""

#: of xonsh.inspectors.call_tip:19
msgid "**call_info**"
msgstr ""

#: of xonsh.inspectors.call_tip:18
msgid "None, str or (str, dict) tuple."
msgstr ""

#: of xonsh.inspectors.call_tip:17
msgid ""
"When format_call is True, the whole call information is formatted as a "
"single string.  Otherwise, the object's name and its argspec dict are "
"returned.  If no call information is available, None is returned."
msgstr ""

#: of xonsh.inspectors.call_tip:22
msgid ""
"The most relevant docstring for calling purposes is returned, if "
"available.  The priority is: call docstring for callable instances, then "
"constructor docstring for classes, then main object's docstring otherwise"
" (regular functions)."
msgstr ""

#: of xonsh.inspectors.find_file:2
msgid "Find the absolute path to the file where an object was defined."
msgstr ""

#: of xonsh.inspectors.find_file:4
msgid "This is essentially a robust wrapper around `inspect.getabsfile`."
msgstr ""

#: of xonsh.inspectors.find_file:6 xonsh.inspectors.find_source_lines:6
msgid "Returns None if no file can be found."
msgstr ""

#: of xonsh.inspectors.find_file:10 xonsh.inspectors.find_source_lines:10
msgid "any Python object"
msgstr ""

#: of xonsh.inspectors.find_file:28 xonsh.lexer.Lexer:40
msgid "**fname**"
msgstr ""

#: of xonsh.inspectors.find_file:16
msgid "The absolute path to the file where the object was defined."
msgstr ""

#: of xonsh.inspectors.find_source_lines:2
msgid "Find the line number in a file where an object was defined."
msgstr ""

#: of xonsh.inspectors.find_source_lines:4
msgid "This is essentially a robust wrapper around `inspect.getsourcelines`."
msgstr ""

#: of xonsh.inspectors.find_source_lines:28 xonsh.lexer.Lexer:47
msgid "**lineno**"
msgstr ""

#: of xonsh.inspectors.find_source_lines:16
msgid "The line number where the object definition starts."
msgstr ""

#: of xonsh.inspectors.format_argspec:2
msgid "Format argspect, convenience wrapper around inspect's."
msgstr ""

#: of xonsh.inspectors.format_argspec:4
msgid ""
"This takes a dict instead of ordered arguments and calls "
"inspect.format_argspec with the arguments in the necessary order."
msgstr ""

#: of xonsh.inspectors.get_encoding:2
msgid "Get encoding for python source file defining obj"
msgstr ""

#: of xonsh.inspectors.get_encoding:4
msgid "Returns None if obj is not defined in a sourcefile."
msgstr ""

#: of xonsh.inspectors.getargspec:2
msgid ""
"Wrapper around :func:`inspect.getfullargspec` on Python 3, and "
":func:inspect.getargspec` on Python 2."
msgstr ""

#: of xonsh.inspectors.getargspec:5
msgid ""
"In addition to functions and methods, this can also handle objects with a"
" ``__call__`` attribute."
msgstr ""

#: of xonsh.inspectors.getdoc:2
msgid "Stable wrapper around inspect.getdoc."
msgstr ""

#: of xonsh.inspectors.getdoc:4
msgid "This can't crash because of attribute problems."
msgstr ""

#: of xonsh.inspectors.getdoc:6
msgid ""
"It also attempts to call a getdoc() method on the given object.  This "
"allows objects which provide their docstrings via non-standard mechanisms"
" (like Pyro proxies) to still be inspected by ipython's ? system."
msgstr ""

#: of xonsh.inspectors.getsource:2
msgid "Wrapper around inspect.getsource."
msgstr ""

#: of xonsh.inspectors.getsource:4
msgid ""
"This can be modified by other projects to provide customized source "
"extraction."
msgstr ""

#: of xonsh.inspectors.getsource:7
msgid "Inputs:"
msgstr ""

#: of xonsh.inspectors.getsource:9
msgid "obj: an object whose source code we will attempt to extract."
msgstr ""

#: of xonsh.inspectors.getsource:11
msgid "Optional inputs:"
msgstr ""

#: of xonsh.inspectors.getsource:13
msgid ""
"is_binary: whether the object is known to come from a binary source. This"
" implementation will skip returning any output for binary objects, but "
"custom extractors may know how to meaningfully process them."
msgstr ""

#: of xonsh.inspectors.is_simple_callable:2
msgid "True if obj is a function ()"
msgstr ""

#: of xonsh.inspectors.object_info:2
msgid "Make an object info dict with all fields present."
msgstr ""

#: ../../api/jobs.rst:5
msgid "Job Control (``xonsh.jobs``)"
msgstr ""

#: of xonsh.jobs:1
msgid "Job control for the xonsh shell."
msgstr ""

#: of xonsh.jobs.add_job:2
msgid "Add a new job to the jobs dictionary."
msgstr ""

#: of xonsh.jobs.bg:2
msgid "xonsh command: bg"
msgstr ""

#: of xonsh.jobs.bg:4
msgid ""
"Resume execution of the currently active job in the background, or, if a "
"single number is given as an argument, resume that job in the background."
msgstr ""

#: of xonsh.jobs.clean_jobs:2
msgid "Clean up jobs for exiting shell"
msgstr ""

#: of xonsh.jobs.clean_jobs:4
msgid "In non-interactive mode, kill all jobs."
msgstr ""

#: of xonsh.jobs.clean_jobs:6
msgid ""
"In interactive mode, check for suspended or background jobs, print a "
"warning if any exist, and return False. Otherwise, return True."
msgstr ""

#: of xonsh.jobs.fg:2
msgid "xonsh command: fg"
msgstr ""

#: of xonsh.jobs.fg:4
msgid ""
"Bring the currently active job to the foreground, or, if a single number "
"is given as an argument, bring that job to the foreground. Additionally, "
"specify \"+\" for the most recent job and \"-\" for the second most "
"recent job."
msgstr ""

#: of xonsh.jobs.get_next_job_number:2
msgid "Get the lowest available unique job number (for the next job created)."
msgstr ""

#: of xonsh.jobs.get_next_task:2
msgid "Get the next active task and put it on top of the queue"
msgstr ""

#: of xonsh.jobs.jobs:2
msgid "xonsh command: jobs"
msgstr ""

#: of xonsh.jobs.jobs:4
msgid "Display a list of all current jobs."
msgstr ""

#: of xonsh.jobs.kill_all_jobs:2
msgid "Send SIGKILL to all child processes (called when exiting xonsh)."
msgstr ""

#: of xonsh.jobs.print_one_job:2
msgid "Print a line describing job number ``num``."
msgstr ""

#: of xonsh.jobs.resume_job:2
msgid ""
"used by fg and bg to resume a job either in the foreground or in the "
"background."
msgstr ""

#: of xonsh.jobs.wait_for_active_job:2
msgid ""
"Wait for the active job to finish, to be killed by SIGINT, or to be "
"suspended by ctrl-z."
msgstr ""

#: ../../api/jsonutils.rst:5
msgid "JSON Utilities (``xonsh.jsonutils``)"
msgstr ""

#: of xonsh.jsonutils:1
msgid ""
"Custom tools for managing JSON serialization / deserialization of xonsh "
"objects."
msgstr ""

#: of xonsh.jsonutils.serialize_xonsh_json:2
msgid ""
"JSON serializer for xonsh custom data structures. This is only called "
"when another normal JSON types are not found."
msgstr ""

#: ../../api/jupyter_kernel.rst:5
msgid "Jupyter Kernel (``xonsh.jupyter_kernel``)"
msgstr ""

#: of xonsh.jupyter_kernel:1
msgid "Hooks for Jupyter Xonsh Kernel."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:2
msgid "Xonsh xernal for Jupyter"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:28
msgid "Integer from 0 (no debugging) to 3 (all debugging), default: 0."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:32
msgid "**session_id**"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:31
msgid ""
"Unique string id representing the kernel session. If None, this will be "
"replaced with a random UUID."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:50
msgid "**config**"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel:35
msgid ""
"Configuration dictionary to start server with. BY default will search the"
" command line for options (if given) or use default configuration."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.control_handler:2
msgid "Handles control requests"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.deserialize_wire_message:2
msgid "Split the routing prefix and message frames from a message on the wire"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.do_complete:2
msgid "Get completions."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.do_execute:2
msgid "Execute user code."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.dprint:2
msgid "Print but with debug information."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.handle_complete_request:2
#: xonsh.jupyter_kernel.XonshKernel.handle_kernel_info_request:2
msgid "Handles kernel info requests."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.handle_execute_request:2
msgid "Handle execute request messages."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.heartbeat_loop:2
msgid "Run heartbeat"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.iopub_handler:2
msgid "Handles iopub requests."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.make_default_config:2
msgid "Provides default configuration"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.new_header:2
msgid "Make a new header"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.run_thread:2
msgid "Run main thread"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.send:2
msgid "Send data to the client via a stream"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.shell_handler:2
msgid "Dispatch shell messages to their handlers"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.shutdown:2
msgid "Shutsdown the kernel"
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.sign:2
msgid "Sign a message list with a secure signature."
msgstr ""

#: of xonsh.jupyter_kernel.XonshKernel.start:2
msgid "Starts the server"
msgstr ""

#: of xonsh.jupyter_kernel.bind:2
msgid "Binds a socket to a port, or a random port if needed. Returns the port."
msgstr ""

#: of xonsh.jupyter_kernel.dump_bytes:2
msgid "Converts an object to JSON and returns the bytes."
msgstr ""

#: of xonsh.jupyter_kernel.load_bytes:2
msgid "Converts bytes of JSON to an object."
msgstr ""

#: ../../api/jupyter_shell.rst:5
msgid "Jupyter Shell (``xonsh.jupyter_shell``)"
msgstr ""

#: of xonsh.jupyter_shell:1
msgid "An interactive shell for the Jupyter kernel."
msgstr ""

#: of xonsh.jupyter_shell.JupyterShell:2
msgid "A shell for the Jupyter kernel."
msgstr ""

#: of xonsh.jupyter_shell.JupyterShell.default:2
msgid "Executes code, but redirects output to Jupyter client"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:2
msgid "Redirects a standard I/O stream to the Jupyter kernel."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:28
msgid "The name of the buffer in the sys module, e.g. 'stdout'."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:31
msgid "**kernel**"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:30
msgid "XonshKernel"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:31
msgid "Instance of a Jupyter kernel"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:47
msgid "**parent_header**"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect:34
msgid "parent header information to pass along with the kernel"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.close:2
msgid "Restores the original std stream."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.detach:2
msgid "This operation is not supported."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.fileno:2
msgid "Tunnel fileno() calls to the std stream."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.flush:2
msgid "Flushes kernel iopub_stream."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.read:2
msgid "Read from the stream"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.readline:2
msgid "Read a line."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.seek:2
msgid "Seek to a location."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.truncate:2
msgid "Truncate the streams."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.write:2
msgid "Writes data to the original kernel stream."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.encoding:2
msgid "The encoding of the stream"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.errors:2
msgid "The encoding errors of the stream"
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirect.newlines:2
msgid "The newlines of the standard buffer."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf:2
msgid "Redirects standard I/O buffers to the Jupyter kernel."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf.fileno:2
msgid "Returns the file descriptor of the std buffer."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf.readinto:2
msgid "Read bytes into buffer from both streams."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf.seek:2
msgid "Sets the location in both the stdbuf and the membuf."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf.truncate:2
msgid "Truncate both buffers."
msgstr ""

#: of xonsh.jupyter_shell.StdJupyterRedirectBuf.write:2
msgid "Write bytes to kernel."
msgstr ""

#: ../../api/lazyasd.rst:5
msgid "Lazy & Self-destructive Objects (``xonsh.lazyasd``)"
msgstr ""

#: of xonsh.lazyasd:1
msgid "Lazy and self destructive containers for speeding up module import."
msgstr ""

#: of xonsh.lazyasd.BackgroundModuleLoader:2
msgid "Thread to load modules in the background."
msgstr ""

#: of xonsh.lazyasd.BackgroundModuleProxy:2
msgid ""
"Proxy object for modules loaded in the background that block attribute "
"access until the module is loaded.."
msgstr ""

#: of xonsh.lazyasd.LazyBool:2
msgid ""
"Boolean like object that lazily computes it boolean value when it is "
"first asked. Once loaded, this result will replace itself in the provided"
" context (typically the globals of the call site) with the given name."
msgstr ""

#: of xonsh.lazyasd.LazyBool:7
msgid ""
"For example, you can prevent the complex boolean until it is actually "
"used::"
msgstr ""

#: of xonsh.lazyasd.LazyBool:15 xonsh.lazyasd.LazyObject:15
msgid "**load**"
msgstr ""

#: of xonsh.lazyasd.LazyBool:14 xonsh.lazyasd.LazyObject:14
msgid "function with no arguments"
msgstr ""

#: of xonsh.lazyasd.LazyBool:15
msgid "A loader function that performs the actual boolean evaluation."
msgstr ""

#: of xonsh.lazyasd.LazyBool:18
msgid ""
"Context to replace the LazyBool instance in with the the fully loaded "
"mapping."
msgstr ""

#: of xonsh.lazyasd.LazyBool:22 xonsh.lazyasd.LazyDict:28
msgid ""
"Name in the context to give the loaded mapping. This *should* be the name"
" on the LHS of the assignment."
msgstr ""

#: of xonsh.lazyasd.LazyDict:2
msgid ""
"Dictionary like object that lazily loads its values from an initial dict "
"of key-loader function pairs.  Each key is loaded when its value is first"
" accessed. Once fully loaded, this object will replace itself in the "
"provided context (typically the globals of the call site) with the given "
"name."
msgstr ""

#: of xonsh.lazyasd.LazyDict:8
msgid ""
"For example, you can prevent the compilation of a bunch of regular "
"expressions until they are actually used::"
msgstr ""

#: of xonsh.lazyasd.LazyDict:21
msgid "**loaders**"
msgstr ""

#: of xonsh.lazyasd.LazyDict:20
msgid "Mapping of keys to functions with no arguments"
msgstr ""

#: of xonsh.lazyasd.LazyDict:20
msgid ""
"A mapping of loader function that performs the actual value construction "
"upon access."
msgstr ""

#: of xonsh.lazyasd.LazyDict:24
msgid ""
"Context to replace the LazyDict instance in with the the fully loaded "
"mapping."
msgstr ""

#: of xonsh.lazyasd.LazyObject:2
msgid ""
"Lazily loads an object via the load function the first time an attribute "
"is accessed. Once loaded it will replace itself in the provided context "
"(typically the globals of the call site) with the given name."
msgstr ""

#: of xonsh.lazyasd.LazyObject:7
msgid ""
"For example, you can prevent the compilation of a regular expression "
"until it is actually used::"
msgstr ""

#: of xonsh.lazyasd.LazyObject:15
msgid "A loader function that performs the actual object construction."
msgstr ""

#: of xonsh.lazyasd.LazyObject:18
msgid ""
"Context to replace the LazyObject instance in with the object returned by"
" load()."
msgstr ""

#: of xonsh.lazyasd.LazyObject:22
msgid ""
"Name in the context to give the loaded object. This *should* be the name "
"on the LHS of the assignment."
msgstr ""

#: of xonsh.lazyasd.lazybool:2
msgid "Decorator for constructing lazy booleans from a function."
msgstr ""

#: of xonsh.lazyasd.lazydict:2
msgid "Decorator for constructing lazy dicts from a function."
msgstr ""

#: of xonsh.lazyasd.lazyobject:2
msgid "Decorator for constructing lazy objects from a function."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:2
msgid "Entry point for loading modules in background thread."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:8
msgid "Module name to load in background thread."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:11
msgid "**package**"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:11
msgid "Package name, has the same meaning as in importlib.import_module()."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:14
msgid "**debug**"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:14
msgid "Debugging symbol name to look up in the environment."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:17
#: xonsh.lazyasd.load_module_in_background:23
msgid "Mapping or None, optional"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:17
msgid ""
"Environment this will default to __xonsh__.env, if available, and "
"os.environ otherwise."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:24
msgid "**replacements**"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:21
msgid ""
"Dictionary mapping fully qualified module names (eg foo.bar.baz) that "
"import the lazily loaded module, with the variable name in that module. "
"For example, suppose that foo.bar imports module a as b, this dict is "
"then {'foo.bar': 'b'}."
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:43
msgid "**module**"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:42
msgid "ModuleType"
msgstr ""

#: of xonsh.lazyasd.load_module_in_background:29
msgid ""
"This is either the original module that is found in sys.modules or a "
"proxy module that will block until delay attribute access until the "
"module is fully loaded."
msgstr ""

#: ../../api/lazyjson.rst:5
msgid "Lazy JSON Files (``xonsh.lazyjson``)"
msgstr ""

#: of xonsh.lazyjson:1
msgid "Implements a lazy JSON file class that wraps around json data."
msgstr ""

#: of xonsh.lazyjson.LJNode:2
msgid "A proxy node for JSON nodes. Acts as both sequence and mapping."
msgstr ""

#: of xonsh.lazyjson.LJNode:28
msgid "**offsets**"
msgstr ""

#: of xonsh.lazyjson.LJNode:27 xonsh.lazyjson.LJNode:30
msgid "dict, list, or int"
msgstr ""

#: of xonsh.lazyjson.LJNode:28
msgid "offsets of corresponding data structure, in bytes"
msgstr ""

#: of xonsh.lazyjson.LJNode:31
msgid "**sizes**"
msgstr ""

#: of xonsh.lazyjson.LJNode:31
msgid "sizes of corresponding data structure, in bytes"
msgstr ""

#: of xonsh.lazyjson.LJNode:47
msgid "**root**"
msgstr ""

#: of xonsh.lazyjson.LJNode:46
msgid "weakref.proxy of LazyJSON"
msgstr ""

#: of xonsh.lazyjson.LJNode:34
msgid "weakref back to root node, which should be a LazyJSON object."
msgstr ""

#: of xonsh.lazyjson.LJNode.load:2
msgid "Returns the Python data structure represented by the node."
msgstr ""

#: of xonsh.lazyjson.LazyJSON:2
msgid ""
"Represents a lazy json file. Can be used like a normal Python dict or "
"list."
msgstr ""

#: of xonsh.lazyjson.LazyJSON:29
msgid "JSON file to open."
msgstr ""

#: of xonsh.lazyjson.LazyJSON:32
msgid "Whether new file handle should be opened for each load."
msgstr ""

#: of xonsh.lazyjson.LazyJSON.close:2
msgid "Close the file handle, if appropriate."
msgstr ""

#: of xonsh.lazyjson.dumps:2
msgid "Dumps an object to JSON with an index."
msgstr ""

#: of xonsh.lazyjson.index:2
msgid "Creates an index for a JSON file."
msgstr ""

#: of xonsh.lazyjson.ljdump:2
msgid "Dumps an object to JSON file."
msgstr ""

#: ../../api/lexer.rst:5
msgid "Lexer (``xonsh.lexer``)"
msgstr ""

#: of xonsh.lexer:1
msgid "Lexer for xonsh code."
msgstr ""

#: of xonsh.lexer:3
msgid "Written using a hybrid of ``tokenize`` and PLY."
msgstr ""

#: of xonsh.lexer.Lexer:2
msgid "Implements a lexer for the xonsh language."
msgstr ""

#: of xonsh.lexer.Lexer:40
msgid "Filename"
msgstr ""

#: of xonsh.lexer.Lexer:43
msgid "**last**"
msgstr ""

#: of xonsh.lexer.Lexer:42
msgid "token"
msgstr ""

#: of xonsh.lexer.Lexer:43
msgid "The last token seen."
msgstr ""

#: of xonsh.lexer.Lexer:46
msgid "The last line number seen."
msgstr ""

#: of xonsh.lexer.Lexer.build:2
msgid "Part of the PLY lexer API."
msgstr ""

#: of xonsh.lexer.Lexer.input:2
msgid "Calls the lexer on the string s."
msgstr ""

#: of xonsh.lexer.Lexer.split:2
msgid ""
"Splits a string into a list of strings which are whitespace-separated "
"tokens."
msgstr ""

#: of xonsh.lexer.Lexer.token:2
msgid "Retrieves the next token."
msgstr ""

#: of xonsh.lexer.get_tokens:2
msgid ""
"Given a string containing xonsh code, generates a stream of relevant PLY "
"tokens using ``handle_token``."
msgstr ""

#: of xonsh.lexer.handle_error_linecont:2
msgid ""
"Function for handling special line continuations as whitespace characters"
" in subprocess mode."
msgstr ""

#: of xonsh.lexer.handle_error_space:2
msgid "Function for handling special whitespace characters in subprocess mode"
msgstr ""

#: of xonsh.lexer.handle_error_token:2
msgid "Function for handling error tokens"
msgstr ""

#: of xonsh.lexer.handle_ignore:2
msgid "Function for handling tokens that should be ignored"
msgstr ""

#: of xonsh.lexer.handle_name:2
msgid "Function for handling name tokens"
msgstr ""

#: of xonsh.lexer.handle_rbrace:2
msgid "Function for handling ``}``"
msgstr ""

#: of xonsh.lexer.handle_rbracket:2
msgid "Function for handling ``]``"
msgstr ""

#: of xonsh.lexer.handle_rparen:2
msgid "Function for handling ``)``"
msgstr ""

#: of xonsh.lexer.handle_token:2
msgid ""
"General-purpose token handler.  Makes use of ``token_map`` or "
"``special_map`` to yield one or more PLY tokens from the given input."
msgstr ""

#: of xonsh.lexer.handle_token:11
msgid "**state :**"
msgstr ""

#: of xonsh.lexer.handle_token:9
msgid ""
"The current state of the lexer, including information about whether we "
"are in Python mode or subprocess mode, which changes the lexer's "
"behavior.  Also includes the stream of tokens yet to be considered."
msgstr ""

#: of xonsh.lexer.handle_token:27
msgid "**token :**"
msgstr ""

#: of xonsh.lexer.handle_token:14
msgid "The token (from ``tokenize``) currently under consideration"
msgstr ""

#: ../../api/lib/index.rst:5
msgid "Xonsh Standard Library"
msgstr ""

#: ../../api/lib/index.rst:6
msgid ""
"Tools for using xonsh functionality outside of xonsh. This is largely "
"written in xonsh itself."
msgstr ""

#: ../../api/lib/os.rst:5
msgid "Operating System Tools (``xonsh.lib.os``)"
msgstr ""

#: ../../docstring of xonsh.lib.os:1
msgid ""
"Xonsh extension of the standard library os module, using xonsh for "
"subprocess calls"
msgstr ""

#: ../../docstring of xonsh.lib.os.indir:2
msgid "Context manager for temporarily entering into a directory."
msgstr ""

#: ../../docstring of xonsh.lib.os.rmtree:2
msgid ""
"Remove a directory, even if it has read-only files (Windows). Git creates"
" read-only files that must be removed on teardown. See "
"https://stackoverflow.com/questions/2656322  for more info."
msgstr ""

#: ../../docstring of xonsh.lib.os.rmtree:10
msgid "**dirname**"
msgstr ""

#: ../../docstring of xonsh.lib.os.rmtree:10
msgid "Directory to be removed"
msgstr ""

#: ../../docstring of xonsh.lib.os.rmtree:26
msgid "**force**"
msgstr ""

#: ../../docstring of xonsh.lib.os.rmtree:13
msgid "If True force removal, defaults to False"
msgstr ""

#: ../../api/lib/subprocess.rst:5
msgid "Subprocesses (``xonsh.lib.subrpocess``)"
msgstr ""

#: ../../docstring of xonsh.lib.subprocess:1
msgid ""
"Xonsh extension of the standard library subprocess module, using xonsh "
"for subprocess calls"
msgstr ""

#: ../../docstring of xonsh.lib.subprocess.check_call:2
msgid "Drop in replacement for ``subprocess.check_call`` like functionality"
msgstr ""

#: ../../docstring of xonsh.lib.subprocess.check_output:2
msgid "Drop in replacement for ``subprocess.check_output`` like functionality"
msgstr ""

#: ../../docstring of xonsh.lib.subprocess.run:2
msgid "Drop in replacement for ``subprocess.run`` like functionality"
msgstr ""

#: ../../api/main.rst:5
msgid "Command Line Interface (``xonsh.main``)"
msgstr ""

#: of xonsh.main:1
msgid "The main xonsh script."
msgstr ""

#: of xonsh.main.XonshMode:2
msgid "An enumeration."
msgstr ""

#: of xonsh.main.get_setproctitle:2
msgid "Proxy function for loading process title"
msgstr ""

#: of xonsh.main.main_context:2
msgid ""
"Generator that runs pre- and post-main() functions. This has two "
"iterations. The first yields the shell. The second returns None but "
"cleans up the shell."
msgstr ""

#: of xonsh.main.main_xonsh:2
msgid "Main entry point for xonsh cli."
msgstr ""

#: of xonsh.main.path_argument:2
msgid "Return a path only if the path is actually legal"
msgstr ""

#: of xonsh.main.path_argument:4
msgid ""
"This is very similar to argparse.FileType, except that it doesn't return "
"an open file handle, but rather simply validates the path."
msgstr ""

#: of xonsh.main.postmain:2
msgid "Teardown for main xonsh entry point, accepts parsed arguments."
msgstr ""

#: of xonsh.main.premain:2
msgid "Setup for main xonsh entry point. Returns parsed arguments."
msgstr ""

#: of xonsh.main.setup:2
msgid ""
"Starts up a new xonsh shell. Calling this in function in another packages"
" __init__.py will allow xonsh to be fully used in the package in headless"
" or headed mode. This function is primarily indended to make starting up "
"xonsh for 3rd party packages easier."
msgstr ""

#: of xonsh.main.setup:11
msgid "dict-like or None, optional"
msgstr ""

#: of xonsh.main.setup:11
msgid "The xonsh context to start with. If None, an empty dictionary is provided."
msgstr ""

#: of xonsh.main.setup:16 xonsh.shell.Shell:53
msgid "**shell_type**"
msgstr ""

#: of xonsh.main.setup:15
msgid ""
"The type of shell to start. By default this is 'none', indicating we "
"should start in headless mode."
msgstr ""

#: of xonsh.main.setup:19 xonsh.main.setup:22 xonsh.main.setup:41
msgid "dict-like, optional"
msgstr ""

#: of xonsh.main.setup:19
msgid ""
"Environment to update the current environment with after the shell has "
"been initialized."
msgstr ""

#: of xonsh.main.setup:23
msgid "Aliases to add after the shell has been initialized."
msgstr ""

#: of xonsh.main.setup:26
msgid "**xontribs**"
msgstr ""

#: of xonsh.main.setup:25
msgid "iterable of str, optional"
msgstr ""

#: of xonsh.main.setup:26
msgid "Xontrib names to load."
msgstr ""

#: of xonsh.main.setup:42
msgid "**threadable_predictors**"
msgstr ""

#: of xonsh.main.setup:29
msgid "Threadable predictors to start up with. These overide the defaults."
msgstr ""

#: of xonsh.main.start_services:2
msgid ""
"Starts up the essential services in the proper order. This returns the "
"environment instance as a convenience."
msgstr ""

#: ../../api/mplhooks.rst:5
msgid "Matplotlib Hooks (``xontrib.mplhooks``)"
msgstr ""

#: of xontrib.mplhooks:1
msgid "Matplotlib hooks, for what its worth."
msgstr ""

#: of xontrib.mplhooks.buf_to_color_str:2
msgid "Converts an RGB array to a xonsh color string."
msgstr ""

#: of xontrib.mplhooks.display_figure_with_iterm2:2
msgid "Displays a matplotlib figure using iterm2 inline-image escape sequence."
msgstr ""

#: of xontrib.mplhooks.display_figure_with_iterm2:21
#: xontrib.mplhooks.figure_to_rgb_array:8
#: xontrib.mplhooks.figure_to_tight_array:8
msgid "**fig**"
msgstr ""

#: of xontrib.mplhooks.display_figure_with_iterm2:20
#: xontrib.mplhooks.figure_to_rgb_array:7
#: xontrib.mplhooks.figure_to_tight_array:7
msgid "matplotlib.figure.Figure"
msgstr ""

#: of xontrib.mplhooks.display_figure_with_iterm2:8
#: xontrib.mplhooks.figure_to_rgb_array:8
#: xontrib.mplhooks.figure_to_tight_array:8
msgid "the figure to be plotted"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:2
msgid "Converts figure to a numpy array"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:12
msgid "**shape**"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:11
msgid ""
"with the shape of the output array. by default this attempts to use the "
"pixel height and width of the figure"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:17
#: xontrib.mplhooks.figure_to_tight_array:35
msgid "**array**"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:16
#: xontrib.mplhooks.figure_to_tight_array:34
msgid "np.ndarray"
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:17
#: xontrib.mplhooks.figure_to_tight_array:23
msgid "An RGBA array of the image represented by the figure."
msgstr ""

#: of xontrib.mplhooks.figure_to_rgb_array:32
msgid "Note: the method will throw an exception if the given shape is wrong."
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:2
msgid "Converts figure to a numpy array of rgb values of tight value"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:11
msgid "**width**"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:11
msgid "pixel width of the final array"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:14
msgid "**height**"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:14
msgid "pixel height of the final array"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:18
msgid "**minimal**"
msgstr ""

#: of xontrib.mplhooks.figure_to_tight_array:17
msgid ""
"whether or not to reduce the output array to minimized margins/whitespace"
" text is also eliminated"
msgstr ""

#: of xontrib.mplhooks.show:2
msgid "Run the mpl display sequence by printing the most recent figure to console"
msgstr ""

#: ../../api/openpy.rst:5
msgid "Open Python Files (``xonsh.openpy``)"
msgstr ""

#: of xonsh.openpy:1
msgid "Tools to open ``*.py`` files as Unicode."
msgstr ""

#: of xonsh.openpy:3
msgid "Uses the encoding specified within the file, as per PEP 263."
msgstr ""

#: of xonsh.openpy:5
msgid "Much of the code is taken from the tokenize module in Python 3.2."
msgstr ""

#: of xonsh.openpy.read_py_file:2
msgid "Read a Python file, using the encoding declared inside the file."
msgstr ""

#: of xonsh.openpy.read_py_file:8
msgid "The path to the file to read."
msgstr ""

#: of xonsh.openpy.read_py_file:13 xonsh.openpy.read_py_url:17
msgid "**skip_encoding_cookie**"
msgstr ""

#: of xonsh.openpy.read_py_file:11 xonsh.openpy.read_py_url:15
msgid ""
"If True (the default), and the encoding declaration is found in the first"
" two lines, that line will be excluded from the output - compiling a "
"unicode string with an encoding declaration is a SyntaxError in Python 2."
msgstr ""

#: of xonsh.openpy.read_py_file:30 xonsh.openpy.read_py_url:34
msgid "A unicode string containing the contents of the file."
msgstr ""

#: of xonsh.openpy.read_py_url:2
msgid ""
"Read a Python file from a URL, using the encoding declared inside the "
"file."
msgstr ""

#: of xonsh.openpy.read_py_url:8
msgid "**url**"
msgstr ""

#: of xonsh.openpy.read_py_url:8
msgid "The URL from which to fetch the file."
msgstr ""

#: of xonsh.openpy.read_py_url:12 xonsh.proc.CommandPipeline:59
#: xonsh.proc.HiddenCommandPipeline:39
msgid "**errors**"
msgstr ""

#: of xonsh.openpy.read_py_url:11
msgid ""
"How to handle decoding errors in the file. Options are the same as for "
"bytes.decode(), but here 'replace' is the default."
msgstr ""

#: of xonsh.openpy.source_to_unicode:2
msgid "Converts a bytes string with python source code to unicode."
msgstr ""

#: of xonsh.openpy.source_to_unicode:4
msgid ""
"Unicode strings are passed through unchanged. Byte strings are checked "
"for the python source file encoding cookie to determine encoding. txt can"
" be either a bytes buffer or a string containing the source code."
msgstr ""

#: of xonsh.openpy.strip_encoding_cookie:2
msgid ""
"Generator to pull lines from a text-mode file, skipping the encoding "
"cookie if it is found in the first two lines."
msgstr ""

#: ../../api/parser.rst:5
msgid "Parser (``xonsh.parser``)"
msgstr ""

#: of xonsh.parser:1
msgid "Implements the xonsh parser."
msgstr ""

#: ../../api/platform.rst:4
msgid "Platform-specific constants and implementations (``xonsh.platform``)"
msgstr ""

#: of xonsh.platform:1
msgid ""
"Module for platform-specific constants and implementations, as well as "
"compatibility layers to make use of the 'best' implementation available "
"on a platform."
msgstr ""

#: of xonsh.platform.pathbasename:2
msgid ""
"This is a safe version of os.path.basename(), which does not work on "
"input without a drive.  This version does."
msgstr ""

#: of xonsh.platform.pathsplit:2
msgid ""
"This is a safe version of os.path.split(), which does not work on input "
"without a drive."
msgstr ""

#: of xonsh.platform.windows_expanduser:2
msgid ""
"A Windows-specific expanduser() function for xonsh. This is needed since "
"os.path.expanduser() does not check on Windows if the user actually "
"exists. This restricts expanding the '~' if it is not followed by a "
"separator. That is only '~/' and '~' are expanded."
msgstr ""

#: of xonsh.platform.CAN_RESIZE_WINDOW:2
msgid ""
"``True`` if we can resize terminal window, as provided by the presense of"
" signal.SIGWINCH, else ``False``."
msgstr ""

#: of xonsh.platform.DEFAULT_ENCODING:2
msgid "Default string encoding."
msgstr ""

#: of xonsh.platform.ON_ANACONDA:2
msgid "``True`` if executed in an Anaconda instance, else ``False``."
msgstr ""

#: of xonsh.platform.ON_CYGWIN:2
msgid "``True`` if executed on a Cygwin Windows platform, else ``False``."
msgstr ""

#: of xonsh.platform.ON_DARWIN:2
msgid "``True`` if executed on a Darwin platform, else ``False``."
msgstr ""

#: of xonsh.platform.ON_DRAGONFLY:2
msgid "``True`` if on a DragonFly BSD operating system, else ``False``."
msgstr ""

#: of xonsh.platform.ON_FREEBSD:2
msgid "``True`` if on a FreeBSD operating system, else ``False``."
msgstr ""

#: of xonsh.platform.ON_LINUX:2
msgid "``True`` if executed on a Linux platform, else ``False``."
msgstr ""

#: of xonsh.platform.ON_MSYS:2
msgid "``True`` if executed on a MSYS Windows platform, else ``False``."
msgstr ""

#: of xonsh.platform.ON_NETBSD:2
msgid "``True`` if on a NetBSD operating system, else ``False``."
msgstr ""

#: of xonsh.platform.ON_POSIX:2
msgid "``True`` if executed on a POSIX-compliant platform, else ``False``."
msgstr ""

#: of xonsh.platform.ON_WINDOWS:2
msgid "``True`` if executed on a native Windows platform, else ``False``."
msgstr ""

#: of xonsh.platform.PYTHON_VERSION_INFO:2
msgid "Version of Python interpreter as three-value tuple."
msgstr ""

#: of xonsh.platform.bash_command:2
msgid "Determines the command for Bash on the current platform."
msgstr ""

#: of xonsh.platform.git_for_windows_path:2
msgid "Returns the path to git for windows, if available and None otherwise."
msgstr ""

#: of xonsh.platform.githash:2
msgid "Returns a tuple contains two strings: the hash and the date."
msgstr ""

#: of xonsh.platform.has_prompt_toolkit:2
msgid "Tests if the `prompt_toolkit` is available."
msgstr ""

#: of xonsh.platform.is_readline_available:2
msgid "Checks if readline is available to import."
msgstr ""

#: of xonsh.platform.linux_distro:2
msgid ""
"The id of the Linux distribution running on, possibly 'unknown'. None on "
"non-Linux platforms."
msgstr ""

#: of xonsh.platform.ptk_shell_type:2
msgid "Returns the prompt_toolkit shell type based on the installed version."
msgstr ""

#: of xonsh.platform.ptk_version:2
msgid "Returns `prompt_toolkit.__version__` if available, else ``None``."
msgstr ""

#: of xonsh.platform.ptk_version_info:2
msgid "Returns `prompt_toolkit`'s version as tuple of integers."
msgstr ""

#: of xonsh.platform.pygments_version:2
msgid "pygments.__version__ version if available, else None."
msgstr ""

#: of xonsh.platform.pygments_version_info:2
msgid "Returns `pygments`'s version as tuple of integers."
msgstr ""

#: of xonsh.platform.windows_bash_command:2
msgid "Determines the command for Bash on windows."
msgstr ""

#: ../../api/platform.rst:13
msgid ""
"This is either `os.scandir` on Python 3.5+ or a function providing a "
"compatibility layer for it. It is recommended for iterations over "
"directory entries at a significantly higher speed than `os.listdir` on "
"Python 3.5+. It also caches properties that are commonly used for "
"filtering."
msgstr ""

#: ../../api/platform.rst:19
msgid "The path to scan for entries."
msgstr ""

#: ../../api/platform.rst:20
msgid "A generator yielding `DirEntry` instances."
msgstr ""

#: ../../api/pretty.rst:5
msgid "Pretty printing (``xonsh.pretty``)"
msgstr ""

#: of xonsh.pretty:1
msgid ""
"Python advanced pretty printer.  This pretty printer is intended to "
"replace the old `pprint` python module which does not allow developers to"
" provide their own pretty print callbacks."
msgstr ""

#: of xonsh.pretty:5
msgid "This module is based on ruby's `prettyprint.rb` library by `Tanaka Akira`."
msgstr ""

#: of xonsh.pretty:7
msgid ""
"The following implementations were forked from the IPython project: * "
"Copyright (c) 2008-2014, IPython Development Team * Copyright (C) "
"2001-2007 Fernando Perez <fperez@colorado.edu> * Copyright (c) 2001, "
"Janko Hauser <jhauser@zscout.de> * Copyright (c) 2001, Nathaniel Gray "
"<n8gray@caltech.edu>"
msgstr ""

#: of xonsh.pretty:14
msgid "Example Usage"
msgstr ""

#: of xonsh.pretty:16
msgid "To directly print the representation of an object use `pprint`::"
msgstr ""

#: of xonsh.pretty:21
msgid "To get a string of the output use `pretty`::"
msgstr ""

#: of xonsh.pretty:28
msgid "Extending"
msgstr ""

#: of xonsh.pretty:30
msgid ""
"The pretty library allows developers to add pretty printing rules for "
"their own objects.  This process is straightforward.  All you have to do "
"is to add a `_repr_pretty_` method to your object and call the methods on"
" the pretty printer passed::"
msgstr ""

#: of xonsh.pretty:40
msgid ""
"Here is an example implementation of a `_repr_pretty_` method for a list "
"subclass::"
msgstr ""

#: of xonsh.pretty:56
msgid ""
"The `cycle` parameter is `True` if pretty detected a cycle.  You *have* "
"to react to that or the result is an infinite loop.  `p.text()` just adds"
" non breaking text to the output, `p.breakable()` either adds a "
"whitespace or breaks here.  If you pass it an argument it's used instead "
"of the default space.  `p.pretty` prettyprints another object using the "
"pretty print method."
msgstr ""

#: of xonsh.pretty:63
msgid ""
"The first parameter to the `group` function specifies the extra "
"indentation of the next line.  In this example the next item will either "
"be on the same line (if the items are short enough) or aligned with the "
"right edge of the opening bracket of `MyList`."
msgstr ""

#: of xonsh.pretty:68
msgid ""
"If you just want to indent something you can use the group function "
"without open / close parameters.  You can also use this code::"
msgstr ""

#: of xonsh.pretty
msgid "copyright"
msgstr ""

#: of xonsh.pretty:75
msgid "2007 by Armin Ronacher. Portions (c) 2009 by Robert Kern."
msgstr ""

#: of xonsh.pretty
msgid "license"
msgstr ""

#: of xonsh.pretty:77
msgid "BSD License."
msgstr ""

#: of xonsh.pretty.PrettyPrinter:2
msgid ""
"Baseclass for the `RepresentationPrinter` prettyprinter that is used to "
"generate pretty reprs of objects.  Contrary to the "
"`RepresentationPrinter` this printer knows nothing about the default "
"pprinters or the `_repr_pretty_` callback method."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:2
msgid ""
"Begin a group.  If you want support for python < 2.5 which doesn't has "
"the with statement this is the preferred way:"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:5
msgid "p.begin_group(1, '{') ... p.end_group(1, '}')"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:9
msgid "The python 2.5 expression would be this:"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:12
msgid "with p.group(1, '{', '}'):"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:12
msgid "..."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:14
msgid ""
"The first parameter specifies the indentation for the next line (usually "
"the width of the opening text), the second the opening text.  All "
"parameters are optional."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.break_:2
msgid ""
"Explicitly insert a newline into the output, maintaining correct "
"indentation."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.breakable:2
msgid ""
"Add a breakable separator to the output.  This does not mean that it will"
" automatically break here.  If no breaking on this position takes place "
"the `sep` is inserted which default to one space."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.end_group:2
msgid "End a group. See `begin_group` for more details."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.flush:2
msgid "Flush data that is left in the buffer."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.text:2
msgid "Add literal text to the output."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:2
msgid ""
"Special pretty printer that has a `pretty` method that calls the pretty "
"printer for a python object."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:5
msgid ""
"This class stores processing data on `self` so you must *never* use this "
"class in a threaded environment.  Always lock it or reinstantiate it."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:9
msgid ""
"Instances also have a verbose flag callbacks can access to control their "
"output.  For example the default instance repr prints all attributes and "
"methods that are not prefixed by an underscore if the printer is in "
"verbose mode."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter.pretty:2
msgid "Pretty print the given object."
msgstr ""

#: of xonsh.pretty.pretty:2
msgid "Pretty print the object's representation."
msgstr ""

#: of xonsh.pretty.pretty_print:2
msgid "Like pretty() but print to stdout."
msgstr ""

#: of xonsh.pretty.for_type:2
msgid "Add a pretty printer for a given type."
msgstr ""

#: of xonsh.pretty.for_type_by_name:2
msgid ""
"Add a pretty printer for a type specified by the module and name of a "
"type rather than the type object itself."
msgstr ""

#: ../../api/proc.rst:5
msgid "Python Procedures as Subprocess Commands (``xonsh.proc``)"
msgstr ""

#: of xonsh.proc:1
msgid "Interface for running Python functions as subprocess-mode commands."
msgstr ""

#: of xonsh.proc:3
msgid ""
"Code for several helper methods in the `ProcProxy` class have been "
"reproduced without modification from `subprocess.py` in the Python 3.4.2 "
"standard library. The contents of `subprocess.py` (and, thus, the "
"reproduced methods) are Copyright (c) 2003-2005 by Peter Astrand "
"<astrand@lysator.liu.se> and were licensed to the Python Software "
"foundation under a Contributor Agreement."
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:2
msgid "Buffered, parallel background thread reader."
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:28
#: xonsh.proc.ConsoleParallelReader:30 xonsh.proc.NonBlockingFDReader:30
#: xonsh.proc.QueueReader:28
msgid "**fd**"
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:28
msgid "File descriptor from which to read."
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:32
#: xonsh.proc.ConsoleParallelReader:33
msgid "**buffer**"
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:31
msgid "binary file-like or None, optional"
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:31
msgid "A buffer to write bytes into. If None, a new BytesIO object is created."
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:48
#: xonsh.proc.ConsoleParallelReader:36
msgid "**chunksize**"
msgstr ""

#: of xonsh.proc.BufferedFDParallelReader:35
#: xonsh.proc.ConsoleParallelReader:36
msgid "The max size of the parallel reads, default 1 kb."
msgstr ""

#: of xonsh.proc.CommandPipeline:2
msgid "Represents a subprocess-mode command pipeline."
msgstr ""

#: of xonsh.proc.CommandPipeline:39 xonsh.proc.HiddenCommandPipeline:19
msgid "**specs**"
msgstr ""

#: of xonsh.proc.CommandPipeline:38 xonsh.proc.HiddenCommandPipeline:18
msgid "list of SubprocSpec"
msgstr ""

#: of xonsh.proc.CommandPipeline:28 xonsh.proc.HiddenCommandPipeline:8
msgid "Process specifications"
msgstr ""

#: of xonsh.proc.CommandPipeline:44 xonsh.proc.HiddenCommandPipeline:24
msgid "**spec**"
msgstr ""

#: of xonsh.proc.CommandPipeline:43 xonsh.proc.HiddenCommandPipeline:23
msgid "SubprocSpec"
msgstr ""

#: of xonsh.proc.CommandPipeline:44 xonsh.proc.HiddenCommandPipeline:24
msgid "The last specification in specs"
msgstr ""

#: of xonsh.proc.CommandPipeline:47 xonsh.proc.HiddenCommandPipeline:27
msgid "**proc**"
msgstr ""

#: of xonsh.proc.CommandPipeline:47 xonsh.proc.HiddenCommandPipeline:27
msgid "The process in procs"
msgstr ""

#: of xonsh.proc.CommandPipeline:50 xonsh.proc.HiddenCommandPipeline:30
msgid "**ended**"
msgstr ""

#: of xonsh.proc.CommandPipeline:50 xonsh.proc.HiddenCommandPipeline:30
msgid "Boolean for if the command has stopped executing."
msgstr ""

#: of xonsh.proc.CommandPipeline:53 xonsh.proc.HiddenCommandPipeline:33
msgid "A string of the standard input."
msgstr ""

#: of xonsh.proc.CommandPipeline:56 xonsh.proc.HiddenCommandPipeline:36
msgid ":obj:`output <output>`"
msgstr ""

#: of xonsh.proc.CommandPipeline:56 xonsh.proc.CommandPipeline.output:2
#: xonsh.proc.HiddenCommandPipeline:36
msgid "Non-blocking, lazy access to output"
msgstr ""

#: of xonsh.proc.CommandPipeline:59 xonsh.proc.HiddenCommandPipeline:39
msgid "A string of the standard error."
msgstr ""

#: of xonsh.proc.CommandPipeline:62 xonsh.proc.HiddenCommandPipeline:42
msgid "The output lines"
msgstr ""

#: of xonsh.proc.CommandPipeline:66 xonsh.proc.HiddenCommandPipeline:46
msgid "**starttime**"
msgstr ""

#: of xonsh.proc.CommandPipeline:65 xonsh.proc.HiddenCommandPipeline:45
msgid "floats or None"
msgstr ""

#: of xonsh.proc.CommandPipeline:65 xonsh.proc.HiddenCommandPipeline:45
msgid "Pipeline start timestamp."
msgstr ""

#: of xonsh.proc.CommandPipeline.end:2
msgid "End the pipeline, return the controlling terminal if needed."
msgstr ""

#: of xonsh.proc.CommandPipeline.end:4
msgid "Main things done in self._end()."
msgstr ""

#: of xonsh.proc.CommandPipeline.itercheck:2
msgid ""
"Iterates through the command lines and throws an error if the returncode "
"is non-zero."
msgstr ""

#: of xonsh.proc.CommandPipeline.iterraw:2
msgid "Iterates through the last stdout, and returns the lines exactly as found."
msgstr ""

#: of xonsh.proc.CommandPipeline.stream_stderr:2
msgid "Streams lines to sys.stderr and the errors attribute."
msgstr ""

#: of xonsh.proc.CommandPipeline.tee_stdout:2
msgid ""
"Writes the process stdout to the output variable, line-by-line, and "
"yields each line. This may optionally accept lines (in bytes) to iterate "
"over, in which case it does not call iterraw()."
msgstr ""

#: of xonsh.proc.CommandPipeline.alias:2
msgid "Alias the process used."
msgstr ""

#: of xonsh.proc.CommandPipeline.args:2
msgid "Arguments to the process."
msgstr ""

#: of xonsh.proc.CommandPipeline.err:2
msgid "Error messages as a string."
msgstr ""

#: of xonsh.proc.CommandPipeline.executed_cmd:2
msgid "The resolve and executed command."
msgstr ""

#: of xonsh.proc.CommandPipeline.inp:2
msgid "Creates normalized input string from args."
msgstr ""

#: of xonsh.proc.CommandPipeline.out:2
msgid "Output value as a str."
msgstr ""

#: of xonsh.proc.CommandPipeline.pid:2
msgid "Process identifier."
msgstr ""

#: of xonsh.proc.CommandPipeline.returncode:2
msgid "Process return code, waits until command is completed."
msgstr ""

#: of xonsh.proc.CommandPipeline.rtn:2
msgid "Alias to return code."
msgstr ""

#: of xonsh.proc.CommandPipeline.stderr:2
msgid "Process stderr."
msgstr ""

#: of xonsh.proc.CommandPipeline.stderr_postfix:2
msgid "Postfix to print after stderr, as bytes."
msgstr ""

#: of xonsh.proc.CommandPipeline.stderr_prefix:2
msgid "Prefix to print in front of stderr, as bytes."
msgstr ""

#: of xonsh.proc.CommandPipeline.stderr_redirect:2
msgid "Redirection used for stderr."
msgstr ""

#: of xonsh.proc.CommandPipeline.stdin:2
msgid "Process stdin."
msgstr ""

#: of xonsh.proc.CommandPipeline.stdin_redirect:2
msgid "Redirection used for stdin."
msgstr ""

#: of xonsh.proc.CommandPipeline.stdout:2
msgid "Process stdout."
msgstr ""

#: of xonsh.proc.CommandPipeline.stdout_redirect:2
msgid "Redirection used for stdout."
msgstr ""

#: of xonsh.proc.CommandPipeline.timestamps:2
msgid "The start and end time stamps."
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:2
msgid ""
"Parallel reader for consoles that runs in a background thread. This is "
"only needed, available, and useful on Windows."
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:29
msgid ""
"Standard buffer file descriptor, 0 for stdin, 1 for stdout (default), and"
" 2 for stderr."
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:32
msgid "ctypes.c_wchar_p, optional"
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:33
msgid "An existing buffer to (re-)use."
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:52 xonsh.proc.NonBlockingFDReader:46
#: xonsh.proc.QueueReader:44
msgid "**timeout**"
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:51
msgid "float, optional"
msgstr ""

#: of xonsh.proc.ConsoleParallelReader:39 xonsh.proc.NonBlockingFDReader:33
#: xonsh.proc.QueueReader:31
msgid "The queue reading timeout."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher:2
msgid ""
"Dispatches to different file handles depending on the current thread. "
"Useful if you want file operation to go to different places for different"
" threads."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher:41
msgid "file-like or None, optional"
msgstr ""

#: of xonsh.proc.FileThreadDispatcher:30
msgid ""
"The file handle to write to if a thread cannot be found in the registry. "
"If None, a new in-memory instance."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher:48
msgid "**registry**"
msgstr ""

#: of xonsh.proc.FileThreadDispatcher:47
msgid "Maps thread idents to file handles."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.close:2
msgid "Closes the current thread's handle."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.deregister:2
msgid "Removes the current thread from the registry."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.detach:2
msgid "Detaches the buffer for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.fileno:2
msgid "Returns the file descriptor for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.flush:2
msgid "Flushes the file descriptor for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.isatty:2
msgid "Returns if the file descriptor for the current thread is a tty."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.read:2
msgid "Reads from the handle for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.readable:2
msgid "Returns if file descriptor for the current thread is readable."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.readline:2
msgid "Reads a line from the handle for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.readlines:2
msgid "Reads lines from the handle for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.register:2
msgid ""
"Registers a file handle for the current thread. Returns self so that this"
" method can be used in a with-statement."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.seek:2
msgid "Seeks the current file."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.seekable:2
msgid "Returns if file descriptor for the current thread is seekable."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.tell:2
msgid "Reports the current position in the handle for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.truncate:2
msgid "Truncates the file for for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.writable:2
msgid "Returns if file descriptor for the current thread is writable."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.write:2
msgid ""
"Writes to this thread's handle. This also flushes, just to be extra sure "
"the string was written."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.writelines:2
msgid "Writes lines for the file descriptor for the current thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.available:2
msgid "True if the thread is available in the registry."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.buffer:2
msgid "Gets the buffer for this thread's handle."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.closed:2
msgid "Is the thread's handle closed."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.encoding:2
msgid "Gets the encoding for this thread's handle."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.errors:2
msgid "Gets the errors for this thread's handle."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.handle:2
msgid "Gets the current handle for the thread."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.line_buffering:2
msgid "Gets if line buffering for this thread's handle enabled."
msgstr ""

#: of xonsh.proc.FileThreadDispatcher.newlines:2
msgid "Gets the newlines for this thread's handle."
msgstr ""

#: of xonsh.proc.NonBlockingFDReader:2
msgid ""
"A class for reading characters from a file descriptor on a background "
"thread. This has the advantages that the calling thread can close the "
"file and that the reading does not block the calling thread."
msgstr ""

#: of xonsh.proc.NonBlockingFDReader:30 xonsh.proc.QueueReader:28
msgid "A file descriptor"
msgstr ""

#: of xonsh.proc.NonBlockingFDReader:45 xonsh.proc.QueueReader:43
msgid "float or None, optional"
msgstr ""

#: of xonsh.proc.PopenThread:2
msgid ""
"A thread for running and managing subprocess. This allows reading from "
"the stdin, stdout, and stderr streams in a non-blocking fashion."
msgstr ""

#: of xonsh.proc.PopenThread:5
msgid ""
"This takes the same arguments and keyword arguments as regular Popen. "
"This requires that the captured_stdout and captured_stderr attributes to "
"be set following instantiation."
msgstr ""

#: of xonsh.proc.PopenThread.kill:2
msgid "Dispatches to Popen.kill()."
msgstr ""

#: of xonsh.proc.PopenThread.poll:2
msgid "Dispatches to Popen.returncode."
msgstr ""

#: of xonsh.proc.PopenThread.run:2
msgid ""
"Runs the subprocess by performing a parallel read on stdin if allowed, "
"and copying bytes from captured_stdout to stdout and bytes from "
"captured_stderr to stderr."
msgstr ""

#: of xonsh.proc.PopenThread.send_signal:2
msgid "Dispatches to Popen.send_signal()."
msgstr ""

#: of xonsh.proc.PopenThread.terminate:2
msgid "Dispatches to Popen.terminate()."
msgstr ""

#: of xonsh.proc.PopenThread.wait:2
msgid ""
"Dispatches to Popen.wait(), but also does process cleanup such as joining"
" this thread and replacing the original window size signal handler."
msgstr ""

#: of xonsh.proc.PopenThread.returncode:2
msgid "Process return code."
msgstr ""

#: of xonsh.proc.PopenThread.signal:2
msgid "Process signal, or None."
msgstr ""

#: of xonsh.proc.PrevProcCloser:2
msgid ""
"Previous process closer thread for pipelines whose last command is itself"
" unthreadable. This makes sure that the pipeline is driven forward and "
"does not deadlock."
msgstr ""

#: of xonsh.proc.PrevProcCloser:43
msgid "**pipeline**"
msgstr ""

#: of xonsh.proc.PrevProcCloser:42
msgid "CommandPipeline"
msgstr ""

#: of xonsh.proc.PrevProcCloser:30
msgid "The pipeline whose prev procs we should close."
msgstr ""

#: of xonsh.proc.PrevProcCloser.run:2
msgid "Runs the closing algorithm."
msgstr ""

#: of xonsh.proc.ProcProxy:2
msgid ""
"This is process proxy class that runs its alias functions on the same "
"thread that it was called from, which is typically the main thread. This "
"prevents the process from running on a background thread, but enables "
"debugger and profiler tools (functions) be run on the same thread that "
"they are attempting to debug."
msgstr ""

#: of xonsh.proc.ProcProxy.poll:2
msgid "Check if the function has completed via the returncode or None."
msgstr ""

#: of xonsh.proc.ProcProxy.wait:2
msgid ""
"Runs the function and returns the result. Timeout argument only present "
"for API compatibility."
msgstr ""

#: of xonsh.proc.ProcProxyThread:2
msgid "Class representing a function to be run as a subprocess-mode command."
msgstr ""

#: of xonsh.proc.ProcProxyThread:28
msgid "The function to be executed."
msgstr ""

#: of xonsh.proc.ProcProxyThread:31
msgid "list"
msgstr ""

#: of xonsh.proc.ProcProxyThread:31
msgid ""
"A (possibly empty) list containing the arguments that were given on the "
"command line"
msgstr ""

#: of xonsh.proc.ProcProxyThread:37 xonsh.proc.ProcProxyThread:42
#: xonsh.proc.ProcProxyThread:47
msgid "file-like, optional"
msgstr ""

#: of xonsh.proc.ProcProxyThread:35
msgid ""
"A file-like object representing stdin (input can be read from here).  If "
"`stdin` is not provided or if it is explicitly set to `None`, then an "
"instance of `io.StringIO` representing an empty file is used."
msgstr ""

#: of xonsh.proc.ProcProxyThread:41
msgid ""
"A file-like object representing stdout (normal output can be written "
"here).  If `stdout` is not provided or if it is explicitly set to `None`,"
" then `sys.stdout` is used."
msgstr ""

#: of xonsh.proc.ProcProxyThread:46
msgid ""
"A file-like object representing stderr (error output can be written "
"here).  If `stderr` is not provided or if it is explicitly set to `None`,"
" then `sys.stderr` is used."
msgstr ""

#: of xonsh.proc.ProcProxyThread:54
msgid ""
"Whether or not to close file descriptors. This is here for Popen "
"compatability and currently does nothing."
msgstr ""

#: of xonsh.proc.ProcProxyThread:58
msgid "Environment mapping."
msgstr ""

#: of xonsh.proc.ProcProxyThread.poll:2
msgid "Check if the function has completed."
msgstr ""

#: of xonsh.proc.ProcProxyThread.poll:21
msgid "None if the function is still executing, and the returncode otherwise"
msgstr ""

#: of xonsh.proc.ProcProxyThread.run:2
msgid ""
"Set up input/output streams and execute the child function in a new "
"thread.  This is part of the `threading.Thread` interface and should not "
"be called directly."
msgstr ""

#: of xonsh.proc.ProcProxyThread.wait:2
msgid "Waits for the process to finish and returns the return code."
msgstr ""

#: of xonsh.proc.QueueReader:2
msgid "Provides a file-like interface to reading from a queue."
msgstr ""

#: of xonsh.proc.QueueReader.close:2
msgid "close the reader"
msgstr ""

#: of xonsh.proc.QueueReader.fileno:2
msgid "Returns the file descriptor number."
msgstr ""

#: of xonsh.proc.QueueReader.is_fully_read:2
msgid "Returns whether or not the queue is fully read and the reader is closed."
msgstr ""

#: of xonsh.proc.QueueReader.iterqueue:2
msgid "Iterates through all remaining chunks in a blocking fashion."
msgstr ""

#: of xonsh.proc.QueueReader.read:2
msgid "Reads bytes from the file."
msgstr ""

#: of xonsh.proc.QueueReader.read_queue:2
msgid ""
"Reads a single chunk from the queue. This is blocking if the timeout is "
"None and non-blocking otherwise."
msgstr ""

#: of xonsh.proc.QueueReader.readable:2
msgid "Returns true, because this object is always readable."
msgstr ""

#: of xonsh.proc.QueueReader.readline:2
msgid "Reads a line, or a partial line from the file descriptor."
msgstr ""

#: of xonsh.proc.QueueReader.readlines:2
msgid ""
"Reads lines from the file descriptor. This is blocking for negative hints"
" (i.e. read all the remaining lines) and non-blocking otherwise."
msgstr ""

#: of xonsh.proc.parse_proxy_return:2
msgid "Proxies may return a variety of outputs. This handles them generally."
msgstr ""

#: of xonsh.proc.parse_proxy_return:8
msgid "**r**"
msgstr ""

#: of xonsh.proc.parse_proxy_return:7
msgid "tuple, str, int, or None"
msgstr ""

#: of xonsh.proc.parse_proxy_return:8
msgid "Return from proxy function"
msgstr ""

#: of xonsh.proc.parse_proxy_return:11
msgid "Current stdout stream"
msgstr ""

#: of xonsh.proc.parse_proxy_return:14
msgid "Current stderr stream"
msgstr ""

#: of xonsh.proc.parse_proxy_return:31
msgid "**cmd_result**"
msgstr ""

#: of xonsh.proc.parse_proxy_return:19
msgid "The return code of the proxy"
msgstr ""

#: of xonsh.proc.partial_proxy:2
msgid "Dispatches the appropriate proxy function based on the number of args."
msgstr ""

#: of xonsh.proc.pause_call_resume:2
msgid ""
"For a process p, this will call a function f with the remaining args and "
"and kwargs. If the process cannot accept signals, the function will be "
"called."
msgstr ""

#: of xonsh.proc.pause_call_resume:9
msgid "**p**"
msgstr ""

#: of xonsh.proc.pause_call_resume:8
msgid "Popen object or similar"
msgstr ""

#: of xonsh.proc.pause_call_resume:14
msgid "remaining arguments"
msgstr ""

#: of xonsh.proc.pause_call_resume:30
msgid "keyword arguments"
msgstr ""

#: of xonsh.proc.populate_buffer:2
msgid "Reads bytes from the file descriptor and copies them into a buffer."
msgstr ""

#: of xonsh.proc.populate_buffer:4
msgid ""
"The reads happen in parallel using the pread() syscall; which is only "
"available on POSIX systems. If the read fails for any reason, the reader "
"is flagged as closed."
msgstr ""

#: of xonsh.proc.populate_console:2
msgid ""
"Reads bytes from the file descriptor and puts lines into the queue. The "
"reads happened in parallel, using "
"xonsh.winutils.read_console_output_character(), and is thus only "
"available on windows. If the read fails for any reason, the reader is "
"flagged as closed."
msgstr ""

#: of xonsh.proc.populate_fd_queue:2
msgid ""
"Reads 1 kb of data from a file descriptor into a queue. If this ends or "
"fails, it flags the calling reader object as closed."
msgstr ""

#: of xonsh.proc.proxy_five:2
msgid ""
"Calls a proxy function which takes four parameter: args, stdin, stdout, "
"stderr, and spec."
msgstr ""

#: of xonsh.proc.proxy_four:2
msgid ""
"Calls a proxy function which takes four parameter: args, stdin, stdout, "
"and stderr."
msgstr ""

#: of xonsh.proc.proxy_one:2
msgid "Calls a proxy function which takes one parameter: args"
msgstr ""

#: of xonsh.proc.proxy_three:2
msgid "Calls a proxy function which takes three parameter: args, stdin, stdout."
msgstr ""

#: of xonsh.proc.proxy_two:2
msgid "Calls a proxy function which takes two parameter: args and stdin."
msgstr ""

#: of xonsh.proc.proxy_zero:2
msgid "Calls a proxy function which takes no parameters."
msgstr ""

#: of xonsh.proc.safe_fdclose:2
msgid ""
"Closes a file handle in the safest way possible, and potentially storing "
"the result."
msgstr ""

#: of xonsh.proc.safe_flush:2
msgid "Attempts to safely flush a file handle, returns success bool."
msgstr ""

#: of xonsh.proc.safe_readable:2
msgid "Attempts to find if the handle is readable without throwing an error."
msgstr ""

#: of xonsh.proc.safe_readlines:2
msgid "Attempts to read lines without throwing an error."
msgstr ""

#: of xonsh.proc.still_writable:2
msgid ""
"Determines whether a file descriptor is still writable by trying to write"
" an empty string and seeing if it fails."
msgstr ""

#: ../../api/prompt/base.rst:5
msgid "Base prompt formatter (``xonsh.prompt.base``)"
msgstr ""

#: of xonsh.prompt.base:1
msgid "Base prompt, provides PROMPT_FIELDS and prompt related functions"
msgstr ""

#: of xonsh.prompt.base.PromptFormatter:2
msgid ""
"Class that holds all the related prompt formatting methods, uses the "
"``PROMPT_FIELDS`` envvar (no color formatting)."
msgstr ""

#: of xonsh.prompt.base.default_prompt:2
msgid "Creates a new instance of the default prompt."
msgstr ""

#: of xonsh.prompt.base.is_template_string:2
msgid "Returns whether or not the string is a valid template."
msgstr ""

#: of xonsh.prompt.base.multiline_prompt:2
msgid "Returns the filler text for the prompt in multiline scenarios."
msgstr ""

#: ../../api/prompt/cwd.rst:5
msgid "CWD related prompt formatter (``xonsh.prompt.cwd``)"
msgstr ""

#: of xonsh.prompt.cwd:1
msgid "CWD related prompt formatter"
msgstr ""

#: ../../api/prompt/env.rst:5
msgid "Virtualenv prompt formatter (``xonsh.prompt.env``)"
msgstr ""

#: of xonsh.prompt.env:1
msgid "Prompt formatter for virtualenv and others"
msgstr ""

#: of xonsh.prompt.env.env_name:2
msgid ""
"Returns the current env_name if it non-empty, surrounded by the "
"``{env_prefix}`` and ``{env_postfix}`` fields."
msgstr ""

#: of xonsh.prompt.env.find_env_name:2
msgid ""
"Finds the current environment name from $VIRTUAL_ENV or "
"$CONDA_DEFAULT_ENV if that is set."
msgstr ""

#: of xonsh.prompt.env.vte_new_tab_cwd:2
msgid ""
"This prints an escape sequence that tells VTE terminals the hostname and "
"pwd. This should not be needed in most cases, but sometimes is for "
"certain Linux terminals that do not read the PWD from the environment on "
"startup. Note that this does not return a string, it simply prints and "
"flushes the escape sequence to stdout directly."
msgstr ""

#: ../../api/prompt/gitstatus.rst:5
msgid "Informative git status prompt formatter (``xonsh.prompt.gitstatus``)"
msgstr ""

#: of xonsh.prompt.gitstatus:1
msgid "Informative git status prompt formatter"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus:21
msgid ""
"Create new instance of GitStatus(branch, num_ahead, num_behind, "
"untracked, changed, conflicts, staged, stashed, operations)"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus.changed:2
msgid "Alias for field number 4"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus.conflicts:2
msgid "Alias for field number 5"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus.operations:2
msgid "Alias for field number 8"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus.staged:2
msgid "Alias for field number 6"
msgstr ""

#: of xonsh.prompt.gitstatus.GitStatus.stashed:2
msgid "Alias for field number 7"
msgstr ""

#: of xonsh.prompt.gitstatus.gitstatus:2
msgid ""
"Return namedtuple with fields: branch name, number of ahead commit, "
"number of behind commit, untracked number, changed number, conflicts "
"number, staged number, stashed number, operation."
msgstr ""

#: of xonsh.prompt.gitstatus.gitstatus_prompt:2
msgid "Return str `BRANCH|OPERATOR|numbers`"
msgstr ""

#: ../../api/prompt/index.rst:5
msgid "Prompt formatter API"
msgstr ""

#: ../../api/prompt/index.rst:6
msgid "Modules that provides ``FORMATTER_DICT``."
msgstr ""

#: ../../api/prompt/job.rst:5
msgid "Jobs prompt formatter (``xonsh.prompt.job``)"
msgstr ""

#: of xonsh.prompt.job:1
msgid "Prompt formatter for current jobs"
msgstr ""

#: ../../api/prompt/vc.rst:5
msgid "Version control branch info prompt formatter (``xonsh.prompt.vc``)"
msgstr ""

#: of xonsh.prompt.vc:1
msgid "Prompt formatter for simple version control branches"
msgstr ""

#: of xonsh.prompt.vc.branch_bg_color:2
msgid ""
"Return red if the current branch is dirty, yellow if the dirtiness can "
"not be determined, and green if it clean. These are background colors."
msgstr ""

#: of xonsh.prompt.vc.branch_color:2
msgid ""
"Return red if the current branch is dirty, yellow if the dirtiness can "
"not be determined, and green if it clean. These are bold, intense colors "
"for the foreground."
msgstr ""

#: of xonsh.prompt.vc.current_branch:2
msgid ""
"Gets the branch for a current working directory. Returns an empty string "
"if the cwd is not a repository.  This currently only works for git and hg"
" and should be extended in the future.  If a timeout occurred, the string"
" '<branch-timeout>' is returned."
msgstr ""

#: of xonsh.prompt.vc.dirty_working_directory:2
msgid ""
"Returns a boolean as to whether there are uncommitted files in version "
"control repository we are inside. If this cannot be determined, returns "
"None. Currently supports git and hg."
msgstr ""

#: of xonsh.prompt.vc.get_git_branch:2
msgid ""
"Attempts to find the current git branch. If this could not be determined "
"(timeout, not in a git repo, etc.) then this returns None."
msgstr ""

#: of xonsh.prompt.vc.get_hg_branch:2
msgid ""
"Try to get the mercurial branch of the current directory, return None if "
"not in a repo or subprocess.TimeoutExpired if timed out."
msgstr ""

#: of xonsh.prompt.vc.git_dirty_working_directory:2
msgid ""
"Returns whether or not the git directory is dirty. If this could not be "
"determined (timeout, file not found, etc.) then this returns None."
msgstr ""

#: of xonsh.prompt.vc.hg_dirty_working_directory:2
msgid ""
"Computes whether or not the mercurial working directory is dirty or not. "
"If this cannot be determined, None is returned."
msgstr ""

#: ../../api/ptk/completer.rst:5
msgid "Prompt Toolkit Completer (``xonsh.ptk.completer``)"
msgstr ""

#: ../../api/ptk/completer.rst:7 ../../api/ptk/history.rst:7
#: ../../api/ptk/key_bindings.rst:7 ../../api/ptk/shell.rst:7
msgid "This module is pending deprecation."
msgstr ""

#: ../../api/ptk/history.rst:5
msgid "Prompt Toolkit History Object (``xonsh.ptk.history``)"
msgstr ""

#: ../../api/ptk/key_bindings.rst:5
msgid "Prompt Toolkit Key Bindings (``xonsh.ptk.key_bindings``)"
msgstr ""

#: ../../api/ptk/shell.rst:5
msgid "Prompt Toolkit Shell (``xonsh.ptk.shell``)"
msgstr ""

#: ../../api/ptk2/completer.rst:5
msgid "Prompt Toolkit 2 Completer (``xonsh.ptk2.completer``)"
msgstr ""

#: of xonsh.ptk2.completer:1
msgid "Completer implementation to use with prompt_toolkit."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter:2
msgid "Simple prompt_toolkit Completer object."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter:4
msgid "It just redirects requests to normal Xonsh completer."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter:23
msgid ""
"Takes instance of xonsh.completer.Completer, the xonsh execution context,"
" and the shell instance itself."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.get_completions:2
msgid "Returns a generator for list of completions."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.get_completions_async:2
msgid ""
"Asynchronous generator for completions. (Probably, you won't have to "
"override this.)"
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.get_completions_async:5
msgid ""
"This should return an iterable that can yield both :class:`.Completion` "
"and `Future` objects. The :class:`.Completion` objects have to be wrapped"
" in a `AsyncGeneratorItem` object."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.get_completions_async:9
#: xonsh.ptk2.history.PromptToolkitHistory.load_history_strings_async:9
msgid ""
"If we drop Python 2 support in the future, this could become a true "
"asynchronous generator."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.reserve_space:2
msgid "Adjust the height for showing autocompletion menu."
msgstr ""

#: of xonsh.ptk2.completer.PromptToolkitCompleter.suggestion_completion:2
msgid "Provides a completion based on the current auto-suggestion."
msgstr ""

#: ../../api/ptk2/history.rst:5
msgid "Prompt Toolkit 2 History Object (``xonsh.ptk2.history``)"
msgstr ""

#: of xonsh.ptk2.history:1
msgid "History object for use with prompt_toolkit."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory:2
msgid ""
"History class that implements the prompt-toolkit history interface with "
"the xonsh backend."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory:23
msgid "Initialize history object."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.append_string:2
msgid "Add string to the history."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.get_item_loaded_event:2
msgid "Event which is triggered when a new item is loaded."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.get_strings:2
msgid "Get the strings from the history that are loaded so far."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.load_history_strings:2
msgid "Loads synchronous history strings"
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.load_history_strings_async:2
msgid ""
"Asynchronous generator for history strings. (Probably, you won't have to "
"override this.)"
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.load_history_strings_async:5
msgid ""
"This should return an iterable that can yield both `str` and `Future` "
"objects. The `str` objects have to be wrapped in a `AsyncGeneratorItem` "
"object."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.start_loading:2
msgid "Start loading the history."
msgstr ""

#: of xonsh.ptk2.history.PromptToolkitHistory.store_string:2
msgid "Store the string in persistent storage."
msgstr ""

#: ../../api/ptk2/key_bindings.rst:5
msgid "Prompt Toolkit 2 Key Bindings (``xonsh.ptk2.key_bindings``)"
msgstr ""

#: of xonsh.ptk2.key_bindings:1
msgid "Key bindings for prompt_toolkit xonsh shell."
msgstr ""

#: of xonsh.ptk2.key_bindings.can_compile:2
msgid "Returns whether the code can be compiled, i.e. it is valid xonsh."
msgstr ""

#: of xonsh.ptk2.key_bindings.carriage_return:2
msgid ""
"Preliminary parser to determine if 'Enter' key should send command to the"
" xonsh parser for execution or should insert a newline for continued "
"input."
msgstr ""

#: of xonsh.ptk2.key_bindings.carriage_return:5
msgid ""
"Current 'triggers' for inserting a newline are: - Not on first line of "
"buffer and line is non-empty - Previous character is a colon (covers if, "
"for, etc...) - User is in an open paren-block - Line ends with backslash "
"- Any text exists below cursor position (relevant when editing previous "
"multiline blocks)"
msgstr ""

#: of xonsh.ptk2.key_bindings.load_xonsh_bindings:2
msgid "Load custom key bindings."
msgstr ""

#: ../../api/ptk2/shell.rst:5
msgid "Prompt Toolkit 2 Shell (``xonsh.ptk2.shell``)"
msgstr ""

#: of xonsh.ptk2.shell:1
msgid "The prompt_toolkit based xonsh shell."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell:2
msgid "The xonsh shell for prompt_toolkit v2."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.bottom_toolbar_tokens:2
msgid "Returns a list of (token, str) tuples for the current bottom toolbar."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.cmdloop:2
msgid "Enters a loop that reads and execute input from user."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.continuation_tokens:2
msgid "Displays dots in multiline prompt"
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.format_color:2
msgid ""
"Formats a color string using Pygments. This, therefore, returns a list of"
" (Token, str) tuples. If force_string is set to true, though, this will "
"return a color formatted string."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.print_color:2
msgid "Prints a color string using prompt-toolkit color management."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.prompt_tokens:2
msgid "Returns a list of (token, str) tuples for the current prompt."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.rprompt_tokens:2
msgid "Returns a list of (token, str) tuples for the current right prompt."
msgstr ""

#: of xonsh.ptk2.shell.PromptToolkit2Shell.singleline:2
msgid ""
"Reads a single line of input from the shell. The store_in_history kwarg "
"flags whether the input should be stored in PTK's in-memory history."
msgstr ""

#: ../../api/pyghooks.rst:5
msgid "Pygments Hooks (``xonsh.pyghooks``)"
msgstr ""

#: of xonsh.pyghooks:1
msgid "Hooks for pygments syntax highlighting."
msgstr ""

#: of xonsh.pyghooks.CompoundColorMap:2
msgid ""
"Looks up color tokens by name, potentially generating the value from the "
"lookup."
msgstr ""

#: of xonsh.pyghooks.XonshConsoleLexer:2 xonsh.pyghooks.XonshLexer:2
msgid "Xonsh console lexer for pygments."
msgstr ""

#: of xonsh.pyghooks.XonshLexer.get_tokens_unprocessed:2
msgid ""
"Check first command, then call super.get_tokens_unprocessed with root or "
"subproc state"
msgstr ""

#: of xonsh.pyghooks.XonshStyle:2
msgid ""
"A xonsh pygments style that will dispatch to the correct color map by "
"using a ChainMap.  The style_name property may be used to reset the "
"current style."
msgstr ""

#: of xonsh.pyghooks.XonshStyle:43
msgid "**style_name**"
msgstr ""

#: of xonsh.pyghooks.XonshStyle:30
msgid "The style name to initialize with."
msgstr ""

#: of xonsh.pyghooks.XonshStyle.enhance_colors_for_cmd_exe:2
msgid ""
"Enhance colors when using cmd.exe on windows. When using the default "
"style all blue and dark red colors are changed to CYAN and intense red."
msgstr ""

#: of xonsh.pyghooks.code_by_name:2
msgid "Converts a token name into a pygments-style color code."
msgstr ""

#: of xonsh.pyghooks.code_by_name:8
msgid "Color token name."
msgstr ""

#: of xonsh.pyghooks.code_by_name:11
msgid "**styles**"
msgstr ""

#: of xonsh.pyghooks.code_by_name:11
msgid "Mapping for looking up non-hex colors"
msgstr ""

#: of xonsh.pyghooks.code_by_name:28
msgid "**code**"
msgstr ""

#: of xonsh.pyghooks.code_by_name:16
msgid "Pygments style color code."
msgstr ""

#: of xonsh.pyghooks.color_by_name:2
msgid ""
"Converts a color name to a color token, foreground name, and background "
"name.  Will take into consideration current foreground and background "
"colors, if provided."
msgstr ""

#: of xonsh.pyghooks.color_by_name:10
msgid "Color name."
msgstr ""

#: of xonsh.pyghooks.color_by_name:13 xonsh.pyghooks.color_by_name:24
msgid "**fg**"
msgstr ""

#: of xonsh.pyghooks.color_by_name:13
msgid "Foreground color name."
msgstr ""

#: of xonsh.pyghooks.color_by_name:16 xonsh.pyghooks.color_by_name:39
msgid "**bg**"
msgstr ""

#: of xonsh.pyghooks.color_by_name:16
msgid "Background color name."
msgstr ""

#: of xonsh.pyghooks.color_by_name:21
msgid "**tok**"
msgstr ""

#: of xonsh.pyghooks.color_by_name:20
msgid "Token"
msgstr ""

#: of xonsh.pyghooks.color_by_name:21
msgid "Pygments Token.Color subclass"
msgstr ""

#: of xonsh.pyghooks.color_by_name:24
msgid "New computed foreground color name."
msgstr ""

#: of xonsh.pyghooks.color_by_name:27
msgid "New computed background color name."
msgstr ""

#: of xonsh.pyghooks.color_name_to_pygments_code:2
msgid "Converts a xonsh color name to a pygments color code."
msgstr ""

#: of xonsh.pyghooks.make_pygments_style:2
msgid "Makes a pygments style based on a color palette."
msgstr ""

#: of xonsh.pyghooks.partial_color_tokenize:2
msgid ""
"Tokenizes a template string containing colors. Will return a list of "
"tuples mapping the token to the string which has that color. These sub-"
"strings maybe templates themselves."
msgstr ""

#: of xonsh.pyghooks.pygments_style_by_name:2
msgid "Gets or makes a pygments color style by its name."
msgstr ""

#: of xonsh.pyghooks.subproc_arg_callback:2
msgid "Check if match contains valid path"
msgstr ""

#: of xonsh.pyghooks.subproc_cmd_callback:2
msgid ""
"Yield Builtin token if match contains valid command, otherwise fallback "
"to fallback lexer."
msgstr ""

#: of xonsh.pyghooks.xonsh_style_proxy:2
msgid "Factory for a proxy class to a xonsh style."
msgstr ""

#: ../../api/readline_shell.rst:5
msgid "Readline Shell (``xonsh.readline_shell``)"
msgstr ""

#: of xonsh.readline_shell:1 xonsh.readline_shell.ReadlineShell:2
msgid "The readline based xonsh shell."
msgstr ""

#: of xonsh.readline_shell:3
msgid ""
"Portions of this code related to initializing the readline library are "
"included from the IPython project.  The IPython project is:"
msgstr ""

#: of xonsh.readline_shell:7
msgid "Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>"
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder:2
msgid ""
"Thread responsible for adding inputs from history to the current readline"
" instance. May wait for the history garbage collector to finish."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.isAlive:2
#: xonsh.readline_shell.ReadlineHistoryAdder.is_alive:2
msgid "Return whether the thread is alive."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.isAlive:4
msgid "This method is deprecated, use is_alive() instead."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.is_alive:4
msgid ""
"This method returns True just before the run() method starts until just "
"after the run() method terminates. The module function enumerate() "
"returns a list of all alive threads."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:2
msgid "Wait until the thread terminates."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:4
msgid ""
"This blocks the calling thread until the thread whose join() method is "
"called terminates -- either normally or through an unhandled exception or"
" until the optional timeout occurs."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:8
msgid ""
"When the timeout argument is present and not None, it should be a "
"floating point number specifying a timeout for the operation in seconds "
"(or fractions thereof). As join() always returns None, you must call "
"is_alive() after join() to decide whether a timeout happened -- if the "
"thread is still alive, the join() call timed out."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:14
msgid ""
"When the timeout argument is not present or None, the operation will "
"block until the thread terminates."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:17
msgid "A thread can be join()ed many times."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:19
msgid ""
"join() raises a RuntimeError if an attempt is made to join the current "
"thread as that would cause a deadlock. It is also an error to join() a "
"thread before it has been started and attempts to do so raises the same "
"exception."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:2
msgid "Start the thread's activity."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:4
msgid ""
"It must be called at most once per thread object. It arranges for the "
"object's run() method to be invoked in a separate thread of control."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:7
msgid ""
"This method will raise a RuntimeError if called more than once on the "
"same thread object."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:2
msgid "A boolean value indicating whether this thread is a daemon thread."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:4
msgid ""
"This must be set before start() is called, otherwise RuntimeError is "
"raised. Its initial value is inherited from the creating thread; the main"
" thread is not a daemon thread and therefore all threads created in the "
"main thread default to daemon = False."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:9
msgid "The entire Python program exits when no alive non-daemon threads are left."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.ident:2
msgid "Thread identifier of this thread or None if it has not been started."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.ident:4
msgid ""
"This is a nonzero integer. See the get_ident() function. Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created. The identifier is available even after the thread has exited."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.name:2
msgid "A string used for identification purposes only."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.name:4
msgid ""
"It has no semantics. Multiple threads may be given the same name. The "
"initial name is set by the constructor."
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:2
msgid "Fix to allow Ctrl-C to exit reverse-i-search."
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:19
msgid "Based on code from:"
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:5
msgid "http://bugs.python.org/file39467/raw_input__workaround_demo.py"
msgstr ""

#: of xonsh.readline_shell.rl_completion_query_items:2
msgid ""
"Sets the rl_completion_query_items variable, if possible. A None value "
"will set this to $COMPLETION_QUERY_LIMIT, otherwise any integer is "
"accepted."
msgstr ""

#: of xonsh.readline_shell.rl_completion_suppress_append:2
msgid ""
"Sets the rl_completion_suppress_append variable, if possible. A value of "
"1 (default) means to suppress, a value of 0 means to enable."
msgstr ""

#: of xonsh.readline_shell.rl_variable_dumper:2
msgid ""
"Dumps the currently set readline variables. If readable is True, then "
"this output may be used in an inputrc file."
msgstr ""

#: of xonsh.readline_shell.rl_variable_value:2
msgid "Returns the currently set value for a readline configuration variable."
msgstr ""

#: of xonsh.readline_shell.setup_readline:2
msgid "Sets up the readline module and completion suppression, if available."
msgstr ""

#: of xonsh.readline_shell.teardown_readline:2
msgid "Tears down up the readline module, if available."
msgstr ""

#: ../../api/replay.rst:5
msgid "Replay History (``xonsh.replay``)"
msgstr ""

#: of xonsh.replay:1
msgid "Tools to replay xonsh history files."
msgstr ""

#: of xonsh.replay.Replayer:2
msgid "Replays a xonsh history file."
msgstr ""

#: of xonsh.replay.Replayer:28
msgid "Path to xonsh history file."
msgstr ""

#: of xonsh.replay.Replayer:31
msgid ""
"Whether new file handle should be opened for each load, passed directly "
"into LazyJSON class."
msgstr ""

#: of xonsh.replay.Replayer.replay:2
msgid ""
"Replays the history specified, returns the history object where the code "
"was executed."
msgstr ""

#: of xonsh.replay.Replayer.replay:13
msgid "**merge_env**"
msgstr ""

#: of xonsh.replay.Replayer.replay:12
msgid "tuple of str or Mappings, optional"
msgstr ""

#: of xonsh.replay.Replayer.replay:9
msgid ""
"Describes how to merge the environments, in order of increasing "
"precedence. Available strings are 'replay' and 'native'. The 'replay' env"
" comes from the history file that we are replaying. The 'native' env "
"comes from what this instance of xonsh was started up with. Instead of a "
"string, a dict or other mapping may be passed in as well. Defaults to "
"('replay', 'native')."
msgstr ""

#: of xonsh.replay.Replayer.replay:29
msgid "**target**"
msgstr ""

#: of xonsh.replay.Replayer.replay:16
msgid "Path to new history file."
msgstr ""

#: of xonsh.replay.replay_main:2
msgid "Acts as main function for replaying a xonsh history file."
msgstr ""

#: ../../api/shell.rst:5
msgid "Main Shell Command Prompt (``xonsh.shell``)"
msgstr ""

#: of xonsh.shell:1
msgid "The xonsh shell"
msgstr ""

#: of xonsh.shell.Shell:2
msgid "Main xonsh shell."
msgstr ""

#: of xonsh.shell.Shell:4
msgid ""
"Initializes execution environment and decides if prompt_toolkit or "
"readline version of shell should be used."
msgstr ""

#: of xonsh.shell.Shell:29
msgid "Execer"
msgstr ""

#: of xonsh.shell.Shell:30
msgid "An execer instance capable of running xonsh code."
msgstr ""

#: of xonsh.shell.Shell:33
msgid ""
"The execution context for the shell (e.g. the globals namespace). If "
"none, this is computed by loading the rc files. If not None, this no "
"additional context is computed and this is used directly."
msgstr ""

#: of xonsh.shell.Shell:39
msgid ""
"The shell type to start, such as 'readline', 'prompt_toolkit1', or "
"'random'."
msgstr ""

#: of xonsh.shell.transform_command:2
msgid "Returns the results of firing the precommand handles."
msgstr ""

#: ../../api/tools.rst:5
msgid "Tools (``xonsh.tools``)"
msgstr ""

#: of xonsh.tools:1
msgid "Misc. xonsh tools."
msgstr ""

#: of xonsh.tools:3
msgid "The following implementations were forked from the IPython project:"
msgstr ""

#: of xonsh.tools:10
msgid "Implementations:"
msgstr ""

#: of xonsh.tools:12
msgid "decode()"
msgstr ""

#: of xonsh.tools:13
msgid "encode()"
msgstr ""

#: of xonsh.tools:14
msgid "cast_unicode()"
msgstr ""

#: of xonsh.tools:15
msgid "safe_hasattr()"
msgstr ""

#: of xonsh.tools:16
msgid "indent()"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:2
msgid "Raised when there's an error with a called process"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:4
msgid ""
"Inherits from XonshError and subprocess.CalledProcessError, catching "
"either will also catch this error."
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:7
msgid ""
"Raised *after* iterating over stdout of a captured command, if the "
"returncode of the command is nonzero."
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:15
msgid "Example:"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:12
msgid "try:"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:12
msgid "for line in !(ls):"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:13
msgid "print(line)"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:15
msgid "except subprocess.CalledProcessError as error:"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:15
msgid "print(\"Error in process: {}.format(error.completed_command.pid))"
msgstr ""

#: of xonsh.tools.XonshCalledProcessError:17
msgid ""
"This also handles differences between Python3.4 and 3.5 where "
"CalledProcessError is concerned."
msgstr ""

#: of xonsh.tools.XonshCalledProcessError.with_traceback:2
#: xonsh.tools.XonshError.with_traceback:2
#: xontrib.voxapi.EnvironmentInUse.with_traceback:2
#: xontrib.voxapi.NoEnvironmentActive.with_traceback:2
msgid ""
"Exception.with_traceback(tb) -- set self.__traceback__ to tb and return "
"self."
msgstr ""

#: of xonsh.tools.XonshCalledProcessError.stdout:2
msgid "Alias for output attribute, to match stderr"
msgstr ""

#: of xonsh.tools.DefaultNotGivenType:2
msgid "Singleton for representing when no default value is given."
msgstr ""

#: of xonsh.tools.EnvPath:2
msgid ""
"A class that implements an environment path, which is a list of strings. "
"Provides a custom method that expands all paths if the relevant env "
"variable has been set."
msgstr ""

#: of xonsh.tools.EnvPath.add:2
msgid "Add a value to this EnvPath,"
msgstr ""

#: of xonsh.tools.EnvPath.add:4
msgid ""
"path.add(data, front=bool, replace=bool) -> ensures that path contains "
"data, with position determined by kwargs"
msgstr ""

#: of xonsh.tools.EnvPath.add:9
msgid "**data**"
msgstr ""

#: of xonsh.tools.EnvPath.add:8
msgid "string or bytes or pathlib.Path"
msgstr ""

#: of xonsh.tools.EnvPath.add:9
msgid "value to be added"
msgstr ""

#: of xonsh.tools.EnvPath.add:15
msgid "**front**"
msgstr ""

#: of xonsh.tools.EnvPath.add:12
msgid ""
"whether the value should be added to the front, will be ignored if the "
"data already exists in this EnvPath and replace is False Default : False"
msgstr ""

#: of xonsh.tools.EnvPath.add:20
msgid "**replace**"
msgstr ""

#: of xonsh.tools.EnvPath.add:18
msgid ""
"If True, the value will be removed and added to the start or "
"end(depending on the value of front) Default : False"
msgstr ""

#: of xonsh.tools.EnvPath.add:37
msgid "None"
msgstr ""

#: of xonsh.tools.EnvPath.append:2
msgid "S.append(value) -- append value to the end of the sequence"
msgstr ""

#: of xonsh.tools.EnvPath.extend:2
msgid ""
"S.extend(iterable) -- extend sequence by appending elements from the "
"iterable"
msgstr ""

#: of xonsh.tools.EnvPath.index:4
msgid "Supporting start and stop arguments is optional, but recommended."
msgstr ""

#: of xonsh.tools.EnvPath.insert:2
msgid "S.insert(index, value) -- insert value before index"
msgstr ""

#: of xonsh.tools.EnvPath.pop:2
msgid "Raise IndexError if list is empty or index is out of range."
msgstr ""

#: of xonsh.tools.EnvPath.remove:2
msgid ""
"S.remove(value) -- remove first occurrence of value. Raise ValueError if "
"the value is not present."
msgstr ""

#: of xonsh.tools.EnvPath.reverse:2
msgid "S.reverse() -- reverse *IN PLACE*"
msgstr ""

#: of xonsh.tools.EnvPath.paths:2
msgid "Returns the list of directories that this EnvPath contains."
msgstr ""

#: of xonsh.tools.redirect_stderr:2
msgid "Context manager for temporarily redirecting stderr to another file."
msgstr ""

#: of xonsh.tools.redirect_stdout:2
msgid "Context manager for temporarily redirecting stdout to another file::"
msgstr ""

#: of xonsh.tools.redirect_stdout:13
msgid "Mostly for backwards compatibility."
msgstr ""

#: of xonsh.tools.all_permutations:2
msgid "Yeilds all permutations, not just those of a specified length"
msgstr ""

#: of xonsh.tools.always_false:2
msgid "Returns False"
msgstr ""

#: of xonsh.tools.always_none:2
msgid "Returns None"
msgstr ""

#: of xonsh.tools.always_true:2
msgid "Returns True"
msgstr ""

#: of xonsh.tools.ansicolors_to_ptk1_names:2
msgid "Converts ansicolor names in a stylemap to old PTK1 color names"
msgstr ""

#: of xonsh.tools.argvquote:2
msgid ""
"Returns an argument quoted in such a way that that CommandLineToArgvW on "
"Windows will return the argument string unchanged. This is the same thing"
" Popen does when supplied with an list of arguments. Arguments in a "
"command line should be separated by spaces; this function does not add "
"these spaces. This implementation follows the suggestions outlined here: "
"https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23"
"/everyone-quotes-command-line-arguments-the-wrong-way/"
msgstr ""

#: of xonsh.tools.backup_file:2
msgid ""
"Moves an existing file to a new name that has the current time right "
"before the extension."
msgstr ""

#: of xonsh.tools.balanced_parens:2
msgid "Determines if parentheses are balanced in an expression."
msgstr ""

#: of xonsh.tools.bool_or_int_to_str:2
msgid "Converts a boolean or integer to a string."
msgstr ""

#: of xonsh.tools.bool_seq_to_csv:2
msgid "Converts a sequence of bools to a comma-separated string."
msgstr ""

#: of xonsh.tools.bool_to_str:2
msgid "Converts a bool to an empty string if False and the string '1' if True."
msgstr ""

#: of xonsh.tools.carriage_return:2
msgid "Writes a carriage return to stdout, and nothing else."
msgstr ""

#: of xonsh.tools.check_bad_str_token:2
msgid "Checks if a token is a bad string."
msgstr ""

#: of xonsh.tools.check_for_partial_string:2
msgid ""
"Returns the starting index (inclusive), ending index (exclusive), and "
"starting quote string of the most recent Python string found in the "
"input."
msgstr ""

#: of xonsh.tools.check_for_partial_string:5
msgid "check_for_partial_string(x) -> (startix, endix, quote)"
msgstr ""

#: of xonsh.tools.check_for_partial_string:10
msgid "**x**"
msgstr ""

#: of xonsh.tools.check_for_partial_string:10
msgid "The string to be checked (representing a line of terminal input)"
msgstr ""

#: of xonsh.tools.check_for_partial_string:16
msgid "**startix**"
msgstr ""

#: of xonsh.tools.check_for_partial_string:15
#: xonsh.tools.check_for_partial_string:20
msgid "int (or None)"
msgstr ""

#: of xonsh.tools.check_for_partial_string:15
msgid ""
"The index where the most recent Python string found started (inclusive), "
"or None if no strings exist in the input"
msgstr ""

#: of xonsh.tools.check_for_partial_string:21
msgid "**endix**"
msgstr ""

#: of xonsh.tools.check_for_partial_string:19
msgid ""
"The index where the most recent Python string found ended (exclusive), or"
" None if no strings exist in the input OR if the input ended in the "
"middle of a Python string"
msgstr ""

#: of xonsh.tools.check_for_partial_string:37
msgid "**quote**"
msgstr ""

#: of xonsh.tools.check_for_partial_string:36
msgid "str (or None)"
msgstr ""

#: of xonsh.tools.check_for_partial_string:24
msgid ""
"A string containing the quote used to start the string (e.g., b\", \", "
"'''), or None if no string was found."
msgstr ""

#: of xonsh.tools.check_quotes:2
msgid ""
"Checks a string to make sure that if it starts with quotes, it also ends "
"with quotes."
msgstr ""

#: of xonsh.tools.columnize:2
msgid ""
"Takes an iterable of strings and returns a list of lines with the "
"elements placed in columns. Each line will be at most *width* columns. "
"The newline character will be appended to the end of each line."
msgstr ""

#: of xonsh.tools.command_not_found:2
msgid ""
"Uses the debian/ubuntu command-not-found utility to suggest packages for "
"a command that cannot currently be found."
msgstr ""

#: of xonsh.tools.csv_to_bool_seq:2
msgid "Takes a comma-separated string and converts it into a list of bools."
msgstr ""

#: of xonsh.tools.csv_to_set:2
msgid "Convert a comma-separated list of strings to a set of strings."
msgstr ""

#: of xonsh.tools.decode_bytes:2
msgid ""
"Tries to decode the bytes using XONSH_ENCODING if available, otherwise "
"using sys.getdefaultencoding()."
msgstr ""

#: of xonsh.tools.deprecated:2
msgid "Parametrized decorator that deprecates a function in a graceful manner."
msgstr ""

#: of xonsh.tools.deprecated:4
msgid ""
"Updates the decorated function's docstring to mention the version that "
"deprecation occurred in and the version it will be removed in if both of "
"these values are passed."
msgstr ""

#: of xonsh.tools.deprecated:8
msgid ""
"When removed_in is not a release equal to or less than the current "
"release, call ``warnings.warn`` with details, while raising "
"``DeprecationWarning``."
msgstr ""

#: of xonsh.tools.deprecated:12
msgid ""
"When removed_in is a release equal to or less than the current release, "
"raise an ``AssertionError``."
msgstr ""

#: of xonsh.tools.deprecated:18
msgid "**deprecated_in**"
msgstr ""

#: of xonsh.tools.deprecated:18
msgid "The version number that deprecated this function."
msgstr ""

#: of xonsh.tools.deprecated:34
msgid "**removed_in**"
msgstr ""

#: of xonsh.tools.deprecated:21
msgid "The version number that this function will be removed in."
msgstr ""

#: of xonsh.tools.detype:2
msgid "This assumes that the object has a detype method, and calls that."
msgstr ""

#: of xonsh.tools.dict_to_str:2
msgid "Converts a dictionary to a string"
msgstr ""

#: of xonsh.tools.display_error_message:2
msgid "Prints the error message of the current exception on stderr."
msgstr ""

#: of xonsh.tools.dynamic_cwd_tuple_to_str:2
msgid "Convert a canonical cwd_width tuple to a string."
msgstr ""

#: of xonsh.tools.ensure_slice:2
msgid "Try to convert an object into a slice, complain on failure"
msgstr ""

#: of xonsh.tools.ensure_string:2
msgid "Returns a string if x is not a string, and x if it already is."
msgstr ""

#: of xonsh.tools.env_path_to_str:2
msgid "Converts an environment path to a string by joining on the OS separator."
msgstr ""

#: of xonsh.tools.escape_windows_cmd_string:2
msgid ""
"Returns a string that is usable by the Windows cmd.exe. The escaping is "
"based on details here and empirical testing: "
"http://www.robvanderwoude.com/escapechars.php"
msgstr ""

#: of xonsh.tools.executables_in:2
msgid "Returns a generator of files in path that the user could execute."
msgstr ""

#: of xonsh.tools.expand_case_matching:2
msgid "Expands a string to a case insensitive globable string."
msgstr ""

#: of xonsh.tools.expand_path:2
msgid ""
"Takes a string path and expands ~ to home if expand_user is set and "
"environment vars if EXPAND_ENV_VARS is set."
msgstr ""

#: of xonsh.tools.expanduser_abs_path:2
msgid "Provides user expanded absolute path"
msgstr ""

#: of xonsh.tools.expandvars:2
msgid ""
"Expand shell variables of the forms $var, ${var} and %var%. Unknown "
"variables are left unchanged."
msgstr ""

#: of xonsh.tools.fallback:2
msgid ""
"Decorator for returning the object if cond is true and a backup if cond "
"is false."
msgstr ""

#: of xonsh.tools.find_next_break:2
msgid ""
"Returns the column number of the next logical break in subproc mode. This"
" function may be useful in finding the maxcol argument of subproc_toks()."
msgstr ""

#: of xonsh.tools.findfirst:2
msgid ""
"Finds whichever of the given substrings occurs first in the given string "
"and returns that substring, or returns None if no such strings occur."
msgstr ""

#: of xonsh.tools.format_color:2
msgid ""
"Formats strings that may contain colors. This simply dispatches to the "
"shell instances method of the same name. The results of this function "
"should be directly usable by print_color()."
msgstr ""

#: of xonsh.tools.format_datetime:2
msgid "Format datetime object to string base on $XONSH_DATETIME_FORMAT Env."
msgstr ""

#: of xonsh.tools.format_std_prepost:2
msgid ""
"Formats a template prefix/postfix string for a standard buffer. Returns a"
" string suitable for prepending or appending."
msgstr ""

#: of xonsh.tools.get_line_continuation:2
msgid ""
"The line continuation characters used in subproc mode. In interactive "
"mode on Windows the backslash must be preceded by a space. This is "
"because paths on Windows may end in a backslash."
msgstr ""

#: of xonsh.tools.get_logical_line:2
msgid ""
"Returns a single logical line (i.e. one without line continuations) from "
"a list of lines.  This line should begin at index idx. This also returns "
"the number of physical lines the logical line spans. The lines should not"
" contain newlines"
msgstr ""

#: of xonsh.tools.get_portions:2
msgid "Yield from portions of an iterable."
msgstr ""

#: of xonsh.tools.get_portions:8
msgid "**it: iterable**"
msgstr ""

#: of xonsh.tools.get_portions:24
msgid "**slices: a slice or a list of slice objects**"
msgstr ""

#: of xonsh.tools.get_sep:2
msgid ""
"Returns the appropriate filepath separator char depending on OS and xonsh"
" options set"
msgstr ""

#: of xonsh.tools.globpath:2
msgid "Simple wrapper around glob that also expands home and env vars."
msgstr ""

#: of xonsh.tools.hardcode_colors_for_win10:2
msgid ""
"Replace all ansi colors with hardcoded colors to avoid unreadable "
"defaults in conhost.exe"
msgstr ""

#: of xonsh.tools.history_tuple_to_str:2
msgid "Converts a valid history tuple to a canonical string."
msgstr ""

#: of xonsh.tools.iglobpath:2
msgid "Simple wrapper around iglob that also expands home and env vars."
msgstr ""

#: of xonsh.tools.indent:2
msgid "Indent a string a given number of spaces or tabstops."
msgstr ""

#: of xonsh.tools.indent:4
msgid "indent(str,nspaces=4,ntabs=0) -> indent str by ntabs+nspaces."
msgstr ""

#: of xonsh.tools.indent:9
msgid "**instr**"
msgstr ""

#: of xonsh.tools.indent:8
msgid "basestring"
msgstr ""

#: of xonsh.tools.indent:9
msgid "The string to be indented."
msgstr ""

#: of xonsh.tools.indent:12
msgid "**nspaces**"
msgstr ""

#: of xonsh.tools.indent:11
msgid "int (default: 4)"
msgstr ""

#: of xonsh.tools.indent:12
msgid "The number of spaces to be indented."
msgstr ""

#: of xonsh.tools.indent:15
msgid "**ntabs**"
msgstr ""

#: of xonsh.tools.indent:14
msgid "int (default: 0)"
msgstr ""

#: of xonsh.tools.indent:15
msgid "The number of tabs to be indented."
msgstr ""

#: of xonsh.tools.indent:20
msgid "**flatten**"
msgstr ""

#: of xonsh.tools.indent:19
msgid "bool (default: False)"
msgstr ""

#: of xonsh.tools.indent:18
msgid ""
"Whether to scrub existing indentation.  If True, all lines will be "
"aligned to the same indentation.  If False, existing indentation will be "
"strictly increased."
msgstr ""

#: of xonsh.tools.indent:37
msgid "**outstr**"
msgstr ""

#: of xonsh.tools.indent:36
msgid "string indented by ntabs and nspaces."
msgstr ""

#: of xonsh.tools.intensify_colors_for_cmd_exe:2
msgid ""
"Returns a modified style to where colors that maps to dark colors are "
"replaced with brighter versions."
msgstr ""

#: of xonsh.tools.intensify_colors_on_win_setter:2
msgid ""
"Resets the style when setting the INTENSIFY_COLORS_ON_WIN environment "
"variable."
msgstr ""

#: of xonsh.tools.is_balanced:2
msgid ""
"Determines whether an expression has unbalanced opening and closing "
"tokens."
msgstr ""

#: of xonsh.tools.is_bool:2
msgid "Tests if something is a boolean."
msgstr ""

#: of xonsh.tools.is_bool_or_int:2
msgid "Returns whether a value is a boolean or integer."
msgstr ""

#: of xonsh.tools.is_bool_seq:2
msgid "Tests if an object is a sequence of bools."
msgstr ""

#: of xonsh.tools.is_callable:2
msgid "Tests if something is callable"
msgstr ""

#: of xonsh.tools.is_class:2
msgid "Tests if something is a class"
msgstr ""

#: of xonsh.tools.is_dynamic_cwd_width:2
msgid ""
"Determine if the input is a valid input for the DYNAMIC_CWD_WIDTH "
"environment variable."
msgstr ""

#: of xonsh.tools.is_env_path:2
msgid "This tests if something is an environment path, ie a list of strings."
msgstr ""

#: of xonsh.tools.is_float:2
msgid "Tests if something is a float"
msgstr ""

#: of xonsh.tools.is_history_backend:2
msgid "Tests if something is a valid history backend."
msgstr ""

#: of xonsh.tools.is_history_tuple:2
msgid "Tests if something is a proper history value, units tuple."
msgstr ""

#: of xonsh.tools.is_int:2
msgid "Tests if something is an integer"
msgstr ""

#: of xonsh.tools.is_int_as_str:2
msgid "Test if string x is an integer. If not a string return False."
msgstr ""

#: of xonsh.tools.is_logfile_opt:2
msgid ""
"Checks if x is a valid $XONSH_TRACEBACK_LOGFILE option. Returns False if "
"x is not a writable/creatable file or an empty string or None."
msgstr ""

#: of xonsh.tools.is_nonstring_seq_of_strings:2
msgid ""
"Tests if something is a sequence of strings, where the top-level sequence"
" is not a string itself."
msgstr ""

#: of xonsh.tools.is_slice:2
msgid "Tests if something is a slice"
msgstr ""

#: of xonsh.tools.is_slice_as_str:2
msgid "Test if string x is a slice. If not a string return False."
msgstr ""

#: of xonsh.tools.is_str_str_dict:2
msgid "Tests if something is a str:str dictionary"
msgstr ""

#: of xonsh.tools.is_string:2
msgid "Tests if something is a string"
msgstr ""

#: of xonsh.tools.is_string_or_callable:2
msgid "Tests if something is a string or callable"
msgstr ""

#: of xonsh.tools.is_string_seq:2
msgid "Tests if something is a sequence of strings"
msgstr ""

#: of xonsh.tools.is_string_set:2
msgid "Tests if something is a set of strings"
msgstr ""

#: of xonsh.tools.is_writable_file:2
msgid "Checks if a filepath is valid for writing."
msgstr ""

#: of xonsh.tools.levenshtein:2
msgid "Calculates the Levenshtein distance between a and b."
msgstr ""

#: of xonsh.tools.logfile_opt_to_str:2
msgid "Detypes a $XONSH_TRACEBACK_LOGFILE option."
msgstr ""

#: of xonsh.tools.normabspath:2
msgid "Returns as normalized absolute path, namely, normcase(abspath(p))"
msgstr ""

#: of xonsh.tools.on_main_thread:2
msgid "Checks if we are on the main thread or not."
msgstr ""

#: of xonsh.tools.pathsep_to_seq:2
msgid "Converts a os.pathsep separated string to a sequence of strings."
msgstr ""

#: of xonsh.tools.pathsep_to_set:2
msgid "Converts a os.pathsep separated string to a set of strings."
msgstr ""

#: of xonsh.tools.pathsep_to_upper_seq:2
msgid "Converts a os.pathsep separated string to a sequence of uppercase strings."
msgstr ""

#: of xonsh.tools.print_color:2
msgid ""
"Prints a string that may contain colors. This dispatched to the shell "
"method of the same name. Colors will be formatted if they have not "
"already been."
msgstr ""

#: of xonsh.tools.print_exception:2
msgid "Print exceptions with/without traceback."
msgstr ""

#: of xonsh.tools.ptk2_color_depth_setter:2
msgid ""
"Setter function for $PROMPT_TOOLKIT_COLOR_DEPTH. Also updates os.environ "
"so prompt toolkit can pickup the value."
msgstr ""

#: of xonsh.tools.replace_logical_line:2
msgid ""
"Replaces lines at idx that may end in line continuation with a logical "
"line that spans n lines."
msgstr ""

#: of xonsh.tools.safe_hasattr:2
msgid ""
"In recent versions of Python, hasattr() only catches AttributeError. This"
" catches all errors."
msgstr ""

#: of xonsh.tools.seq_to_pathsep:2
msgid "Converts a sequence to an os.pathsep separated string."
msgstr ""

#: of xonsh.tools.seq_to_upper_pathsep:2
msgid "Converts a sequence to an uppercase os.pathsep separated string."
msgstr ""

#: of xonsh.tools.set_to_csv:2
msgid "Convert a set of strings to a comma-separated list of strings."
msgstr ""

#: of xonsh.tools.set_to_pathsep:2
msgid ""
"Converts a set to an os.pathsep separated string. The sort kwarg "
"specifies whether to sort the set prior to str conversion."
msgstr ""

#: of xonsh.tools.setup_win_unicode_console:2
msgid "\"Enables or disables unicode display on windows."
msgstr ""

#: of xonsh.tools.starting_whitespace:2
msgid "Returns the whitespace at the start of a string"
msgstr ""

#: of xonsh.tools.str_to_env_path:2
msgid ""
"Converts a string to an environment path, ie a list of strings, splitting"
" on the OS separator."
msgstr ""

#: of xonsh.tools.strip_simple_quotes:2
msgid ""
"Gets rid of single quotes, double quotes, single triple quotes, and "
"single double quotes from a string, if present front and back of a "
"string. Otherwiswe, does nothing."
msgstr ""

#: of xonsh.tools.subexpr_before_unbalanced:2
msgid "Obtains the expression prior to last unbalanced left token."
msgstr ""

#: of xonsh.tools.subexpr_from_unbalanced:2
msgid ""
"Attempts to pull out a valid subexpression for unbalanced grouping, based"
" on opening tokens, eg. '(', and closing tokens, eg. ')'.  This does not "
"do full tokenization, but should be good enough for tab completion."
msgstr ""

#: of xonsh.tools.subproc_toks:2
msgid ""
"Encapsulates tokens in a source code line in a uncaptured subprocess ![] "
"starting at a minimum column. If there are no tokens (ie in a comment "
"line) this returns None. If greedy is True, it will encapsulate normal "
"parentheses. Greedy is False by default."
msgstr ""

#: of xonsh.tools.suggest_commands:2
msgid "Suggests alternative commands given an environment and aliases."
msgstr ""

#: of xonsh.tools.suggestion_sort_helper:2
msgid ""
"Returns a score (lower is better) for x based on how similar it is to y."
"  Used to rank suggestions."
msgstr ""

#: of xonsh.tools.swap:2
msgid ""
"Swaps a current variable name in a namespace for another value, and then "
"replaces it when the context is exited."
msgstr ""

#: of xonsh.tools.swap_values:2
msgid ""
"Updates a dictionary (or other mapping) with values from another mapping,"
" and then restores the original mapping when the context is exited."
msgstr ""

#: of xonsh.tools.to_bool:2
msgid "\"Converts to a boolean in a semantically meaningful way."
msgstr ""

#: of xonsh.tools.to_bool_or_int:2
msgid "Converts a value to a boolean or an integer."
msgstr ""

#: of xonsh.tools.to_dict:2
msgid "Converts a string to a dictionary"
msgstr ""

#: of xonsh.tools.to_dynamic_cwd_tuple:2
msgid "Convert to a canonical cwd_width tuple."
msgstr ""

#: of xonsh.tools.to_history_tuple:2
msgid "Converts to a canonical history tuple."
msgstr ""

#: of xonsh.tools.to_itself:2
msgid "No conversion, returns itself."
msgstr ""

#: of xonsh.tools.to_logfile_opt:2
msgid ""
"Converts a $XONSH_TRACEBACK_LOGFILE option to either a str containing the"
" filepath if it is a writable file or None if the filepath is not valid, "
"informing the user on stderr about the invalid choice."
msgstr ""

#: of xonsh.tools.to_str_str_dict:2
msgid "Converts a string to str:str dictionary"
msgstr ""

#: of xonsh.tools.uncapturable:2
msgid ""
"Decorator that specifies that a callable alias should not be run with any"
" capturing. This is often needed if the alias call interactive "
"subprocess, like pagers and text editors."
msgstr ""

#: of xonsh.tools.unthreadable:2
msgid ""
"Decorator that specifies that a callable alias should be run only on the "
"main thread process. This is often needed for debuggers and profilers."
msgstr ""

#: of xonsh.tools.HISTORY_UNITS:2
msgid "Maps lowercase unit names to canonical name and conversion utilities."
msgstr ""

#: of xonsh.tools.RE_BEGIN_STRING:2
msgid ""
"Regular expression matching the start of a string, including quotes and "
"leading characters (r, b, or u)"
msgstr ""

#: of xonsh.tools.RE_STRING_CONT:2
msgid ""
"Dictionary mapping starting quote sequences to regular expressions that "
"match the contents of a string beginning with those quotes (not including"
" the terminating quotes)"
msgstr ""

#: of xonsh.tools.RE_STRING_START:2
msgid ""
"Regular expression matching the characters before the quotes when "
"starting a string (r, b, or u, case insensitive)"
msgstr ""

#: ../../api/tracer.rst:5
msgid "Tracer (``xonsh.tracer``)"
msgstr ""

#: of xonsh.tracer:1
msgid "Implements a xonsh tracer."
msgstr ""

#: of xonsh.tracer.TracerType:2
msgid ""
"Represents a xonsh tracer object, which keeps track of all tracing state."
" This is a singleton."
msgstr ""

#: of xonsh.tracer.TracerType.color_output:2
msgid "Specify whether or not the tracer output should be colored."
msgstr ""

#: of xonsh.tracer.TracerType.start:2
msgid "Starts tracing a file."
msgstr ""

#: of xonsh.tracer.TracerType.stop:2
msgid "Stops tracing a file."
msgstr ""

#: of xonsh.tracer.TracerType.trace:2
msgid "Implements a line tracing function."
msgstr ""

#: of xonsh.tracer.tracer_format_line:2
msgid "Formats a trace line suitable for printing."
msgstr ""

#: of xonsh.tracer.tracermain:2
msgid "Main function for tracer command-line interface."
msgstr ""

#: ../../api/vox.rst:5
msgid "Vox (``xontrib.voxapi``)"
msgstr ""

#: of xontrib.voxapi:1
msgid "API for Vox, the Python virtual environment manager for xonsh."
msgstr ""

#: of xontrib.voxapi:3
msgid ""
"Vox defines several events related to the life cycle of virtual "
"environments:"
msgstr ""

#: of xontrib.voxapi:5
msgid "``vox_on_create(env: str) -> None``"
msgstr ""

#: of xontrib.voxapi:6
msgid "``vox_on_activate(env: str) -> None``"
msgstr ""

#: of xontrib.voxapi:7
msgid "``vox_on_deactivate(env: str) -> None``"
msgstr ""

#: of xontrib.voxapi:8
msgid "``vox_on_delete(env: str) -> None``"
msgstr ""

#: of xontrib.voxapi.EnvironmentInUse:2
msgid ""
"The given environment is currently activated, and the operation cannot be"
" performed."
msgstr ""

#: of xontrib.voxapi.NoEnvironmentActive:2
msgid ""
"No environment is currently activated, and the operation cannot be "
"performed."
msgstr ""

#: of xontrib.voxapi.VirtualEnvironment:21
msgid "Create new instance of VirtualEnvironment(env, bin, lib, inc)"
msgstr ""

#: of xontrib.voxapi.Vox:2
msgid "API access to Vox and virtual environments, in a dict-like format."
msgstr ""

#: of xontrib.voxapi.Vox:4
msgid "Makes use of the VirtualEnvironment namedtuple:"
msgstr ""

#: of xontrib.voxapi.Vox:6
msgid "``env``: The full path to the environment"
msgstr ""

#: of xontrib.voxapi.Vox:7
msgid "``bin``: The full path to the bin/Scripts directory of the environment"
msgstr ""

#: of xontrib.voxapi.Vox.activate:2
msgid "Activate a virtual environment."
msgstr ""

#: of xontrib.voxapi.Vox.activate:8
msgid "Virtual environment name or absolute path."
msgstr ""

#: of xontrib.voxapi.Vox.active:2
msgid "Get the name of the active virtual environment."
msgstr ""

#: of xontrib.voxapi.Vox.active:4
msgid "You can use this as a key to get further information."
msgstr ""

#: of xontrib.voxapi.Vox.active:6
msgid "Returns None if no environment is active."
msgstr ""

#: of xontrib.voxapi.Vox.create:2 xontrib.voxapi.Vox.upgrade:2
msgid "Create a virtual environment in $VIRTUALENV_HOME with python3's ``venv``."
msgstr ""

#: of xontrib.voxapi.Vox.create:8 xontrib.voxapi.Vox.upgrade:10
msgid "Virtual environment name"
msgstr ""

#: of xontrib.voxapi.Vox.create:11 xontrib.voxapi.Vox.upgrade:13
msgid "**interpreter: str**"
msgstr ""

#: of xontrib.voxapi.Vox.create:11
msgid "Python interpreter used to create the virtual environment."
msgstr ""

#: of xontrib.voxapi.Vox.create:15
msgid "**system_site_packages**"
msgstr ""

#: of xontrib.voxapi.Vox.create:14
msgid ""
"If True, the system (global) site-packages dir is available to created "
"environments."
msgstr ""

#: of xontrib.voxapi.Vox.create:19 xontrib.voxapi.Vox.upgrade:17
msgid "**symlinks**"
msgstr ""

#: of xontrib.voxapi.Vox.create:18 xontrib.voxapi.Vox.upgrade:16
msgid ""
"If True, attempt to symlink rather than copy files into virtual "
"environment."
msgstr ""

#: of xontrib.voxapi.Vox.create:35 xontrib.voxapi.Vox.upgrade:33
msgid "**with_pip**"
msgstr ""

#: of xontrib.voxapi.Vox.create:22
msgid ""
"If True, ensure pip is installed in the virtual environment. (Default is "
"True)"
msgstr ""

#: of xontrib.voxapi.Vox.deactivate:2
msgid "Deactivate the active virtual environment. Returns its name."
msgstr ""

#: of xontrib.voxapi.Vox.upgrade:4
msgid ""
"WARNING: If a virtual environment was created with symlinks or without "
"PIP, you must specify these options again on upgrade."
msgstr ""

#: of xontrib.voxapi.Vox.upgrade:13
msgid "The Python interpreter used to create the virtualenv"
msgstr ""

#: of xontrib.voxapi.Vox.upgrade:20
msgid "If True, ensure pip is installed in the virtual environment."
msgstr ""

#: ../../api/wizard.rst:5
msgid "Wizard Making Tools (``xonsh.wizard``)"
msgstr ""

#: of xonsh.wizard:1
msgid ""
"Tools for creating command-line and web-based wizards from a tree of "
"nodes."
msgstr ""

#: of xonsh.wizard.FileInserter:2
msgid ""
"Node for inserting the state into a file in between a prefix and suffix. "
"The state is converted according to some dumper rules."
msgstr ""

#: of xonsh.wizard.FileInserter:29
msgid ""
"Starting unique string in file to find and begin the insertion at, e.g. "
"'# XONSH WIZARD START"
msgstr ""

#: of xonsh.wizard.FileInserter:35
msgid "**'**"
msgstr ""

#: of xonsh.wizard.FileInserter:35
msgid "suffix"
msgstr ""

#: of xonsh.wizard.FileInserter:34
msgid ""
"Ending unique string to find in the file and end the replacement at, e.g."
" '"
msgstr ""

#: of xonsh.wizard.FileInserter:76
msgid "**# XONSH WIZARD END'**"
msgstr ""

#: of xonsh.wizard.FileInserter:53
msgid "dump_rules"
msgstr ""

#: of xonsh.wizard.FileInserter:52
msgid "dict of strs to functions"
msgstr ""

#: of xonsh.wizard.FileInserter:39
msgid ""
"This is a dictionary that maps the path-like match strings to functions "
"that take the flat path and the value as arguments and convert the state "
"value at a path to a string. The keys here may use wildcards (as seen in "
"the standard library fnmatch module). For example::"
msgstr ""

#: of xonsh.wizard.FileInserter:51
msgid ""
"If a wildcard is not used in a path, then that rule will be used used on "
"an exact match. If wildcards are used, the deepest and longest match is "
"used.  If None is given instead of a the function, it means to skip "
"generating that key."
msgstr ""

#: of xonsh.wizard.FileInserter:55
msgid "default_file"
msgstr ""

#: of xonsh.wizard.FileInserter:56 xonsh.wizard.LoadJSON:29
#: xonsh.wizard.SaveJSON:29 xonsh.wizard.StateFile:29
msgid "The default filename to save the file as."
msgstr ""

#: of xonsh.wizard.FileInserter:59
msgid "check"
msgstr ""

#: of xonsh.wizard.FileInserter:58 xonsh.wizard.LoadJSON:32
#: xonsh.wizard.SaveJSON:32 xonsh.wizard.StateFile:32
msgid ""
"Whether to print the current state and ask if it should be saved/loaded "
"prior to asking for the file name and saving the file, default=True."
msgstr ""

#: of xonsh.wizard.FileInserter:76
msgid "ask_filename"
msgstr ""

#: of xonsh.wizard.FileInserter:62 xonsh.wizard.LoadJSON:37
#: xonsh.wizard.SaveJSON:37 xonsh.wizard.StateFile:37
msgid ""
"Whether to ask for the filename (if ``False``, always use the default "
"filename)"
msgstr ""

#: of xonsh.wizard.FileInserter.dumps:2
msgid ""
"Dumps a flat mapping of (string path keys, values) pairs and returns a "
"formatted string."
msgstr ""

#: of xonsh.wizard.FileInserter.find_rule:2
msgid ""
"For a path, find the key and conversion function that should be used to "
"dump a value."
msgstr ""

#: of xonsh.wizard.Input:2
msgid "Gets input from the user."
msgstr ""

#: of xonsh.wizard.Input:28
msgid "**prompt**"
msgstr ""

#: of xonsh.wizard.Input:28
msgid "Prompt string prior to input"
msgstr ""

#: of xonsh.wizard.Input:32 xonsh.wizard.Question:35
msgid "**converter**"
msgstr ""

#: of xonsh.wizard.Input:31 xonsh.wizard.Question:34
msgid "callable, optional"
msgstr ""

#: of xonsh.wizard.Input:31
msgid "Converts the string the user typed into another object prior to storage."
msgstr ""

#: of xonsh.wizard.Input:37
msgid "**show_conversion**"
msgstr ""

#: of xonsh.wizard.Input:35
msgid ""
"Flag for whether or not to show the results of the conversion function if"
" the conversion function was meaningfully executed. Default False."
msgstr ""

#: of xonsh.wizard.Input:41 xonsh.xonfig.make_xonfig_wizard:11
msgid "**confirm**"
msgstr ""

#: of xonsh.wizard.Input:40
msgid "Whether the input should be confirmed until true or broken, default False."
msgstr ""

#: of xonsh.wizard.Input:45
msgid "**retry**"
msgstr ""

#: of xonsh.wizard.Input:44
msgid ""
"In the event that the conversion operation fails, should users be re-"
"prompted until they provide valid input. Default False."
msgstr ""

#: of xonsh.wizard.Input:61 xonsh.wizard.Question:51 xonsh.wizard.While:59
#: xonsh.wizard.YesNo:50
msgid "**path**"
msgstr ""

#: of xonsh.wizard.Input:60 xonsh.wizard.Question:50 xonsh.wizard.While:58
#: xonsh.wizard.YesNo:49
msgid "str or sequence of str, optional"
msgstr ""

#: of xonsh.wizard.Input:48 xonsh.wizard.Question:38 xonsh.wizard.While:46
#: xonsh.wizard.YesNo:37
msgid "A path within the storage object."
msgstr ""

#: of xonsh.wizard.LoadJSON:2
msgid ""
"Node for loading the state as a JSON file under a default or user given "
"file name."
msgstr ""

#: of xonsh.wizard.LoadJSON:29 xonsh.wizard.SaveJSON:29
#: xonsh.wizard.StateFile:29 xonsh.xonfig.make_xonfig_wizard:8
msgid "**default_file**"
msgstr ""

#: of xonsh.wizard.LoadJSON:34 xonsh.wizard.SaveJSON:34
#: xonsh.wizard.StateFile:34
msgid "**check**"
msgstr ""

#: of xonsh.wizard.LoadJSON:51 xonsh.wizard.SaveJSON:51
#: xonsh.wizard.StateFile:51
msgid "**ask_filename**"
msgstr ""

#: of xonsh.wizard.Message:2
msgid "Contains a simple message to report to the user."
msgstr ""

#: of xonsh.wizard.Node:2
msgid "Base type of all nodes."
msgstr ""

#: of xonsh.wizard.Pass:2
msgid "Simple do-nothing node"
msgstr ""

#: of xonsh.wizard.PrettyFormatter:2
msgid "Formats a tree of nodes into a pretty string"
msgstr ""

#: of xonsh.wizard.PrettyFormatter.visit:2 xonsh.wizard.PromptVisitor.visit:2
#: xonsh.wizard.StateVisitor.visit:2 xonsh.wizard.Visitor.visit:2
msgid "Walks over a node.  If no node is provided, the tree is used."
msgstr ""

#: of xonsh.wizard.PromptVisitor:2
msgid "Visits the nodes in the tree via the a command-line prompt."
msgstr ""

#: of xonsh.wizard.PromptVisitor:28
msgid "**tree**"
msgstr ""

#: of xonsh.wizard.PromptVisitor:27
msgid "Node, optional"
msgstr ""

#: of xonsh.wizard.PromptVisitor:28
msgid "Tree of nodes to start visitor with."
msgstr ""

#: of xonsh.wizard.PromptVisitor:31
msgid "**state**"
msgstr ""

#: of xonsh.wizard.PromptVisitor:31
msgid "Initial state to begin with."
msgstr ""

#: of xonsh.wizard.PromptVisitor:34
msgid ""
"Options that are passed through to the prompt via the shell's "
"singleline() method. See BaseShell for mor details."
msgstr ""

#: of xonsh.wizard.PromptVisitor.flatten:2 xonsh.wizard.StateVisitor.flatten:2
msgid ""
"Returns a dict version of the store whose keys are paths. Note that list "
"and dict entries will always end in '/', allowing disambiquation in "
"dump_rules."
msgstr ""

#: of xonsh.wizard.PromptVisitor.store:2 xonsh.wizard.StateVisitor.store:2
msgid "Stores a value at the path location."
msgstr ""

#: of xonsh.wizard.Question:2
msgid "Asks a question and then chooses the next node based on the response."
msgstr ""

#: of xonsh.wizard.Question:28 xonsh.wizard.YesNo:28
msgid "**question**"
msgstr ""

#: of xonsh.wizard.Question:28 xonsh.wizard.YesNo:28
msgid "The question itself."
msgstr ""

#: of xonsh.wizard.Question:31
msgid "**responses**"
msgstr ""

#: of xonsh.wizard.Question:30
msgid "dict with str keys and Node values"
msgstr ""

#: of xonsh.wizard.Question:31
msgid "Mapping from user-input responses to nodes."
msgstr ""

#: of xonsh.wizard.Question:34
msgid ""
"Converts the string the user typed into another object that serves as a "
"key to the responses dict."
msgstr ""

#: of xonsh.wizard.SaveJSON:2
msgid ""
"Node for saving the state as a JSON file under a default or user given "
"file name."
msgstr ""

#: of xonsh.wizard.StateFile:2
msgid ""
"Node for representing the state as a file under a default or user given "
"file name. This node type is likely not useful on its own."
msgstr ""

#: of xonsh.wizard.StateVisitor:2
msgid ""
"This class visits the nodes and stores the results in a top-level dict of"
" data according to the state path of the node. The the node does not have"
" a path or the path does not exist, the storage is skipped. This class "
"can be optionally initialized with an existing state."
msgstr ""

#: of xonsh.wizard.StoreNonEmpty:2
msgid ""
"Stores the user input only if the input was not an empty string. This "
"works by wrapping the converter function."
msgstr ""

#: of xonsh.wizard.TrueFalse:2
msgid "Input node the returns a True or False value."
msgstr ""

#: of xonsh.wizard.TrueFalseBreak:2
msgid "Input node the returns a True, False, or 'break' value."
msgstr ""

#: of xonsh.wizard.UnstorableType:2
msgid ""
"Represents an unstorable return value for when no input was given or such"
" input was skipped. Typically represented by the Unstorable singleton."
msgstr ""

#: of xonsh.wizard.Visitor:2
msgid ""
"Super-class for all classes that should walk over a tree of nodes. This "
"implements the visit() method."
msgstr ""

#: of xonsh.wizard.While:2
msgid "Computes a body while a condition function evaluates to true."
msgstr ""

#: of xonsh.wizard.While:4
msgid ""
"The condition function has the form ``cond(visitor=None, node=None)`` and"
" must return an object that responds to the Python magic method "
"``__bool__``. The beg attribute specifies the number to start the loop "
"iteration at."
msgstr ""

#: of xonsh.wizard.While:32
msgid "**cond**"
msgstr ""

#: of xonsh.wizard.While:31
msgid "Function that determines if the next loop iteration should be executed."
msgstr ""

#: of xonsh.wizard.While:37
msgid "**body**"
msgstr ""

#: of xonsh.wizard.While:36
msgid "sequence of nodes"
msgstr ""

#: of xonsh.wizard.While:35
msgid ""
"A list of node to execute on each iteration. The condition function has "
"the form ``cond(visitor=None, node=None)`` and must return an object that"
" responds to the Python magic method ``__bool__``."
msgstr ""

#: of xonsh.wizard.While:40
msgid "**idxname**"
msgstr ""

#: of xonsh.wizard.While:40
msgid "The variable name for the index."
msgstr ""

#: of xonsh.wizard.While:43
msgid "**beg**"
msgstr ""

#: of xonsh.wizard.While:43
msgid "The first index value when evaluating path format strings."
msgstr ""

#: of xonsh.wizard.Wizard:2
msgid "Top-level node in the tree."
msgstr ""

#: of xonsh.wizard.YesNo:2
msgid "Represents a simple yes/no question."
msgstr ""

#: of xonsh.wizard.YesNo:31
msgid "**yes**"
msgstr ""

#: of xonsh.wizard.YesNo:30 xonsh.wizard.YesNo:33
msgid "Node"
msgstr ""

#: of xonsh.wizard.YesNo:31
msgid "Node to execute if the response is True."
msgstr ""

#: of xonsh.wizard.YesNo:34
msgid "**no**"
msgstr ""

#: of xonsh.wizard.YesNo:34
msgid "Node to execute if the response is False."
msgstr ""

#: of xonsh.wizard.canon_path:2
msgid ""
"Returns the canonical form of a path, which is a tuple of str or ints. "
"Indices may be optionally passed in."
msgstr ""

#: of xonsh.wizard.create_truefalse_cond:2
msgid ""
"This creates a basic condition function for use with nodes like While or "
"other conditions. The condition function creates and visits a TrueFalse "
"node and returns the result. This TrueFalse node takes the prompt and "
"path that is passed in here."
msgstr ""

#: of xonsh.wizard.ensure_str_or_int:2
msgid "Creates a string or int."
msgstr ""

#: ../../api/xonfig.rst:5
msgid "Xonsh Configuration Utility (``xonsh.xonfig``)"
msgstr ""

#: of xonsh.xonfig:1
msgid "The xonsh configuration (xonfig) utility."
msgstr ""

#: of xonsh.xonfig.make_env_wiz:2
msgid "Makes an environment variable wizard."
msgstr ""

#: of xonsh.xonfig.make_envvar:2
msgid "Makes a StoreNonEmpty node for an environment variable."
msgstr ""

#: of xonsh.xonfig.make_exit_message:2
msgid "Creates a message for how to exit the wizard."
msgstr ""

#: of xonsh.xonfig.make_fs_wiz:2
msgid "Makes the foreign shell part of the wizard."
msgstr ""

#: of xonsh.xonfig.make_xonfig_wizard:2
msgid "Makes a configuration wizard for xonsh config file."
msgstr ""

#: of xonsh.xonfig.make_xonfig_wizard:8
msgid "Default filename to save and load to. User will still be prompted."
msgstr ""

#: of xonsh.xonfig.make_xonfig_wizard:11
msgid "Confirm that the main part of the wizard should be run."
msgstr ""

#: of xonsh.xonfig.make_xonfig_wizard:28
msgid "**no_wizard_file**"
msgstr ""

#: of xonsh.xonfig.make_xonfig_wizard:14
msgid ""
"Filename for that will flag to future runs that the wizard should not be "
"run again. If None (default), this defaults to default_file."
msgstr ""

#: of xonsh.xonfig.make_xontrib:2
msgid "Makes a message and StoreNonEmpty node for a xontrib."
msgstr ""

#: of xonsh.xonfig.make_xontribs_wiz:2
msgid "Makes a xontrib wizard."
msgstr ""

#: of xonsh.xonfig.xonfig_main:2
msgid "Main xonfig entry point."
msgstr ""

#: ../../api/xoreutils/cat.rst:5
msgid "Cat Command -- :mod:`xonsh.xoreutils.cat`"
msgstr ""

#: of xonsh.xoreutils.cat:1
msgid "Implements a cat command for xonsh."
msgstr ""

#: of xonsh.xoreutils.cat.cat:2
msgid "A cat command for xonsh."
msgstr ""

#: ../../api/xoreutils/echo.rst:5
msgid "Echo Command -- :mod:`xonsh.xoreutils.echo`"
msgstr ""

#: of xonsh.xoreutils.echo:1
msgid "Implements a simple echo command for xonsh."
msgstr ""

#: of xonsh.xoreutils.echo.echo:2
msgid "A simple echo command."
msgstr ""

#: ../../api/xoreutils/index.rst:5
msgid "Core Utilities API"
msgstr ""

#: ../../api/xoreutils/index.rst:6
msgid "**Command Modules:**"
msgstr ""

#: ../../api/xoreutils/index.rst:18
msgid "**Helper Modules:**"
msgstr ""

#: ../../api/xoreutils/pwd.rst:5
msgid "Pwd Command -- :mod:`xonsh.xoreutils.pwd`"
msgstr ""

#: of xonsh.xoreutils.pwd:1
msgid "A pwd implementation for xonsh."
msgstr ""

#: of xonsh.xoreutils.pwd.pwd:2
msgid "A pwd implementation"
msgstr ""

#: ../../api/xoreutils/tee.rst:5
msgid "Tee Command -- :mod:`xonsh.xoreutils.tee`"
msgstr ""

#: of xonsh.xoreutils.tee:1
msgid "A tee implementation for xonsh."
msgstr ""

#: of xonsh.xoreutils.tee.tee:2
msgid "A tee command for xonsh."
msgstr ""

#: ../../api/xoreutils/tty.rst:5
msgid "TTY Command -- :mod:`xonsh.xoreutils.tty`"
msgstr ""

#: of xonsh.xoreutils.tty:1
msgid "A tty implementation for xonsh"
msgstr ""

#: of xonsh.xoreutils.tty.tty:2
msgid "A tty command for xonsh."
msgstr ""

#: ../../api/xoreutils/uptime.rst:5
msgid "System Uptime -- :mod:`xonsh.xoreutils.uptime`"
msgstr ""

#: of xonsh.xoreutils.uptime:1
msgid "Provides a cross-platform way to figure out the system uptime."
msgstr ""

#: of xonsh.xoreutils.uptime:3
msgid ""
"Should work on damned near any operating system you can realistically "
"expect to be asked to write Python code for. If this module is invoked as"
" a stand-alone script, it will print the current uptime in a human-"
"readable format, or display an error message if it can't, to standard "
"output."
msgstr ""

#: of xonsh.xoreutils.uptime:9
msgid ""
"This file was forked from the uptime project: "
"https://github.com/Cairnarvon/uptime Copyright (c) 2012, Koen Crolla, All"
" rights reserved."
msgstr ""

#: of xonsh.xoreutils.uptime.boottime:2
msgid "Returns boot time if remotely possible, or None if not."
msgstr ""

#: of xonsh.xoreutils.uptime.uptime:2
msgid "Returns uptime in seconds if even remotely possible, or None if not."
msgstr ""

#: ../../api/xoreutils/util.rst:5
msgid "Core Utilites Utilities -- :mod:`xonsh.xoreutils.util`"
msgstr ""

#: of xonsh.xoreutils.util:1
msgid "Assorted utilities for xonsh core utils."
msgstr ""

#: of xonsh.xoreutils.util.arg_handler:2
msgid "A simple argument handler for xoreutils."
msgstr ""

#: ../../api/xoreutils/which.rst:5
msgid "Which Command -- :mod:`xonsh.xoreutils.which`"
msgstr ""

#: of xonsh.xoreutils.which:1
msgid "Implements the which xoreutil."
msgstr ""

#: of xonsh.xoreutils.which.AWitchAWitch:2
msgid "The Ducstring, the mother of all ducs."
msgstr ""

#: of xonsh.xoreutils.which.print_alias:2
msgid "Print the alias."
msgstr ""

#: of xonsh.xoreutils.which.print_global_object:2
msgid "Print the object."
msgstr ""

#: of xonsh.xoreutils.which.print_path:2
msgid "Print the name and path of the command."
msgstr ""

#: of xonsh.xoreutils.which.which:2
msgid ""
"Checks if each arguments is a xonsh aliases, then if it's an executable, "
"then finally return an error code equal to the number of misses. If '-a' "
"flag is passed, run both to return both `xonsh` match and `which` match."
msgstr ""

