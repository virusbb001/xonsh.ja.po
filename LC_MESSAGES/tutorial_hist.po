# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Anthony Scopatz
# This file is distributed under the same license as the xonsh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xonsh 0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-30 00:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorial_hist.rst:5
msgid "Tutorial: History"
msgstr ""

#: ../../tutorial_hist.rst:6
msgid ""
"Import your best Leonard Nimoy documentary voice and get ready for the "
"xonsh tutorial on ``history``."
msgstr ""

#: ../../tutorial_hist.rst:10
msgid "How is xonsh history different?"
msgstr ""

#: ../../tutorial_hist.rst:11
msgid ""
"Most shells - bash foremost among them - think of history as a linear "
"sequence of past commands that have been entered into *the* terminal. "
"This is saved when *the* shell exits, and loaded when *the* new shell "
"starts. But this is no longer how the world works."
msgstr ""

#: ../../tutorial_hist.rst:16
msgid ""
"The world is a messy, asynchronous place. We usually have at least as "
"many terminals (and shells) open at a time as we can practically handle -"
" and probably even more! In xonsh, history acknowledges that this is the "
"case. Instead of a single history file of inputs, xonsh implements a "
"collection of JSON-formatted history files that can be thought of as "
"having the following structure:"
msgstr ""

#: ../../tutorial_hist.rst:39
msgid ""
"This rich set of data allows xonsh to do much more advanced inspection "
"and manipulation. The sessionid, locking, and one-file-per-shell ideas "
"allow for there to be multiple instances of xonsh running at the same "
"time without competing and overwriting history constantly. Of course, an "
"external process deleting a history file can still cause problems. But "
"hey, the world and the file system are messy places to be!"
msgstr ""

#: ../../tutorial_hist.rst:47
msgid "Why have rich history?"
msgstr ""

#: ../../tutorial_hist.rst:48
msgid ""
"Often by the time you know that you need a historical artifact, it is "
"already too late. You can't remember:"
msgstr ""

#: ../../tutorial_hist.rst:51
msgid "the input exactly,"
msgstr ""

#: ../../tutorial_hist.rst:52
msgid ""
"you think that you remember the output but when you rerun the command "
"what you get now seems somehow different,"
msgstr ""

#: ../../tutorial_hist.rst:54
msgid "who knows what the return code was,"
msgstr ""

#: ../../tutorial_hist.rst:55
msgid ""
"and whatever command you ran right before is now lost in the mists of "
"time!"
msgstr ""

#: ../../tutorial_hist.rst:57
msgid ""
"So the reasons for having rich history are debugging and reproducibility."
" Xonsh takes the guess-work out of the past. There is even the ability to"
" store all of stdout, though this is turned off by default. If history "
"was just a static file, it would be more like a server log than a "
"traditional history file.  However, xonsh also has the ability to "
"``replay`` a history file."
msgstr ""

#: ../../tutorial_hist.rst:63
msgid ""
"Replaying history allows previous sessions to act as scripts in a new or "
"the same environment. Replaying will create a new, separate history "
"session and file. The two histories - even though they contain the same "
"inputs - are then able to be diff'ed. Diff'ing can be done through xonsh "
"custom history diff'ing tool, which can help pinpoint differences "
"stemming from the environment as well as the input/output.  This cycle of"
" do-replay-diff is more meaningful than a traditional, \"What did "
"I/it/the Universe just do?!\" approach."
msgstr ""

#: ../../tutorial_hist.rst:70
msgid ""
"Of course, nothing has ever stopped anyone from pulling Unix tools like "
"``env``, ``script``, ``diff``, and others together to deliver the same "
"kind of capability. However, in practice, no one does this. With xonsh, "
"rich and useful history come batteries included."
msgstr ""

#: ../../tutorial_hist.rst:75
msgid "``history`` command"
msgstr ""

#: ../../tutorial_hist.rst:76
msgid ""
"All xonsh history inspection and manipulation goes through the top-level "
"``history`` alias or command.  If you run this without an ``action`` "
"argument, it will default to the ``show`` action, see below."
msgstr ""

#: ../../tutorial_hist.rst:84
msgid ""
"Also note that the history object itself can be accessed through the "
"xonsh built-in variable ``__xonsh__.history``."
msgstr ""

#: ../../tutorial_hist.rst:89
msgid "``show`` action"
msgstr ""

#: ../../tutorial_hist.rst:90
msgid ""
"The ``show`` action for the history command mimics what the ``history`` "
"command does in other shells.  Namely, it displays the past inputs along "
"with the index of these inputs. This operates on the current session by "
"default and is the default action for the ``history`` command. For "
"example,"
msgstr ""

#: ../../tutorial_hist.rst:106
msgid "History is zero-indexed; this is still Python."
msgstr ""

#: ../../tutorial_hist.rst:108
msgid ""
"The show command can also optionally take as an argument any integer (to "
"just display that history index) or a slice (to display a range of "
"history indices). To display only the even indices from above, you could "
"write:"
msgstr ""

#: ../../tutorial_hist.rst:118
msgid ""
"One can also use many slice/integer arguments to get different portions "
"of history"
msgstr ""

#: ../../tutorial_hist.rst:120
msgid ""
"After ``show`` an option that indicates which history to be returned can "
"be used:"
msgstr ""

#: ../../tutorial_hist.rst:122
msgid ""
"``xonsh`` displays the past inputs from all valid json files found in "
"``XONSH_DATA_DIR``. As such, this operates on all past and present xonsh "
"sessions."
msgstr ""

#: ../../tutorial_hist.rst:126
msgid "``all`` is an alias for ``xonsh``."
msgstr ""

#: ../../tutorial_hist.rst:128
msgid ""
"``zsh`` will display all history from the history file specified by the "
"``HISTFILE`` environmental variable in zsh. By default this is "
"``~/.zsh_history``. However, they can also be respectively specified in "
"both ``~/.zshrc`` and ``~/.zprofile``. Xonsh will parse these files (rc "
"file first) to check if ``HISTFILE`` has been set."
msgstr ""

#: ../../tutorial_hist.rst:134
msgid ""
"The ``bash`` action will display all history from the history file "
"specified by the ``HISTFILE`` environmental variable in bash. By default "
"this is ``~/.bash_history``. However, they can also be respectively "
"specified in both ``~/.bashrc`` and ``~/.bash_profile``. Xonsh will parse"
" these files (rc file first) to check if ``HISTFILE`` has been set."
msgstr ""

#: ../../tutorial_hist.rst:141
msgid ""
"``show`` also accepts other options for more control over history output,"
" the ``-n`` option is used to enumerate the commands, the ``-t`` option "
"is used to show the timestamps, and more, try out ``history show --help``"
" for a list of options."
msgstr ""

#: ../../tutorial_hist.rst:148
msgid "``id`` action"
msgstr ""

#: ../../tutorial_hist.rst:149
msgid ""
"Each xonsh history has its own universally unique ``sessionid``. The "
"``id`` action is how you display this identified. For instance,"
msgstr ""

#: ../../tutorial_hist.rst:158
msgid "``file`` action"
msgstr ""

#: ../../tutorial_hist.rst:159
msgid ""
"Similarly, each xonsh history has its own file associated with it. The "
"``file`` action is how you display the path to this file. For example,"
msgstr ""

#: ../../tutorial_hist.rst:167
msgid ""
"Note that by these files are stored in ``$XONSH_DATA_DIR`` environment "
"variable. This is, by default, set to the ``xonsh`` dir inside of the "
"free desktop standards ``$XDG_DATA_HOME`` environment variable. See `this"
" page <http://standards.freedesktop.org/basedir-"
"spec/latest/ar01s03.html>`_ for more details."
msgstr ""

#: ../../tutorial_hist.rst:174
msgid "``info`` action"
msgstr ""

#: ../../tutorial_hist.rst:175
msgid ""
"The info action combines the ``id`` and ``file`` actions as well as adds "
"some additional information about the current state of the history. By "
"default, this prints a key-value series of lines. However, it can also "
"return a JSON formatted string."
msgstr ""

#: ../../tutorial_hist.rst:196
msgid "``replay`` action"
msgstr ""

#: ../../tutorial_hist.rst:197
msgid ""
"The ``replay`` action allows for history files to be rerun, as scripts or"
" in an existing xonsh session."
msgstr ""

#: ../../tutorial_hist.rst:200
msgid ""
"First, the original ``'replay'`` environment is loaded and will be merged"
" with the current ``'native'`` environment. How the environments are "
"merged or not merged can be set at replay time. The default is for the "
"current native environment to take precedence. Next, each input in the "
"environment is executed in order. Lastly, the information of the replayed"
" history file is printed."
msgstr ""

#: ../../tutorial_hist.rst:205
msgid ""
"Let's walk through an example. To begin with, open up xonsh and run some "
"simple commands, as follows. Call this the ``orig`` session."
msgstr ""

#: ../../tutorial_hist.rst:208
msgid "**orig history**"
msgstr ""

#: ../../tutorial_hist.rst:222
msgid ""
"We can now replay this by passing the filename into the replay command or"
" the replay action of the history command. This action has a few "
"different options, but one of them is that we can select a different "
"target output file with the ``-o`` or ``--target`` option. For example, "
"in a new session, we could run:"
msgstr ""

#: ../../tutorial_hist.rst:227
msgid "**new history**"
msgstr ""

#: ../../tutorial_hist.rst:244
msgid ""
"As you can see, a new history was created and another random file was "
"added to the file system. If we want instead to replay history in its own"
" session, we can always use the ``-c`` option on xonsh itself to execute "
"the replay command."
msgstr ""

#: ../../tutorial_hist.rst:248
msgid "**next history**"
msgstr ""

#: ../../tutorial_hist.rst:266
msgid ""
"Currently history does not handle alias storage and reloading, but such a"
" feature may be coming in the future."
msgstr ""

#: ../../tutorial_hist.rst:270
msgid "``diff`` action"
msgstr ""

#: ../../tutorial_hist.rst:271
msgid ""
"Between any two history files, we can run the ``diff`` action. This does "
"more that a simple line diff that you might generate with the unix "
"``diff`` command. (If you want a line diff, just use the unix command!) "
"Instead this takes advantage of the fact that we know we have xonsh "
"history files to do a more sophisticated diff on the environment, input, "
"output (if available), and return values.  Of course, the histories "
"inputs should be 'sufficiently similar' if the diff is to be meaningful. "
"However, they don't need to be exactly the same."
msgstr ""

#: ../../tutorial_hist.rst:278
msgid ""
"The diff action has one major option, ``-v`` or ``--verbose``. This "
"basically says whether the diff should go into as much detail as possible"
" or only pick out the relevant pieces. Diffing the new and next examples "
"from the replay action, we see the diff looks like:"
msgstr ""

#: ../../tutorial_hist.rst:320
msgid "As can be seen, the diff has three sections."
msgstr ""

#: ../../tutorial_hist.rst:322
msgid ""
"**The header** describes the meta-information about the histories, such "
"as their file names, sessionids, and time stamps."
msgstr ""

#: ../../tutorial_hist.rst:324
msgid ""
"**The environment** section describes the differences in the environment "
"when the histories were started or replayed."
msgstr ""

#: ../../tutorial_hist.rst:326
msgid "**The commands** list this differences in the command themselves."
msgstr ""

#: ../../tutorial_hist.rst:328
msgid ""
"For the commands, the input sequences are diff'd first, prior to the "
"outputs being compared. In a terminal, this will appear in color, with "
"the first history in red and the second one in green."
msgstr ""

#: ../../tutorial_hist.rst:333
msgid "``gc`` action"
msgstr ""

#: ../../tutorial_hist.rst:334
msgid ""
"Last, but certainly not least, the ``gc`` action is a manual hook into "
"executing history garbage control. Since history has the potential for a "
"lot of information to be stored, it is necessary to be able to clean out "
"the cache every once in a while."
msgstr ""

#: ../../tutorial_hist.rst:339
msgid ""
"Garbage control is launched automatically for every xonsh thread, but "
"runs in the a background thread. The garbage collector only operates on "
"unlocked history files. The action here allows you to manually start a "
"new garbage collector, possibly with different criteria."
msgstr ""

#: ../../tutorial_hist.rst:344
msgid ""
"Normally, the garbage collector uses the environment variable "
"``$XONSH_HISTORY_SIZE`` to determine the size and units of what should be"
" allowed to remain on disk. By default, this is ``(8128, 'commands')``. "
"This variable is usually a tuple or list of a number and a string, as "
"seen here.  However, you can also use a string with the same information,"
" e.g. ``'8128 commands'``.  On the command line, though, you just pass in"
" two arguments to the ``--size`` option, a la ``--size 8128 commands``."
msgstr ""

#: ../../tutorial_hist.rst:351
msgid "The garbage collector accepts four canonical units:"
msgstr ""

#: ../../tutorial_hist.rst:353
msgid "``'commands'`` is for limiting the number of past commands executed in the"
msgstr ""

#: ../../tutorial_hist.rst:354
msgid "history files,"
msgstr ""

#: ../../tutorial_hist.rst:355
msgid "``'files'`` is for specifying the total number of history files to keep,"
msgstr ""

#: ../../tutorial_hist.rst:356
msgid ""
"``'s'`` is for the number of seconds in the past that are allowed - which"
" is effectively a timeout of the history files, and"
msgstr ""

#: ../../tutorial_hist.rst:358
msgid ""
"``'b'`` is for the number of bytes that are allowed on the file system "
"for all history files to collectively consume."
msgstr ""

#: ../../tutorial_hist.rst:361
msgid ""
"However, other units, aliases, and appropriate conversion functions have "
"been implemented. This makes it easier to garbage collect based on human-"
"friendly values."
msgstr ""

#: ../../tutorial_hist.rst:364
msgid "**GC Aliases:**"
msgstr ""

#: ../../tutorial_hist.rst:377
msgid ""
"So all said and done, if you wanted to remove all history files older "
"than a month, you could run the following command:"
msgstr ""

#: ../../tutorial_hist.rst:386
msgid "History Indexing"
msgstr ""

#: ../../tutorial_hist.rst:387
msgid ""
"History object (``__xonsh__.history``) acts like a sequence that can be "
"indexed in a special way that adds extra functionality. At the moment "
"only history from the current session can be retrieved. Note that the "
"most recent command is the last item in history."
msgstr ""

#: ../../tutorial_hist.rst:392
msgid ""
"The index acts as a filter with two parts, command and argument, "
"separated by comma. Based on the type of each part different filtering "
"can be achieved,"
msgstr ""

#: ../../tutorial_hist.rst:399
msgid "for the command part:"
msgstr ""

#: ../../tutorial_hist.rst:397
msgid "an int returns the command in that position."
msgstr ""

#: ../../tutorial_hist.rst:398
msgid "a slice returns a list of commands."
msgstr ""

#: ../../tutorial_hist.rst:399
msgid "a string returns the most recent command containing the string."
msgstr ""

#: ../../tutorial_hist.rst:404
msgid "for the argument part:"
msgstr ""

#: ../../tutorial_hist.rst:402
msgid "an int returns the argument of the command in that position."
msgstr ""

#: ../../tutorial_hist.rst:403
msgid "a slice returns a part of the command based on the argument position."
msgstr ""

#: ../../tutorial_hist.rst:406
msgid ""
"The argument part of the filter can be omitted but the command part is "
"required."
msgstr ""

#: ../../tutorial_hist.rst:409
msgid "Command arguments are separated by white space."
msgstr ""

#: ../../tutorial_hist.rst:411
msgid ""
"If the filtering produces only one result it is returned as a string else"
" a list of strings is returned."
msgstr ""

#: ../../tutorial_hist.rst:414
msgid "examples:"
msgstr ""

#: ../../tutorial_hist.rst:429
msgid "Exciting Technical Detail: Lazy JSON"
msgstr ""

#: ../../tutorial_hist.rst:430
msgid ""
"So now you know how to inspect, run, and remove history. But what *is* a "
"history file exactly? While xonsh history files are JSON formatted, and "
"they do have the structure indicated at the top of the page, that isn't "
"their top-level structure.  If you open one up, you'll see a bunch of "
"hocus pocus before you get to anything real."
msgstr ""

#: ../../tutorial_hist.rst:435
msgid ""
"Xonsh has implemented a generic indexing system (sizes, offsets, etc)for "
"JSON files that lives inside of the file that it indexes.  This is known "
"as ``LazyJSON`` because it allows us to only read in the parts of a file "
"that we need. For example, for replaying we only need to grab the input "
"fields and so that helps us on I/O. For garbage collecting based on the "
"number of commands, we can get this information from the index and don't "
"need to read in any of the original data."
msgstr ""

#: ../../tutorial_hist.rst:442
msgid ""
"The best part about this is that it is totally generic. Feel free to use "
"``xonsh.lazyjson`` yourself for things other than xonsh history! Of "
"course, if you want to read in xonsh history, you should probably use the"
" module."
msgstr ""

#: ../../tutorial_hist.rst:448
msgid "Exciting Technical Detail: Teeing and Pseudo Terminals"
msgstr ""

#: ../../tutorial_hist.rst:449
msgid ""
"Xonsh is able to capture all stdout and stderr transparently and "
"responsively. For aliases, Python code, or xonsh code, this isn't a big "
"deal. It is easy to redirect information flowing through ``sys.stdout`` "
"and ``sys.stderr``.  For subprocess commands, this is considerably "
"harder. Storing stdout is disabled by default, but can be enabled by "
"setting: ``$XONSH_STORE_STDOUT=True`` in your ``~/.xonshrc`` file."
msgstr ""

#: ../../tutorial_hist.rst:455
msgid ""
"To be able to tee stdout and stderr and still have the terminal "
"responsive, xonsh implements its own teeing pseudo-terminal on top of the"
" Python standard library ``pty`` module. You can find this class in the "
"``xonsh.teepty`` module. Like with lazy JSON, this is independent from "
"other parts of xonsh and can be used on its own.  If you find this useful"
" in other areas, please let us know!"
msgstr ""

#: ../../tutorial_hist.rst:463
msgid "Sqlite History Backend"
msgstr ""

#: ../../tutorial_hist.rst:465
msgid ""
"Xonsh has a second built-in history backend powered by sqlite (other than"
" the JSON version mentioned all above in this tutorial). It shares the "
"same functionality as the JSON version in most ways, except it currently "
"doesn't support ``history diff`` and ``history replay`` actions."
msgstr ""

#: ../../tutorial_hist.rst:470
msgid ""
"The Sqlite history backend can provide a speed advantage in loading "
"history into a just-started xonsh session. The JSON history backend may "
"need to read potentially thousands of json files and the sqlite backend "
"only reads one. Note that this does not affect startup time, but the "
"amount of time before all history is available for searching."
msgstr ""

#: ../../tutorial_hist.rst:476
msgid ""
"To use sqlite history backend, set ``$XONSH_HISTORY_BACKEND = 'sqlite'`` "
"in your ``~/.xonshrc`` file. To switch back to JSON version, remove this "
"line, or set it to ``'json'``."
msgstr ""

#: ../../tutorial_hist.rst:480
msgid ""
"SQLite history backend currently only supports ``commands`` as the unit "
"in ``$XONSH_HISTORY_SIZE`` in its garbage collection."
msgstr ""

#: ../../tutorial_hist.rst:483
msgid ""
"If you have `sqlite-web <https://pypi.python.org/pypi/sqlite-web>`_ "
"installed, you can read the history easily with command: ``sqlite_web "
"@$(history file)``."
msgstr ""

#: ../../tutorial_hist.rst:489
msgid "Fun ideas for history data"
msgstr ""

#: ../../tutorial_hist.rst:490
msgid ""
"Now that we have all of this history data, it seems like what we have "
"here is just the tip of the iceberg! Here are some hopefully fun ideas "
"that I think would be great to see implemented:"
msgstr ""

#: ../../tutorial_hist.rst:494
msgid "Basic statistic reports about command usage, timing, etc.,"
msgstr ""

#: ../../tutorial_hist.rst:495
msgid "Global statistics by collecting anonymized histories from many people,"
msgstr ""

#: ../../tutorial_hist.rst:496
msgid "MCMC-based tab-completer for inputs,"
msgstr ""

#: ../../tutorial_hist.rst:497
msgid "and many more!"
msgstr ""

#: ../../tutorial_hist.rst:499
msgid ""
"Let us know if you'd be interested in working on any of these, inside or "
"outside of xonsh."
msgstr ""

