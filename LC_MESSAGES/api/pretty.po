# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Anthony Scopatz
# This file is distributed under the same license as the xonsh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xonsh 0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-01 16:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/pretty.rst:5
msgid "Pretty printing (``xonsh.pretty``)"
msgstr ""

#: of xonsh.pretty:1
msgid ""
"Python advanced pretty printer.  This pretty printer is intended to "
"replace the old `pprint` python module which does not allow developers to"
" provide their own pretty print callbacks."
msgstr ""

#: of xonsh.pretty:5
msgid "This module is based on ruby's `prettyprint.rb` library by `Tanaka Akira`."
msgstr ""

#: of xonsh.pretty:7
msgid ""
"The following implementations were forked from the IPython project: * "
"Copyright (c) 2008-2014, IPython Development Team * Copyright (C) "
"2001-2007 Fernando Perez <fperez@colorado.edu> * Copyright (c) 2001, "
"Janko Hauser <jhauser@zscout.de> * Copyright (c) 2001, Nathaniel Gray "
"<n8gray@caltech.edu>"
msgstr ""

#: of xonsh.pretty:14
msgid "Example Usage"
msgstr ""

#: of xonsh.pretty:16
msgid "To directly print the representation of an object use `pprint`::"
msgstr ""

#: of xonsh.pretty:21
msgid "To get a string of the output use `pretty`::"
msgstr ""

#: of xonsh.pretty:28
msgid "Extending"
msgstr ""

#: of xonsh.pretty:30
msgid ""
"The pretty library allows developers to add pretty printing rules for "
"their own objects.  This process is straightforward.  All you have to do "
"is to add a `_repr_pretty_` method to your object and call the methods on"
" the pretty printer passed::"
msgstr ""

#: of xonsh.pretty:40
msgid ""
"Here is an example implementation of a `_repr_pretty_` method for a list "
"subclass::"
msgstr ""

#: of xonsh.pretty:56
msgid ""
"The `cycle` parameter is `True` if pretty detected a cycle.  You *have* "
"to react to that or the result is an infinite loop.  `p.text()` just adds"
" non breaking text to the output, `p.breakable()` either adds a "
"whitespace or breaks here.  If you pass it an argument it's used instead "
"of the default space.  `p.pretty` prettyprints another object using the "
"pretty print method."
msgstr ""

#: of xonsh.pretty:63
msgid ""
"The first parameter to the `group` function specifies the extra "
"indentation of the next line.  In this example the next item will either "
"be on the same line (if the items are short enough) or aligned with the "
"right edge of the opening bracket of `MyList`."
msgstr ""

#: of xonsh.pretty:68
msgid ""
"If you just want to indent something you can use the group function "
"without open / close parameters.  You can also use this code::"
msgstr ""

#: of xonsh.pretty
msgid "copyright"
msgstr ""

#: of xonsh.pretty:75
msgid "2007 by Armin Ronacher. Portions (c) 2009 by Robert Kern."
msgstr ""

#: of xonsh.pretty
msgid "license"
msgstr ""

#: of xonsh.pretty:77
msgid "BSD License."
msgstr ""

#: of xonsh.pretty.PrettyPrinter:2
msgid ""
"Baseclass for the `RepresentationPrinter` prettyprinter that is used to "
"generate pretty reprs of objects.  Contrary to the "
"`RepresentationPrinter` this printer knows nothing about the default "
"pprinters or the `_repr_pretty_` callback method."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:2
msgid ""
"Begin a group.  If you want support for python < 2.5 which doesn't has "
"the with statement this is the preferred way:"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:5
msgid "p.begin_group(1, '{') ... p.end_group(1, '}')"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:9
msgid "The python 2.5 expression would be this:"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:12
msgid "with p.group(1, '{', '}'):"
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:12
msgid "..."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.begin_group:14
msgid ""
"The first parameter specifies the indentation for the next line (usually "
"the width of the opening text), the second the opening text.  All "
"parameters are optional."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.break_:2
msgid ""
"Explicitly insert a newline into the output, maintaining correct "
"indentation."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.breakable:2
msgid ""
"Add a breakable separator to the output.  This does not mean that it will"
" automatically break here.  If no breaking on this position takes place "
"the `sep` is inserted which default to one space."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.end_group:2
msgid "End a group. See `begin_group` for more details."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.flush:2
msgid "Flush data that is left in the buffer."
msgstr ""

#: of xonsh.pretty.PrettyPrinter.text:2
msgid "Add literal text to the output."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:2
msgid ""
"Special pretty printer that has a `pretty` method that calls the pretty "
"printer for a python object."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:5
msgid ""
"This class stores processing data on `self` so you must *never* use this "
"class in a threaded environment.  Always lock it or reinstantiate it."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter:9
msgid ""
"Instances also have a verbose flag callbacks can access to control their "
"output.  For example the default instance repr prints all attributes and "
"methods that are not prefixed by an underscore if the printer is in "
"verbose mode."
msgstr ""

#: of xonsh.pretty.RepresentationPrinter.pretty:2
msgid "Pretty print the given object."
msgstr ""

#: of xonsh.pretty.pretty:2
msgid "Pretty print the object's representation."
msgstr ""

#: of xonsh.pretty.pretty_print:2
msgid "Like pretty() but print to stdout."
msgstr ""

#: of xonsh.pretty.for_type:2
msgid "Add a pretty printer for a given type."
msgstr ""

#: of xonsh.pretty.for_type_by_name:2
msgid ""
"Add a pretty printer for a type specified by the module and name of a "
"type rather than the type object itself."
msgstr ""

