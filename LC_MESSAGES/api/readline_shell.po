# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Anthony Scopatz
# This file is distributed under the same license as the xonsh package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: xonsh 0.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-01 16:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../api/readline_shell.rst:5
msgid "Readline Shell (``xonsh.readline_shell``)"
msgstr ""

#: of xonsh.readline_shell:1 xonsh.readline_shell.ReadlineShell:2
msgid "The readline based xonsh shell."
msgstr ""

#: of xonsh.readline_shell:3
msgid ""
"Portions of this code related to initializing the readline library are "
"included from the IPython project.  The IPython project is:"
msgstr ""

#: of xonsh.readline_shell:6
msgid "Copyright (c) 2008-2014, IPython Development Team"
msgstr ""

#: of xonsh.readline_shell:7
msgid "Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>"
msgstr ""

#: of xonsh.readline_shell:8
msgid "Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>"
msgstr ""

#: of xonsh.readline_shell:9
msgid "Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>"
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder:2
msgid ""
"Thread responsible for adding inputs from history to the current readline"
" instance. May wait for the history garbage collector to finish."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.isAlive:2
#: xonsh.readline_shell.ReadlineHistoryAdder.is_alive:2
msgid "Return whether the thread is alive."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.isAlive:4
msgid "This method is deprecated, use is_alive() instead."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.is_alive:4
msgid ""
"This method returns True just before the run() method starts until just "
"after the run() method terminates. The module function enumerate() "
"returns a list of all alive threads."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:2
msgid "Wait until the thread terminates."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:4
msgid ""
"This blocks the calling thread until the thread whose join() method is "
"called terminates -- either normally or through an unhandled exception or"
" until the optional timeout occurs."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:8
msgid ""
"When the timeout argument is present and not None, it should be a "
"floating point number specifying a timeout for the operation in seconds "
"(or fractions thereof). As join() always returns None, you must call "
"is_alive() after join() to decide whether a timeout happened -- if the "
"thread is still alive, the join() call timed out."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:14
msgid ""
"When the timeout argument is not present or None, the operation will "
"block until the thread terminates."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:17
msgid "A thread can be join()ed many times."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.join:19
msgid ""
"join() raises a RuntimeError if an attempt is made to join the current "
"thread as that would cause a deadlock. It is also an error to join() a "
"thread before it has been started and attempts to do so raises the same "
"exception."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.run:2
msgid "Method representing the thread's activity."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.run:4
msgid ""
"You may override this method in a subclass. The standard run() method "
"invokes the callable object passed to the object's constructor as the "
"target argument, if any, with sequential and keyword arguments taken from"
" the args and kwargs arguments, respectively."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:2
msgid "Start the thread's activity."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:4
msgid ""
"It must be called at most once per thread object. It arranges for the "
"object's run() method to be invoked in a separate thread of control."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.start:7
msgid ""
"This method will raise a RuntimeError if called more than once on the "
"same thread object."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:2
msgid "A boolean value indicating whether this thread is a daemon thread."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:4
msgid ""
"This must be set before start() is called, otherwise RuntimeError is "
"raised. Its initial value is inherited from the creating thread; the main"
" thread is not a daemon thread and therefore all threads created in the "
"main thread default to daemon = False."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.daemon:9
msgid "The entire Python program exits when no alive non-daemon threads are left."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.ident:2
msgid "Thread identifier of this thread or None if it has not been started."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.ident:4
msgid ""
"This is a nonzero integer. See the get_ident() function. Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created. The identifier is available even after the thread has exited."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.name:2
msgid "A string used for identification purposes only."
msgstr ""

#: of xonsh.readline_shell.ReadlineHistoryAdder.name:4
msgid ""
"It has no semantics. Multiple threads may be given the same name. The "
"initial name is set by the constructor."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.cmdloop:2
msgid ""
"Repeatedly issue a prompt, accept input, parse an initial prefix off the "
"received input, and dispatch to action methods, passing them the "
"remainder of the line as argument."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.color_style:2
msgid "Returns the current color map."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.color_style_names:2
msgid "Returns an iterable of all available style names."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.columnize:2
msgid "Display a list of strings as a compact set of columns."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.columnize:4
msgid ""
"Each column is only as wide as necessary. Columns are separated by two "
"spaces (one was not legible enough)."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.compile:2
msgid ""
"Compiles source code and returns the (possibly modified) source and a "
"valid code object."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.complete:2
msgid "Return the next possible completion for 'text'."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.complete:4
msgid ""
"If a command has not been entered, then complete against command list. "
"Otherwise try to call complete_<command> to get list of completions."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.completedefault:2
#: xonsh.readline_shell.ReadlineShell.completenames:2
msgid "Implements tab-completion for text."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.default:2
msgid "Implements code execution."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.do_help:2
msgid "List available commands with \"help\" or detailed help with \"help cmd\"."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.emptyline:2
msgid "Called when an empty line has been entered."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.format_color:2
msgid "Readline implementation of color formatting. This uses ANSI color codes."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.onecmd:2
msgid ""
"Interpret the argument as though it had been typed in response to the "
"prompt."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.onecmd:5
msgid ""
"This may be overridden, but should not normally need to be; see the "
"precmd() and postcmd() methods for useful execution hooks. The return "
"value is a flag indicating whether interpretation of commands by the "
"interpreter should stop."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.parseline:2
msgid "Overridden to no-op."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.postcmd:2
msgid ""
"Called just before execution of line. For readline, this handles the "
"automatic indentation of code blocks."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.postloop:2
msgid "Hook method executed once when the cmdloop() method is about to return."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.precmd:2
msgid "Called just before execution of line."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.preloop:2
msgid "Hook method executed once when the cmdloop() method is called."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.print_color:2
msgid ""
"Prints a string in color. This base implementation's colors are based on "
"ANSI color codes if a string was given as input. If a list of token pairs"
" is given, it will color based on pygments, if available. If pygments is "
"not available, it will print a colorless string."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.push:2
msgid ""
"Pushes a line onto the buffer and compiles the code in a way that enables"
" multiline input."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.reset_buffer:2
msgid "Resets the line buffer."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.restore_tty_sanity:2
msgid ""
"An interface for resetting the TTY stdin mode. This is highly dependent "
"on the shell backend. Also it is mostly optional since it only affects ^Z"
" backgrounding behaviour."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.settitle:2
msgid "Sets terminal title."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.singleline:2
msgid ""
"Reads a single line of input. The store_in_history kwarg flags whether "
"the input should be stored in readline's in-memory history."
msgstr ""

#: of xonsh.readline_shell.ReadlineShell.prompt:2
msgid "Obtains the current prompt string."
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:2
msgid "Fix to allow Ctrl-C to exit reverse-i-search."
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:19
msgid "Based on code from:"
msgstr ""

#: of xonsh.readline_shell.fix_readline_state_after_ctrl_c:5
msgid "http://bugs.python.org/file39467/raw_input__workaround_demo.py"
msgstr ""

#: of xonsh.readline_shell.rl_completion_query_items:2
msgid ""
"Sets the rl_completion_query_items variable, if possible. A None value "
"will set this to $COMPLETION_QUERY_LIMIT, otherwise any integer is "
"accepted."
msgstr ""

#: of xonsh.readline_shell.rl_completion_suppress_append:2
msgid ""
"Sets the rl_completion_suppress_append variable, if possible. A value of "
"1 (default) means to suppress, a value of 0 means to enable."
msgstr ""

#: of xonsh.readline_shell.rl_variable_dumper:2
msgid ""
"Dumps the currently set readline variables. If readable is True, then "
"this output may be used in an inputrc file."
msgstr ""

#: of xonsh.readline_shell.rl_variable_value:2
msgid "Returns the currently set value for a readline configuration variable."
msgstr ""

#: of xonsh.readline_shell.setup_readline:2
msgid "Sets up the readline module and completion suppression, if available."
msgstr ""

#: of xonsh.readline_shell.teardown_readline:2
msgid "Tears down up the readline module, if available."
msgstr ""

